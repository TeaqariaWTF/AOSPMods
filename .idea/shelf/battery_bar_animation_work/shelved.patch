Index: app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/BatteryDataProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sh.siava.pixelxpert.modpacks.systemui;\r\n\r\nimport static de.robv.android.xposed.XposedBridge.hookAllConstructors;\r\nimport static de.robv.android.xposed.XposedBridge.hookAllMethods;\r\nimport static de.robv.android.xposed.XposedHelpers.callMethod;\r\nimport static de.robv.android.xposed.XposedHelpers.findClass;\r\nimport static de.robv.android.xposed.XposedHelpers.getBooleanField;\r\nimport static de.robv.android.xposed.XposedHelpers.getIntField;\r\nimport static de.robv.android.xposed.XposedHelpers.getObjectField;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport de.robv.android.xposed.XC_MethodHook;\r\nimport de.robv.android.xposed.callbacks.XC_LoadPackage;\r\nimport sh.siava.pixelxpert.modpacks.Constants;\r\nimport sh.siava.pixelxpert.modpacks.XPLauncher;\r\nimport sh.siava.pixelxpert.modpacks.XposedModPack;\r\n\r\n/** @noinspection RedundantThrows */\r\npublic class BatteryDataProvider extends XposedModPack {\r\n\tprivate static final String listenPackage = Constants.SYSTEM_UI_PACKAGE;\r\n\r\n\tpublic static final int CHARGING_FAST = 2;\r\n\r\n\tpublic static final int BATTERY_STATUS_DISCHARGING = 3;\r\n\r\n\t@SuppressLint(\"StaticFieldLeak\")\r\n\tprivate static BatteryDataProvider instance = null;\r\n\r\n\tList<BatteryStatusCallback> mStatusCallbacks = new ArrayList<>();\r\n\tprivate boolean mCharging;\r\n\tprivate int mCurrentLevel = 0;\r\n\r\n\r\n\tprivate final ArrayList<BatteryInfoCallback> mInfoCallbacks = new ArrayList<>();\r\n\tprivate boolean mPowerSave = false;\r\n\tprivate boolean mIsFastCharging = false;\r\n\r\n\r\n\tpublic BatteryDataProvider(Context context) {\r\n\t\tsuper(context);\r\n\t\tinstance = this;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void updatePrefs(String... Key) {}\r\n\r\n\t@Override\r\n\tpublic void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpParam) throws Throwable {\r\n\t\tClass<?> BatteryStatusClass = findClass(\"com.android.settingslib.fuelgauge.BatteryStatus\", lpParam.classLoader);\r\n\t\tClass<?> BatteryControllerImplClass = findClass(\"com.android.systemui.statusbar.policy.BatteryControllerImpl\", lpParam.classLoader);\r\n\r\n\t\t//once an intent is received, it's either battery level change, powersave change, or demo mode. we don't expect demo\r\n\t\t// intents normally. So it's safe to assume we'll need to update battery anyway\r\n\t\thookAllMethods(BatteryControllerImplClass, \"onReceive\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tmCurrentLevel = getIntField(param.thisObject, \"mLevel\");\r\n\t\t\t\tmCharging = getBooleanField(param.thisObject, \"mPluggedIn\")\r\n\t\t\t\t\t\t|| getBooleanField(param.thisObject, \"mCharging\")\r\n\t\t\t\t\t\t|| getBooleanField(param.thisObject, \"mWirelessCharging\");\r\n\t\t\t\tmPowerSave = getBooleanField(param.thisObject, \"mPowerSave\");\r\n\r\n\t\t\t\tfireBatteryInfoChanged();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\thookAllConstructors(BatteryStatusClass, new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tmIsFastCharging = callMethod(param.thisObject, \"getChargingSpeed\", mContext).equals(CHARGING_FAST);\r\n\t\t\t\tif(param.args.length > 0) {\r\n\t\t\t\t\tonBatteryStatusChanged((int) getObjectField(param.thisObject, \"status\"), (Intent) param.args[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate void onBatteryStatusChanged(int status, Intent intent) {\r\n\t\tfor(BatteryStatusCallback callback : mStatusCallbacks)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tcallback.onBatteryStatusChanged(status, intent);\r\n\t\t\t}\r\n\t\t\tcatch (Throwable ignored){}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void registerStatusCallback(BatteryStatusCallback callback)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\tinstance.mStatusCallbacks.add(callback);\r\n\t\t}\r\n\t\tcatch (Throwable ignored) {}\r\n\t}\r\n\r\n\t/** @noinspection unused*/\r\n\tpublic static void unRegisterStatusCallback(BatteryStatusCallback callback)\r\n\t{\r\n\t\ttry {\r\n\t\t\tinstance.mStatusCallbacks.remove(callback);\r\n\t\t}\r\n\t\tcatch (Throwable ignored){}\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean listensTo(String packageName) {\r\n\t\treturn listenPackage.equals(packageName) && !XPLauncher.isChildProcess;\r\n\t}\r\n\r\n\tpublic static void registerInfoCallback(BatteryInfoCallback callback)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\tinstance.mInfoCallbacks.add(callback);\r\n\t\t}\r\n\t\tcatch (Throwable ignored){}\r\n\t}\r\n\r\n\t/** @noinspection unused*/\r\n\tpublic static void unRegisterInfoCallback(BatteryInfoCallback callback)\r\n\t{\r\n\t\ttry {\r\n\t\t\tinstance.mInfoCallbacks.remove(callback);\r\n\t\t}\r\n\t\tcatch (Throwable ignored){}\r\n\t}\r\n\r\n\tpublic static boolean isCharging()\r\n\t{\r\n\t\ttry {\r\n\t\t\treturn instance.mCharging;\r\n\t\t}\r\n\t\tcatch (Throwable ignored)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static int getCurrentLevel()\r\n\t{\r\n\t\ttry {\r\n\t\t\treturn instance.mCurrentLevel;\r\n\t\t}\r\n\t\tcatch (Throwable ignored)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static boolean isPowerSaving()\r\n\t{\r\n\t\ttry {\r\n\t\t\treturn instance.mPowerSave;\r\n\t\t}\r\n\t\tcatch (Throwable ignored)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static boolean isFastCharging()\r\n\t{\r\n\t\ttry {\r\n\t\t\treturn instance.mCharging && instance.mIsFastCharging;\r\n\t\t}\r\n\t\tcatch (Throwable ignored)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void fireBatteryInfoChanged() {\r\n\t\tfor(BatteryInfoCallback callback : mInfoCallbacks)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tcallback.onBatteryInfoChanged();\r\n\t\t\t}\r\n\t\t\tcatch (Throwable ignored){}\r\n\t\t}\r\n\t}\r\n\tpublic interface BatteryInfoCallback\r\n\t{\r\n\t\tvoid onBatteryInfoChanged();\r\n\t}\r\n\r\n\r\n\tpublic interface BatteryStatusCallback\r\n\t{\r\n\t\tvoid onBatteryStatusChanged(int batteryStatus, Intent batteryStatusIntent);\r\n\t}\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/BatteryDataProvider.java b/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/BatteryDataProvider.java
--- a/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/BatteryDataProvider.java	(revision 2423726473cd8f6fc45c31e8094143cb00438738)
+++ b/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/BatteryDataProvider.java	(date 1727617866554)
@@ -137,7 +137,7 @@
 	public static boolean isCharging()
 	{
 		try {
-			return instance.mCharging;
+			return true;
 		}
 		catch (Throwable ignored)
 		{
@@ -148,7 +148,7 @@
 	public static int getCurrentLevel()
 	{
 		try {
-			return instance.mCurrentLevel;
+			return 56;
 		}
 		catch (Throwable ignored)
 		{
Index: app/src/main/java/sh/siava/pixelxpert/modpacks/utils/batteryStyles/BatteryBarView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sh.siava.pixelxpert.modpacks.utils.batteryStyles;\r\n\r\nimport static sh.siava.pixelxpert.modpacks.systemui.BatteryDataProvider.getCurrentLevel;\r\nimport static sh.siava.pixelxpert.modpacks.systemui.BatteryDataProvider.isCharging;\r\nimport static sh.siava.pixelxpert.modpacks.systemui.BatteryDataProvider.isFastCharging;\r\nimport static sh.siava.pixelxpert.modpacks.systemui.BatteryDataProvider.isPowerSaving;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Context;\r\nimport android.content.res.Resources;\r\nimport android.graphics.Color;\r\nimport android.graphics.Paint;\r\nimport android.graphics.RadialGradient;\r\nimport android.graphics.Shader;\r\nimport android.graphics.drawable.ShapeDrawable;\r\nimport android.graphics.drawable.shapes.RectShape;\r\nimport android.os.Handler;\r\nimport android.text.TextUtils;\r\nimport android.util.DisplayMetrics;\r\nimport android.view.Gravity;\r\nimport android.view.ViewGroup;\r\nimport android.view.animation.LinearInterpolator;\r\nimport android.view.animation.TranslateAnimation;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.core.graphics.ColorUtils;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\nimport sh.siava.pixelxpert.modpacks.systemui.BatteryDataProvider;\r\nimport sh.siava.pixelxpert.modpacks.systemui.StatusbarMods;\r\n\r\npublic class BatteryBarView extends FrameLayout {\r\n\tprivate static int[] shadeColors;\r\n\tprivate final boolean RTL;\r\n\tprivate static float[] shadeLevels = new float[0];\r\n\tprivate final ShapeDrawable mDrawable = new ShapeDrawable();\r\n\tFrameLayout maskLayout;\r\n\tprivate final ImageView chargingIndicatorView;\r\n\tprivate final ImageView chargingIndicatorViewForCenter;\r\n\tprivate boolean colorful = false;\r\n\tprivate int alphaPct = 100;\r\n\tprivate int singleColorTone = Color.WHITE;\r\n\tprivate boolean isCenterBased = false;\r\n\tprivate int barHeight = 10;\r\n\tprivate final ImageView barView;\r\n\tprivate boolean onTop = true;\r\n\t@SuppressLint(\"StaticFieldLeak\")\r\n\tprivate static BatteryBarView instance = null;\r\n\tprivate boolean onlyWhileCharging = false;\r\n\tprivate boolean mIsEnabled = true;\r\n\tprivate boolean mIsHidden = false;\r\n\tprivate static List<Float> batteryLevels = Arrays.asList(20f, 40f);\r\n\tprivate static int[] batteryColors = new int[]{Color.RED, Color.YELLOW};\r\n\tprivate static int chargingColor = Color.WHITE;\r\n\tprivate static int fastChargingColor = Color.WHITE;\r\n\tprivate static int powerSaveColor = Color.parseColor(\"#FFBF00\");\r\n\tprivate static boolean indicateCharging = false;\r\n\tprivate static boolean indicateFastCharging = false;\r\n\tprivate static boolean indicatePowerSave = false;\r\n\tprivate static boolean transitColors = false;\r\n\tprivate static boolean animateCharging = false;\r\n\tprivate static final int ANIM_DURATION = 1000;\r\n\tprivate static final int ANIM_DELAY = 2000;\r\n\tprivate final Handler animationHandler = new Handler();\r\n\tprivate Runnable chargingAnimationRunnable;\r\n\r\n\tpublic static void setStaticColor(List<Float> batteryLevels, int[] batteryColors, boolean indicateCharging, int chargingColor, boolean indicateFastCharging, int fastChargingColor, boolean indicatePowerSave, int powerSaveColor, boolean transitColors, boolean animate) {\r\n\t\tBatteryBarView.transitColors = transitColors;\r\n\t\tBatteryBarView.batteryLevels = batteryLevels;\r\n\t\tBatteryBarView.batteryColors = batteryColors;\r\n\t\tBatteryBarView.chargingColor = chargingColor;\r\n\t\tBatteryBarView.fastChargingColor = fastChargingColor;\r\n\t\tBatteryBarView.indicatePowerSave = indicatePowerSave;\r\n\t\tBatteryBarView.powerSaveColor = powerSaveColor;\r\n\t\tBatteryBarView.indicateCharging = indicateCharging;\r\n\t\tBatteryBarView.indicateFastCharging = indicateFastCharging;\r\n\t\tBatteryBarView.animateCharging = animate;\r\n\t}\r\n\r\n\tpublic void setOnTop(boolean onTop) {\r\n\t\tthis.onTop = onTop;\r\n\r\n\t\trefreshLayout();\r\n\t}\r\n\r\n\tpublic void setOnlyWhileCharging(boolean state) {\r\n\t\tonlyWhileCharging = state;\r\n\t\trefreshLayout();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onAttachedToWindow() {\r\n\t\tsuper.onAttachedToWindow();\r\n\t\trefreshLayout();\r\n\t}\r\n\r\n\tpublic void refreshLayout() {\r\n\t\tif (!isAttachedToWindow()) return;\r\n\r\n\t\trefreshVisibility();\r\n\r\n\t\tif (barView.getVisibility() == GONE) return;\r\n\t\tmaskLayout.setLayoutParams(maskLayoutParams());\r\n\t\tbarView.setLayoutParams(barLayoutParams());\r\n\t\tchargingIndicatorView.setLayoutParams(charginLayoutParams());\r\n\t\tchargingIndicatorViewForCenter.setLayoutParams(charginLayoutParams());\r\n\r\n\t\trefreshColors(barView.getWidth(), barView.getHeight());\r\n\t\tmDrawable.invalidateSelf();\r\n\r\n\t\tif (isCharging() && animateCharging) {\r\n\t\t\tstartChargingAnimation();\r\n\t\t} else {\r\n\t\t\tstopChargingAnimation();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate LayoutParams maskLayoutParams() {\r\n\t\tLayoutParams result = new LayoutParams(Math.round(getWidth() * getCurrentLevel() / 100f), ViewGroup.LayoutParams.MATCH_PARENT);\r\n\t\tresult.gravity = (isCenterBased) ? Gravity.CENTER : Gravity.START;\r\n\t\treturn result;\r\n\t}\r\n\r\n\t@SuppressWarnings(\"SpellCheckingInspection\")\r\n\t@Override\r\n\tpublic void onSizeChanged(int w, int h, int oldw, int oldh) {\r\n\t\tsuper.onSizeChanged(w, h, oldw, oldh);\r\n\t\trefreshLayout();\r\n\t}\r\n\r\n\tprivate void startChargingAnimation() {\r\n\t\tif (!isCharging() || !animateCharging) {\r\n\t\t\tstopChargingAnimation();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (chargingAnimationRunnable == null) {\r\n\t\t\tchargingAnimationRunnable = new Runnable() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tanimateChargingIndicator();\r\n\t\t\t\t\tanimationHandler.postDelayed(this, ANIM_DELAY);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tanimationHandler.post(chargingAnimationRunnable);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void stopChargingAnimation() {\r\n\t\tif (chargingAnimationRunnable != null) {\r\n\t\t\tanimationHandler.removeCallbacks(chargingAnimationRunnable);\r\n\t\t\tchargingIndicatorView.post(() -> chargingIndicatorView.setVisibility(GONE));\r\n\t\t\tchargingIndicatorViewForCenter.post(() -> chargingIndicatorViewForCenter.setVisibility(GONE));\r\n\t\t\tchargingAnimationRunnable = null;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void animateChargingIndicator() {\r\n\t\tint screenWidth = Resources.getSystem().getDisplayMetrics().widthPixels;\r\n\r\n\t\tchargingIndicatorView.post(() -> chargingIndicatorView.setVisibility(VISIBLE));\r\n\t\tint secondaryVisiblity = (isCenterBased) ? GONE : VISIBLE;\r\n\t\tchargingIndicatorViewForCenter.post(() -> chargingIndicatorViewForCenter.setVisibility(secondaryVisiblity));\r\n\r\n\t\tfloat startX, startXCenter, endX;\r\n\r\n\t\tif (RTL) {\r\n\t\t\tstartX = 0;\r\n\t\t\tstartXCenter = getWidth();\r\n\t\t\tendX = getWidth() - Math.round(getWidth() * getCurrentLevel() / 100f);\r\n\t\t} else {\r\n\t\t\tstartX = screenWidth;\r\n\t\t\tstartXCenter = 0;\r\n\t\t\tendX = Math.round(getWidth() * getCurrentLevel() / 100f);\r\n\t\t}\r\n\t\tif (isCenterBased) endX = getWidth() / 2f;\r\n\r\n\t\tTranslateAnimation animation = new TranslateAnimation(startX, endX, 0, 0);\r\n\t\tanimation.setDuration(ANIM_DURATION);\r\n\t\tanimation.setInterpolator(new LinearInterpolator());\r\n\t\tchargingIndicatorView.startAnimation(animation);\r\n\r\n\t\tif (isCenterBased) {\r\n\t\t\tTranslateAnimation animationCenter = new TranslateAnimation(startXCenter, endX, 0, 0);\r\n\t\t\tanimationCenter.setDuration(ANIM_DURATION);\r\n\t\t\tanimationCenter.setInterpolator(new LinearInterpolator());\r\n\t\t\tchargingIndicatorViewForCenter.startAnimation(animationCenter);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic BatteryBarView(Context context) {\r\n\t\tsuper(context);\r\n\t\tinstance = this;\r\n\t\tthis.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\r\n\r\n\t\tmDrawable.setShape(new RectShape());\r\n\t\tthis.setSingleColorTone(singleColorTone);\r\n\t\tthis.setAlphaPct(alphaPct);\r\n\r\n\t\tbarView = new ImageView(context);\r\n\t\tbarView.setImageDrawable(mDrawable);\r\n\r\n\t\tchargingIndicatorView = new ImageView(context);\r\n\t\tchargingIndicatorView.setLayoutParams(new LayoutParams(20, barHeight));\r\n\t\tchargingIndicatorView.setBackgroundColor(singleColorTone);\r\n\r\n\t\tchargingIndicatorViewForCenter = new ImageView(context);\r\n\t\tchargingIndicatorViewForCenter.setLayoutParams(new LayoutParams(20, barHeight));\r\n\t\tchargingIndicatorViewForCenter.setBackgroundColor(singleColorTone);\r\n\r\n\t\tmaskLayout = new FrameLayout(context);\r\n\t\tmaskLayout.addView(barView);\r\n\t\tmaskLayout.setClipChildren(true);\r\n\r\n\t\tthis.addView(maskLayout);\r\n\t\tthis.addView(chargingIndicatorView);\r\n\t\tthis.addView(chargingIndicatorViewForCenter);\r\n\t\tthis.setClipChildren(true);\r\n\r\n\t\tRTL = (TextUtils.getLayoutDirectionFromLocale(Locale.getDefault()) == LAYOUT_DIRECTION_RTL);\r\n\r\n\t\tStatusbarMods.registerClockVisibilityCallback(this::setVisible);\r\n\r\n\t\trefreshLayout();\r\n\r\n\t\tBatteryBarView instance = this;\r\n\t\tBatteryDataProvider.registerInfoCallback(() -> instance.post(instance::refreshLayout));\r\n\t}\r\n\t@Override\r\n\tpublic void setLayoutDirection(int direction) {\r\n\t\tsuper.setLayoutDirection(direction);\r\n\t}\r\n\r\n\tprivate LayoutParams barLayoutParams() {\r\n\t\tLayoutParams result = new LayoutParams(getWidth(), barHeight);\r\n\r\n\t\tresult.gravity = (isCenterBased) ? Gravity.CENTER : Gravity.START;\r\n\r\n\t\tresult.gravity |= (onTop) ? Gravity.TOP : Gravity.BOTTOM;\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprivate LayoutParams charginLayoutParams() {\r\n\t\tDisplayMetrics metrics = getContext().getResources().getDisplayMetrics();\r\n\t\tfloat dp = 4f;\r\n\t\tint pixels = (int) (metrics.density * dp + 0.5f);\r\n\t\tLayoutParams result = new LayoutParams(pixels, barHeight);\r\n\r\n\t\tresult.gravity = (RTL) ? Gravity.END : Gravity.START;\r\n\t\tresult.gravity |= (onTop) ? Gravity.TOP : Gravity.BOTTOM;\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic void setBarHeight(int height) {\r\n\t\tbarHeight = height;\r\n\t\trefreshLayout();\r\n\t}\r\n\r\n\tpublic void setColorful(boolean colorful) {\r\n\t\tthis.colorful = colorful;\r\n\t\trefreshLayout();\r\n\t}\r\n\r\n\tpublic void setSingleColorTone(int colorTone) {\r\n\t\tthis.singleColorTone = colorTone;\r\n\t\trefreshLayout();\r\n\t}\r\n\r\n\tpublic void refreshColors(int lenX, int lenY) {\r\n\t\tif (lenX == 0) return; //we're not ready yet\r\n\t\trefreshShadeColors();\r\n\t\tPaint mPaint = mDrawable.getPaint();\r\n\t\tmPaint.setShader(null);\r\n\t\tmDrawable.setIntrinsicWidth(lenX);\r\n\t\tmDrawable.setIntrinsicHeight(lenY);\r\n\t\tif (isFastCharging() && indicateFastCharging) //fast charging color\r\n\t\t{\r\n\t\t\tchargingIndicatorView.setBackgroundColor(fastChargingColor);\r\n\t\t\tchargingIndicatorViewForCenter.setBackgroundColor(fastChargingColor);\r\n\t\t\tmPaint.setColor(fastChargingColor);\r\n\t\t} else if (isCharging() && indicateCharging) //normal charging color\r\n\t\t{\r\n\t\t\tchargingIndicatorView.setBackgroundColor(chargingColor);\r\n\t\t\tchargingIndicatorViewForCenter.setBackgroundColor(chargingColor);\r\n\t\t\tmPaint.setColor(chargingColor);\r\n\t\t} else if (isPowerSaving() && indicatePowerSave) //power saving color\r\n\t\t{\r\n\t\t\tmPaint.setColor(powerSaveColor);\r\n\t\t} else if (!colorful || shadeColors == null) {                    //not charging color\r\n\t\t\tfor (int i = 0; i < batteryLevels.size(); i++) {\r\n\t\t\t\tif (getCurrentLevel() <= batteryLevels.get(i)) {\r\n\t\t\t\t\tif (transitColors && i > 0) {\r\n\t\t\t\t\t\tfloat range = batteryLevels.get(i) - batteryLevels.get(i - 1);\r\n\t\t\t\t\t\tfloat currentPos = getCurrentLevel() - batteryLevels.get(i - 1);\r\n\t\t\t\t\t\tfloat ratio = currentPos / range;\r\n\t\t\t\t\t\tmPaint.setColor(ColorUtils.blendARGB(batteryColors[i - 1], batteryColors[i], ratio));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmPaint.setColor(batteryColors[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmPaint.setColor(singleColorTone);\r\n\t\t} else                                    //it's colorful\r\n\t\t{\r\n\t\t\tfloat cX = isCenterBased ? lenX / 2f : ((RTL) ? lenX : 0);\r\n\t\t\tfloat cY = isCenterBased ? lenY / 2f : ((RTL) ? lenY : 0);\r\n\t\t\tfloat radius = isCenterBased ? lenX / 2f : lenX;\r\n\r\n\t\t\tRadialGradient colorfulShader = new RadialGradient(cX, cY, radius, shadeColors, shadeLevels, Shader.TileMode.CLAMP);\r\n\t\t\tmPaint.setShader(colorfulShader);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static void refreshShadeColors() {\r\n\t\tif (batteryColors == null || batteryLevels.isEmpty()) return;\r\n\r\n\t\tshadeColors = new int[batteryLevels.size() * 2 + 2];\r\n\t\tshadeLevels = new float[shadeColors.length];\r\n\t\tfloat prev = 0;\r\n\t\tfor (int i = 0; i < batteryLevels.size(); i++) {\r\n\t\t\tfloat rangeLength = batteryLevels.get(i) - prev;\r\n\t\t\tshadeLevels[2 * i] = (prev + rangeLength * .3f) / 100;\r\n\t\t\tshadeColors[2 * i] = batteryColors[i];\r\n\r\n\t\t\tshadeLevels[2 * i + 1] = (batteryLevels.get(i) - rangeLength * .3f) / 100;\r\n\t\t\tshadeColors[2 * i + 1] = batteryColors[i];\r\n\r\n\t\t\tprev = batteryLevels.get(i);\r\n\t\t}\r\n\r\n\t\tshadeLevels[shadeLevels.length - 2] = (batteryLevels.get(batteryLevels.size() - 1) + (100 - batteryLevels.get(batteryLevels.size() - 1)) * .3f) / 100;\r\n\t\tshadeColors[shadeColors.length - 2] = Color.GREEN;\r\n\t\tshadeLevels[shadeLevels.length - 1] = 1f;\r\n\t\tshadeColors[shadeColors.length - 1] = Color.GREEN;\r\n\t}\r\n\r\n\r\n\tpublic void setAlphaPct(int alphaPct) {\r\n\t\tthis.alphaPct = alphaPct;\r\n\t\tmDrawable.setAlpha(Math.round(alphaPct * 2.55f));\r\n\t}\r\n\r\n\tpublic void setEnabled(boolean enabled) {\r\n\t\tthis.mIsEnabled = enabled;\r\n\t\trefreshVisibility();\r\n\t}\r\n\r\n\tpublic void setVisible(boolean visible) {\r\n\t\tthis.mIsHidden = !visible;\r\n\t\trefreshVisibility();\r\n\t}\r\n\r\n\tprivate void refreshVisibility() {\r\n\t\tif (!mIsEnabled || mIsHidden || (onlyWhileCharging && !isCharging())) {\r\n\t\t\tbarView.setVisibility(GONE);\r\n\t\t} else {\r\n\t\t\tbarView.setVisibility(VISIBLE);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static BatteryBarView getInstance(Context context) {\r\n\t\tif (instance != null) return instance;\r\n\t\treturn new BatteryBarView(context);\r\n\t}\r\n\r\n\tpublic static BatteryBarView getInstance() {\r\n\t\treturn instance;\r\n\t}\r\n\r\n\tpublic static boolean hasInstance() {\r\n\t\treturn (instance != null);\r\n\t}\r\n\r\n\tpublic void setCenterBased(boolean bbSetCentered) {\r\n\t\tisCenterBased = bbSetCentered;\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sh/siava/pixelxpert/modpacks/utils/batteryStyles/BatteryBarView.java b/app/src/main/java/sh/siava/pixelxpert/modpacks/utils/batteryStyles/BatteryBarView.java
--- a/app/src/main/java/sh/siava/pixelxpert/modpacks/utils/batteryStyles/BatteryBarView.java	(revision 2423726473cd8f6fc45c31e8094143cb00438738)
+++ b/app/src/main/java/sh/siava/pixelxpert/modpacks/utils/batteryStyles/BatteryBarView.java	(date 1727617983859)
@@ -15,6 +15,7 @@
 import android.graphics.drawable.ShapeDrawable;
 import android.graphics.drawable.shapes.RectShape;
 import android.os.Handler;
+import android.os.Looper;
 import android.text.TextUtils;
 import android.util.DisplayMetrics;
 import android.view.Gravity;
@@ -133,8 +134,10 @@
 	}
 
 	private void startChargingAnimation() {
+
 		if (!isCharging() || !animateCharging) {
 			stopChargingAnimation();
+
 			return;
 		}
 
@@ -151,20 +154,25 @@
 	}
 
 	private void stopChargingAnimation() {
-		if (chargingAnimationRunnable != null) {
-			animationHandler.removeCallbacks(chargingAnimationRunnable);
-			chargingIndicatorView.post(() -> chargingIndicatorView.setVisibility(GONE));
-			chargingIndicatorViewForCenter.post(() -> chargingIndicatorViewForCenter.setVisibility(GONE));
-			chargingAnimationRunnable = null;
-		}
+		animationHandler.removeCallbacks(chargingAnimationRunnable);
+
+		chargingIndicatorView.post(() -> {
+			chargingIndicatorView.setVisibility(GONE);
+			chargingIndicatorView.clearAnimation();
+
+			chargingIndicatorViewForCenter.setVisibility(GONE);
+			chargingIndicatorViewForCenter.clearAnimation();
+		});
+
+		chargingAnimationRunnable = null;
 	}
 
 	private void animateChargingIndicator() {
 		int screenWidth = Resources.getSystem().getDisplayMetrics().widthPixels;
 
 		chargingIndicatorView.post(() -> chargingIndicatorView.setVisibility(VISIBLE));
-		int secondaryVisiblity = (isCenterBased) ? GONE : VISIBLE;
-		chargingIndicatorViewForCenter.post(() -> chargingIndicatorViewForCenter.setVisibility(secondaryVisiblity));
+		int secondaryVisibility = (isCenterBased) ? GONE : VISIBLE;
+		chargingIndicatorViewForCenter.post(() -> chargingIndicatorViewForCenter.setVisibility(secondaryVisibility));
 
 		float startX, startXCenter, endX;
 
@@ -177,7 +185,8 @@
 			startXCenter = 0;
 			endX = Math.round(getWidth() * getCurrentLevel() / 100f);
 		}
-		if (isCenterBased) endX = getWidth() / 2f;
+
+		if (isCenterBased) endX = screenWidth * (1 - (100 - (getCurrentLevel()) / 200f));
 
 		TranslateAnimation animation = new TranslateAnimation(startX, endX, 0, 0);
 		animation.setDuration(ANIM_DURATION);
@@ -185,7 +194,7 @@
 		chargingIndicatorView.startAnimation(animation);
 
 		if (isCenterBased) {
-			TranslateAnimation animationCenter = new TranslateAnimation(startXCenter, endX, 0, 0);
+			TranslateAnimation animationCenter = new TranslateAnimation(startXCenter, screenWidth - endX, 0, 0);
 			animationCenter.setDuration(ANIM_DURATION);
 			animationCenter.setInterpolator(new LinearInterpolator());
 			chargingIndicatorViewForCenter.startAnimation(animationCenter);
