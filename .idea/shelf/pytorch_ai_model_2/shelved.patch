Index: pytorch/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pytorch/proguard-rules.pro b/pytorch/proguard-rules.pro
new file mode 100644
--- /dev/null	(date 1728796968264)
+++ b/pytorch/proguard-rules.pro	(date 1728796968264)
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"#GRADLE_LOCAL_JAVA_HOME\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/Submodules/RangeSliderPreference\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveExternalAnnotations\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 70ae4b148c9d68164902904968f1acfda8fe8d63)
+++ b/.idea/gradle.xml	(date 1728797054677)
@@ -11,6 +11,7 @@
             <option value="$PROJECT_DIR$" />
             <option value="$PROJECT_DIR$/Submodules/RangeSliderPreference" />
             <option value="$PROJECT_DIR$/app" />
+            <option value="$PROJECT_DIR$/pytorch" />
           </set>
         </option>
         <option name="resolveExternalAnnotations" value="false" />
Index: pytorch/src/androidTest/java/sh/siava/pytorch/ExampleInstrumentedTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pytorch/src/androidTest/java/sh/siava/pytorch/ExampleInstrumentedTest.java b/pytorch/src/androidTest/java/sh/siava/pytorch/ExampleInstrumentedTest.java
new file mode 100644
--- /dev/null	(date 1728796968567)
+++ b/pytorch/src/androidTest/java/sh/siava/pytorch/ExampleInstrumentedTest.java	(date 1728796968567)
@@ -0,0 +1,26 @@
+package sh.siava.pytorch;
+
+import android.content.Context;
+
+import androidx.test.platform.app.InstrumentationRegistry;
+import androidx.test.ext.junit.runners.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+	@Test
+	public void useAppContext() {
+		// Context of the app under test.
+		Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();
+		assertEquals("sh.siava.pytorch.test", appContext.getPackageName());
+	}
+}
\ No newline at end of file
Index: app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sh.siava.pixelxpert.modpacks.systemui;\r\n\r\nimport static android.view.View.GONE;\r\nimport static android.view.View.VISIBLE;\r\nimport static de.robv.android.xposed.XposedBridge.hookAllConstructors;\r\nimport static de.robv.android.xposed.XposedBridge.hookAllMethods;\r\nimport static de.robv.android.xposed.XposedHelpers.callMethod;\r\nimport static de.robv.android.xposed.XposedHelpers.findClass;\r\nimport static de.robv.android.xposed.XposedHelpers.findClassIfExists;\r\nimport static de.robv.android.xposed.XposedHelpers.getFloatField;\r\nimport static de.robv.android.xposed.XposedHelpers.getObjectField;\r\nimport static sh.siava.pixelxpert.modpacks.XPrefs.Xprefs;\r\nimport static sh.siava.pixelxpert.modpacks.utils.toolkit.ReflectionTools.reAddView;\r\nimport static sh.siava.pixelxpert.modpacks.utils.toolkit.ReflectionTools.tryHookAllConstructors;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.WallpaperManager;\r\nimport android.content.Context;\r\nimport android.content.res.Resources;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Color;\r\nimport android.graphics.Rect;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.graphics.drawable.LayerDrawable;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.FrameLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.util.Arrays;\r\n\r\nimport de.robv.android.xposed.XC_MethodHook;\r\nimport de.robv.android.xposed.callbacks.XC_LoadPackage;\r\nimport sh.siava.pixelxpert.modpacks.Constants;\r\nimport sh.siava.pixelxpert.modpacks.XPLauncher;\r\nimport sh.siava.pixelxpert.modpacks.XposedModPack;\r\nimport sh.siava.pixelxpert.modpacks.utils.toolkit.ReflectionTools;\r\n\r\n/** @noinspection RedundantThrows, SameParameterValue */\r\npublic class DepthWallpaper extends XposedModPack {\r\n\tprivate static final String listenPackage = Constants.SYSTEM_UI_PACKAGE;\r\n\tprivate static boolean lockScreenSubjectCacheValid = false;\r\n\tprivate Object mScrimController;\r\n\tprivate static boolean DWallpaperEnabled = false;\r\n\tprivate static int DWOpacity = 192;\r\n\r\n\tprivate static boolean DWonAOD = false;\r\n\tprivate FrameLayout mLockScreenSubject;\r\n\tprivate Drawable mSubjectDimmingOverlay;\r\n\tprivate FrameLayout mWallpaperBackground;\r\n\tprivate FrameLayout mWallpaperBitmapContainer;\r\n\tprivate FrameLayout mWallpaperDimmingOverlay;\r\n\tprivate boolean mLayersCreated = false;\r\n\tpublic DepthWallpaper(Context context) {\r\n\t\tsuper(context);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void updatePrefs(String... Key) {\r\n\t\tDWallpaperEnabled = Xprefs.getBoolean(\"DWallpaperEnabled\", false);\r\n\t\tDWOpacity = Xprefs.getSliderInt(\"DWOpacity\", 192);\r\n\t\tDWonAOD = Xprefs.getBoolean(\"DWonAOD\", false);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpParam) throws Throwable {\r\n\t\tClass<?> QSImplClass = findClassIfExists(\"com.android.systemui.qs.QSImpl\", lpParam.classLoader);\r\n\t\tif(QSImplClass == null) //Older versions of QS\r\n\t\t{\r\n\t\t\tQSImplClass = findClass(\"com.android.systemui.qs.QSFragment\", lpParam.classLoader);\r\n\t\t}\r\n\r\n\t\tClass<?> CanvasEngineClass = findClass(\"com.android.systemui.wallpapers.ImageWallpaper$CanvasEngine\", lpParam.classLoader);\r\n\t\tClass<?> CentralSurfacesImplClass = findClass(\"com.android.systemui.statusbar.phone.CentralSurfacesImpl\", lpParam.classLoader);\r\n\t\tClass<?> ScrimControllerClass = findClass(\"com.android.systemui.statusbar.phone.ScrimController\", lpParam.classLoader);\r\n\t\tClass<?> ScrimViewClass = findClass(\"com.android.systemui.scrim.ScrimView\", lpParam.classLoader);\r\n\r\n\r\n\t\tClass<?> AodBurnInLayerClass = findClassIfExists(\"com.android.systemui.keyguard.ui.view.layout.sections.AodBurnInLayer\", lpParam.classLoader);\r\n\t\ttryHookAllConstructors(AodBurnInLayerClass, new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable { //A15 compose keyguard\r\n\t\t\t\tView entryV = (View) param.thisObject;\r\n\r\n\t\t\t\tif(!DWallpaperEnabled) return;\r\n\r\n\t\t\t\tResources res = mContext.getResources();\r\n\r\n\t\t\t\tentryV.addOnAttachStateChangeListener(new View.OnAttachStateChangeListener() {\r\n\t\t\t\t\t@SuppressLint(\"DiscouragedApi\")\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void onViewAttachedToWindow(@NonNull View v) {\r\n\t\t\t\t\t\tReflectionTools.runDelayedOnMainThread(entryV, 1000, () -> {\r\n\t\t\t\t\t\t\tViewGroup rootView = (ViewGroup) entryV.getParent();\r\n\r\n\t\t\t\t\t\t\tif(!mLayersCreated) {\r\n\t\t\t\t\t\t\t\tcreateLayers();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treAddView(rootView, mLockScreenSubject, 0);\r\n\t\t\t\t\t\t\treAddView(rootView, rootView.findViewById(res.getIdentifier(\"lockscreen_clock_view_large\", \"id\", mContext.getPackageName())), 0);\r\n\t\t\t\t\t\t\treAddView(rootView, rootView.findViewById(res.getIdentifier(\"lockscreen_clock_view\", \"id\", mContext.getPackageName())),0);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void onViewDetachedFromWindow(@NonNull View v) {\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(ScrimViewClass, \"setViewAlpha\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void beforeHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(!mLayersCreated) return;\r\n\r\n\t\t\t\tif(DWonAOD\r\n\t\t\t\t\t\t&& !getObjectField(mScrimController, \"mState\").toString().equals(\"KEYGUARD\")) {\r\n\t\t\t\t\tmLockScreenSubject.post(() -> mLockScreenSubject.setAlpha(DWOpacity));\r\n\t\t\t\t}\r\n\t\t\t\telse if(getObjectField(mScrimController, \"mNotificationsScrim\").equals(param.thisObject)) //instead of using the mScrimName since older ones don't have that field\r\n\t\t\t\t{\r\n\t\t\t\t\tfloat mScrimBehindAlphaKeyguard = getFloatField(mScrimController, \"mScrimBehindAlphaKeyguard\");\r\n\r\n\t\t\t\t\tfloat notificationAlpha = (float)param.args[0];\r\n\r\n\t\t\t\t\tif(notificationAlpha < mScrimBehindAlphaKeyguard)\r\n\t\t\t\t\t\tnotificationAlpha = 0;\r\n\r\n\t\t\t\t\tfloat subjectAlpha = (notificationAlpha > mScrimBehindAlphaKeyguard)\r\n\t\t\t\t\t\t\t? (1f - notificationAlpha) / (1f - mScrimBehindAlphaKeyguard)\r\n\t\t\t\t\t\t\t: 1f;\r\n\r\n\t\t\t\t\tmLockScreenSubject.post(() -> mLockScreenSubject.setAlpha(subjectAlpha));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(CentralSurfacesImplClass, \"start\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(!DWallpaperEnabled) return;\r\n\r\n\t\t\t\tResources res = mContext.getResources();\r\n\r\n\t\t\t\tView scrimBehind = (View) getObjectField(mScrimController, \"mScrimBehind\");\r\n\t\t\t\tViewGroup rootView = (ViewGroup) scrimBehind.getParent();\r\n\r\n\t\t\t\t@SuppressLint(\"DiscouragedApi\")\r\n\t\t\t\tViewGroup targetView = rootView.findViewById(res.getIdentifier(\"notification_container_parent\", \"id\", mContext.getPackageName()));\r\n\r\n\t\t\t\tif(!mLayersCreated) {\r\n\t\t\t\t\tcreateLayers();\r\n\t\t\t\t}\r\n\r\n\t\t\t\treAddView(rootView, mWallpaperBackground, 0);\r\n\r\n\t\t\t\ttargetView.addView(mLockScreenSubject,1);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(CanvasEngineClass, \"onSurfaceDestroyed\", new XC_MethodHook() { //lockscreen wallpaper changed\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(DWallpaperEnabled && isLockScreenWallpaper(param.thisObject))\r\n\t\t\t\t{\r\n\t\t\t\t\tinvalidateLSWSC();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(CanvasEngineClass, \"onCreate\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(\r\n\t\t\t\t\t\tcallMethod(\r\n\t\t\t\t\t\t\t\tgetObjectField(param.thisObject, \"mWallpaperManager\"),\r\n\t\t\t\t\t\t\t\t\"getWallpaperInfo\", WallpaperManager.FLAG_LOCK)\r\n\t\t\t\t\t\t\t\t!= null) //it's live wallpaper. we can't use that\r\n\t\t\t\t{\r\n\t\t\t\t\tinvalidateLSWSC();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tfinal Thread[] wallpaperProcessorThread = {null};\r\n\t\thookAllMethods(CanvasEngineClass, \"drawFrameOnCanvas\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(wallpaperProcessorThread[0] != null)\r\n\t\t\t\t{\r\n\t\t\t\t\twallpaperProcessorThread[0].interrupt();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(DWallpaperEnabled && isLockScreenWallpaper(param.thisObject))\r\n\t\t\t\t{\r\n\t\t\t\t\twallpaperProcessorThread[0] =new Thread(() -> {\r\n\t\t\t\t\t\t\tBitmap wallpaperBitmap = Bitmap.createBitmap((Bitmap) param.args[0]);\r\n\r\n\t\t\t\t\t\t\tboolean cacheIsValid = assertCache(wallpaperBitmap);\r\n\r\n\t\t\t\t\t\t\tRect displayBounds =  ((Context) callMethod(param.thisObject, \"getDisplayContext\")).getSystemService(WindowManager.class)\r\n\t\t\t\t\t\t\t\t\t.getCurrentWindowMetrics()\r\n\t\t\t\t\t\t\t\t\t.getBounds();\r\n\r\n\t\t\t\t\t\t\tfloat ratioW = 1f * displayBounds.width() / wallpaperBitmap.getWidth();\r\n\t\t\t\t\t\t\tfloat ratioH = 1f * displayBounds.height() / wallpaperBitmap.getHeight();\r\n\r\n\t\t\t\t\t\t\tint desiredHeight = Math.round(Math.max(ratioH, ratioW) * wallpaperBitmap.getHeight());\r\n\t\t\t\t\t\t\tint desiredWidth = Math.round(Math.max(ratioH, ratioW) * wallpaperBitmap.getWidth());\r\n\r\n\t\t\t\t\t\t\tint xPixelShift = (desiredWidth - displayBounds.width()) / 2;\r\n\t\t\t\t\t\t\tint yPixelShift = (desiredHeight - displayBounds.height()) / 2;\r\n\r\n\t\t\t\t\t\t\tBitmap scaledWallpaperBitmap = Bitmap.createScaledBitmap(wallpaperBitmap, desiredWidth, desiredHeight, true);\r\n\r\n\t\t\t\t\t\t\t//crop to display bounds\r\n\t\t\t\t\t\t\tscaledWallpaperBitmap = Bitmap.createBitmap(scaledWallpaperBitmap, xPixelShift, yPixelShift, displayBounds.width(), displayBounds.height());\r\n\t\t\t\t\t\t\tBitmap finalScaledWallpaperBitmap = Bitmap.createBitmap(scaledWallpaperBitmap);\r\n\r\n\t\t\t\t\t\t\tif(!mLayersCreated) {\r\n\t\t\t\t\t\t\t\tcreateLayers();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmWallpaperBackground.post(() -> mWallpaperBitmapContainer.setBackground(new BitmapDrawable(mContext.getResources(), finalScaledWallpaperBitmap)));\r\n\r\n\t\t\t\t\t\tif(!cacheIsValid) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tString cachePath = Constants.getLockScreenSubjectCachePath(mContext);\r\n\t\t\t\t\t\t\t\tBitmap subjectBitmap = XPLauncher.getRootProviderProxy().extractSubject(finalScaledWallpaperBitmap);\r\n\r\n\t\t\t\t\t\t\t\tif(subjectBitmap != null) {\r\n\t\t\t\t\t\t\t\t\tFileOutputStream subjectOutputStream = new FileOutputStream(cachePath);\r\n\t\t\t\t\t\t\t\t\tsubjectBitmap.compress(Bitmap.CompressFormat.PNG, 100, subjectOutputStream);\r\n\t\t\t\t\t\t\t\t\tsubjectOutputStream.close();\r\n\r\n\t\t\t\t\t\t\t\t\tThread.sleep(500); //letting the filesystem settle down\r\n\r\n\t\t\t\t\t\t\t\t\tsetDepthWallpaper();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} catch (Throwable ignored) {}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\twallpaperProcessorThread[0] = null;\r\n\t\t\t\t\t});\r\n\t\t\t\t\twallpaperProcessorThread[0].start();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllConstructors(ScrimControllerClass, new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tmScrimController = param.thisObject;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(ScrimControllerClass, \"applyAndDispatchState\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tsetDepthWallpaper();\r\n\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(QSImplClass, \"setQsExpansion\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void beforeHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif((boolean) callMethod(param.thisObject, \"isKeyguardState\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tsetDepthWallpaper();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate boolean assertCache(Bitmap wallpaperBitmap) {\r\n\r\n\t\tboolean cacheIsValid = false;\r\n\t\ttry\r\n\t\t{\r\n\t\t\tFile wallpaperCacheFile = new File(Constants.getLockScreenBitmapCachePath(mContext));\r\n\r\n\t\t\tByteArrayOutputStream compressedBitmap = new ByteArrayOutputStream();\r\n\t\t\twallpaperBitmap.compress(Bitmap.CompressFormat.JPEG, 100, compressedBitmap);\r\n\t\t\tif(wallpaperCacheFile.exists())\r\n\t\t\t{\r\n\t\t\t\tFileInputStream cacheStream = new FileInputStream(wallpaperCacheFile);\r\n\r\n\t\t\t\tif(Arrays.equals(cacheStream.readAllBytes(), compressedBitmap.toByteArray()))\r\n\t\t\t\t{\r\n\t\t\t\t\tcacheIsValid = true;\r\n\t\t\t\t}\r\n\t\t\t\tcacheStream.close();\r\n\t\t\t}\r\n\r\n\t\t\tif(!cacheIsValid)\r\n\t\t\t{\r\n\t\t\t\tFileOutputStream newCacheStream = new FileOutputStream(wallpaperCacheFile);\r\n\t\t\t\tcompressedBitmap.writeTo(newCacheStream);\r\n\t\t\t\tnewCacheStream.close();\r\n\t\t\t}\r\n\t\t\tcompressedBitmap.close();\r\n\t\t}\r\n\t\tcatch (Throwable ignored)\r\n\t\t{}\r\n\r\n\t\tif(!cacheIsValid)\r\n\t\t{\r\n\t\t\tinvalidateLSWSC();\r\n\t\t}\r\n\r\n\t\treturn cacheIsValid;\r\n\t}\r\n\r\n\tprivate void createLayers() {\r\n\t\tmWallpaperBackground = new FrameLayout(mContext);\r\n\t\tmWallpaperDimmingOverlay = new FrameLayout(mContext);\r\n\t\tmWallpaperBitmapContainer = new FrameLayout(mContext);\r\n\t\tFrameLayout.LayoutParams lpw = new FrameLayout.LayoutParams(-1, -1);\r\n\r\n\t\tmWallpaperDimmingOverlay.setBackgroundColor(Color.BLACK);\r\n\t\tmWallpaperDimmingOverlay.setLayoutParams(lpw);\r\n\t\tmWallpaperBitmapContainer.setLayoutParams(lpw);\r\n\r\n\t\tmWallpaperBackground.addView(mWallpaperBitmapContainer);\r\n\t\tmWallpaperBackground.addView(mWallpaperDimmingOverlay);\r\n\t\tmWallpaperBackground.setLayoutParams(lpw);\r\n\r\n\t\tmLockScreenSubject = new FrameLayout(mContext);\r\n\t\tFrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(-1, -1);\r\n\t\tmLockScreenSubject.setLayoutParams(lp);\r\n\r\n\t\tmLockScreenSubject.setId(View.generateViewId()); //a fake ID so that it can be added to constrained layout\r\n\r\n\t\tmLayersCreated = true;\r\n\t}\r\n\r\n\tprivate boolean isLockScreenWallpaper(Object canvasEngine)\r\n\t{\r\n\t\treturn (getWallpaperFlag(canvasEngine)\r\n\t\t\t\t& WallpaperManager.FLAG_LOCK)\r\n\t\t\t\t== WallpaperManager.FLAG_LOCK;\r\n\t}\r\n\tprivate void setDepthWallpaper()\r\n\t{\r\n\t\tString state = getObjectField(mScrimController, \"mState\").toString();\r\n\t\tboolean showSubject = DWallpaperEnabled\r\n\t\t\t\t&&\r\n\t\t\t\t(\r\n\t\t\t\t\t\tstate.equals(\"KEYGUARD\")\r\n\t\t\t\t\t\t||\r\n\t\t\t\t\t\t\t\t(DWonAOD\r\n\t\t\t\t\t\t\t\t\t\t&&\r\n\t\t\t\t\t\t\t\t\t\t(state.equals(\"AOD\") || state.equals(\"PULSING\"))\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\tif(showSubject) {\r\n\t\t\tif(!lockScreenSubjectCacheValid && isSubjectCacheAvailable())\r\n\t\t\t{\r\n\t\t\t\ttry (FileInputStream inputStream = new FileInputStream(Constants.getLockScreenSubjectCachePath(mContext)))\r\n\t\t\t\t{\r\n\t\t\t\t\tDrawable bitmapDrawable = BitmapDrawable.createFromStream(inputStream, \"\");\r\n\t\t\t\t\tbitmapDrawable.setAlpha(255);\r\n\r\n\t\t\t\t\tmSubjectDimmingOverlay = bitmapDrawable.getConstantState().newDrawable().mutate();\r\n\t\t\t\t\tmSubjectDimmingOverlay.setTint(Color.BLACK);\r\n\r\n\t\t\t\t\tmLockScreenSubject.setBackground(new LayerDrawable(new Drawable[]{bitmapDrawable, mSubjectDimmingOverlay}));\r\n\t\t\t\t\tlockScreenSubjectCacheValid = true;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (Throwable ignored) {}\r\n\t\t\t}\r\n\r\n\t\t\tif(lockScreenSubjectCacheValid) {\r\n\t\t\t\tmLockScreenSubject.getBackground().setAlpha(DWOpacity);\r\n\r\n\t\t\t\tif(!state.equals(\"KEYGUARD\")) { //AOD\r\n\t\t\t\t\tmSubjectDimmingOverlay.setAlpha(192 /*Math.round(192 * (DWOpacity / 255f))*/);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//this is the dimmed wallpaper coverage\r\n\t\t\t\t\tmSubjectDimmingOverlay.setAlpha(Math.round(getFloatField(mScrimController, \"mScrimBehindAlphaKeyguard\") * 240)); //A tad bit lower than max. show it a bit lighter than other stuff\r\n\t\t\t\t\tmWallpaperDimmingOverlay.setAlpha(getFloatField(mScrimController, \"mScrimBehindAlphaKeyguard\"));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmWallpaperBackground.setVisibility(VISIBLE);\r\n\t\t\t\tmLockScreenSubject.setVisibility(VISIBLE);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(mLayersCreated)\r\n\t\t{\r\n\t\t\tmLockScreenSubject.setVisibility(GONE);\r\n\r\n\t\t\tif (state.equals(\"UNLOCKED\")) {\r\n\t\t\t\tmWallpaperBackground.setVisibility(GONE);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate boolean isSubjectCacheAvailable() {\r\n\t\ttry {\r\n\t\t\treturn new File(Constants.getLockScreenSubjectCachePath(mContext)).length() > 0;\r\n\t\t} catch (Exception e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate int getWallpaperFlag(Object canvasEngine) {\r\n\t\treturn (int) callMethod(canvasEngine, \"getWallpaperFlags\");\r\n\t}\r\n\r\n\tprivate void invalidateLSWSC() //invalidate lock screen wallpaper subject cache\r\n\t{\r\n\t\tlockScreenSubjectCacheValid = false;\r\n\t\tif(mLayersCreated) {\r\n\t\t\tmLockScreenSubject.post(() -> {\r\n\t\t\t\tmLockScreenSubject.setVisibility(GONE);\r\n\t\t\t\tmLockScreenSubject.setBackground(null);\r\n\t\t\t\tmWallpaperBackground.setVisibility(GONE);\r\n\t\t\t\tmWallpaperBitmapContainer.setBackground(null);\r\n\t\t\t});\r\n\t\t}\r\n\t\ttry {\r\n\t\t\t//noinspection ResultOfMethodCallIgnored\r\n\t\t\tnew File(Constants.getLockScreenSubjectCachePath(mContext)).delete();\r\n\t\t}\r\n\t\tcatch (Throwable ignored){}\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean listensTo(String packageName) {\r\n\t\treturn listenPackage.equals(packageName) && !XPLauncher.isChildProcess;\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java b/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java
--- a/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java	(revision 70ae4b148c9d68164902904968f1acfda8fe8d63)
+++ b/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java	(date 1728802329075)
@@ -4,6 +4,7 @@
 import static android.view.View.VISIBLE;
 import static de.robv.android.xposed.XposedBridge.hookAllConstructors;
 import static de.robv.android.xposed.XposedBridge.hookAllMethods;
+import static de.robv.android.xposed.XposedBridge.log;
 import static de.robv.android.xposed.XposedHelpers.callMethod;
 import static de.robv.android.xposed.XposedHelpers.findClass;
 import static de.robv.android.xposed.XposedHelpers.findClassIfExists;
@@ -29,6 +30,7 @@
 import android.widget.FrameLayout;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -38,10 +40,15 @@
 
 import de.robv.android.xposed.XC_MethodHook;
 import de.robv.android.xposed.callbacks.XC_LoadPackage;
+import kotlin.Unit;
+import kotlin.coroutines.Continuation;
+import kotlin.coroutines.CoroutineContext;
+import kotlinx.coroutines.flow.FlowCollector;
 import sh.siava.pixelxpert.modpacks.Constants;
 import sh.siava.pixelxpert.modpacks.XPLauncher;
 import sh.siava.pixelxpert.modpacks.XposedModPack;
 import sh.siava.pixelxpert.modpacks.utils.toolkit.ReflectionTools;
+import sh.siava.pytorch.BackgroundRemover;
 
 /** @noinspection RedundantThrows, SameParameterValue */
 public class DepthWallpaper extends XposedModPack {
@@ -235,7 +242,14 @@
 						if(!cacheIsValid) {
 							try {
 								String cachePath = Constants.getLockScreenSubjectCachePath(mContext);
-								Bitmap subjectBitmap = XPLauncher.getRootProviderProxy().extractSubject(finalScaledWallpaperBitmap);
+
+//								Bitmap subjectBitmap = null;
+								Bitmap subjectBitmap = new BackgroundRemover().removeBackground(finalScaledWallpaperBitmap);
+								FileOutputStream fo = new FileOutputStream("/sdcard/subject.png");
+								subjectBitmap.compress(Bitmap.CompressFormat.PNG, 100, fo);
+								fo.close();
+								log("subject out");
+//								Bitmap subjectBitmap = XPLauncher.getRootProviderProxy().extractSubject(finalScaledWallpaperBitmap);
 
 								if(subjectBitmap != null) {
 									FileOutputStream subjectOutputStream = new FileOutputStream(cachePath);
@@ -246,7 +260,9 @@
 
 									setDepthWallpaper();
 								}
-							} catch (Throwable ignored) {}
+							} catch (Throwable ignored) {
+								log(ignored);
+							}
 						}
 
 						wallpaperProcessorThread[0] = null;
Index: gradle/libs.versions.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[versions]\r\nactivity = \"1.9.2\"\r\nannotation = \"1.8.2\"\r\nappcompat = \"1.7.0\"\r\ncardview = \"1.0.0\"\r\ncollapsingtoolbarlayoutSubtitle = \"1.5.0\"\r\ncolorpicker = \"1.1.0\"\r\ncommonsText = \"1.11.0\"\r\nconcurrentFutures = \"1.2.0\"\r\nconstraintlayout = \"2.1.4\"\r\ncoreSplashscreen = \"1.0.1\"\r\ngradle = \"8.5.2\"\r\nmarkdown = \"0.19.0\"\r\nlibsuVersion = \"5.2.2\"\r\nandroid-material = \"1.12.0\"\r\nnavigationUiKtxVersion = \"2.8.1\"\r\nnavigationFragmentKtxVersion = \"2.8.1\"\r\nobjenesis = \"3.3\"\r\nntpClient = \"0.0.1-alpha11\"\r\npersianDateTime = \"4.2.1\"\r\nplayServicesBase = \"18.5.0\"\r\nplayServicesMlkitSubjectSegmentation = \"16.0.0-beta1\"\r\nrecyclerview = \"1.3.2\"\r\npreferenceKtx = \"1.2.1\"\r\nremotepreferences = \"0.8\"\r\nswiperefreshlayout = \"1.2.0-alpha01\"\r\nuiGeometry = \"1.7.2\"\r\nworkRuntime = \"2.9.1\"\r\nkotlin = \"1.8.0\"\r\n\r\n[libraries]\r\nandroidx-activity = { module = \"androidx.activity:activity\", version.ref = \"activity\" }\r\nandroidx-annotation = { module = \"androidx.annotation:annotation\", version.ref = \"annotation\" }\r\nandroidx-appcompat = { module = \"androidx.appcompat:appcompat\", version.ref = \"appcompat\" }\r\nandroidx-cardview = { module = \"androidx.cardview:cardview\", version.ref = \"cardview\" }\r\nandroidx-constraintlayout = { module = \"androidx.constraintlayout:constraintlayout\", version.ref = \"constraintlayout\" }\r\nandroidx-core-splashscreen = { module = \"androidx.core:core-splashscreen\", version.ref = \"coreSplashscreen\" }\r\nandroidx-preference-ktx = { module = \"androidx.preference:preference-ktx\", version.ref = \"preferenceKtx\" }\r\nandroidx-recyclerview = { module = \"androidx.recyclerview:recyclerview\", version.ref = \"recyclerview\" }\r\nandroidx-ui-geometry = { module = \"androidx.compose.ui:ui-geometry\", version.ref = \"uiGeometry\" }\r\nandroidx-work-runtime = { module = \"androidx.work:work-runtime\", version.ref = \"workRuntime\" }\r\nandroidx-concurrent-futures = { module = \"androidx.concurrent:concurrent-futures\", version.ref = \"concurrentFutures\" }\r\ncollapsingtoolbarlayout-subtitle = { module = \"com.hendraanggrian.material:collapsingtoolbarlayout-subtitle\", version.ref = \"collapsingtoolbarlayoutSubtitle\" }\r\ncolorpicker = { module = \"com.jaredrummler:colorpicker\", version.ref = \"colorpicker\" }\r\napache-commons-text = { module = \"org.apache.commons:commons-text\", version.ref = \"commonsText\" }\r\ngradle = { module = \"com.android.tools.build:gradle\", version.ref = \"gradle\" }\r\nkotlin = { module = \"org.jetbrains.kotlin:kotlin-gradle-plugin\", version.ref = \"kotlin\"}\r\nmarkdown = { module = \"com.github.tiagohm.MarkdownView:library\", version.ref = \"markdown\" }\r\nandroid-material = { module = \"com.google.android.material:material\", version.ref = \"android-material\" }\r\nnavigation-fragment-ktx = { module = \"androidx.navigation:navigation-fragment-ktx\", version.ref = \"navigationFragmentKtxVersion\" }\r\nnavigation-ui-ktx = { module = \"androidx.navigation:navigation-ui-ktx\", version.ref = \"navigationUiKtxVersion\" }\r\nlibsuCore = { module = \"com.github.topjohnwu.libsu:core\", version.ref = \"libsuVersion\" }\r\nlibsuNIO = { module = \"com.github.topjohnwu.libsu:nio\", version.ref = \"libsuVersion\" }\r\nlibsuService = { module = \"com.github.topjohnwu.libsu:service\", version.ref = \"libsuVersion\" }\r\nobjenesis = { group = \"org.objenesis\", name = \"objenesis\", version.ref = \"objenesis\" }\r\nntpClient = { group = \"com.lyft.kronos\", name = \"kronos-android\", version.ref = \"ntpClient\" }\r\npersian-date-time = { module = \"com.github.mfathi91:persian-date-time\", version.ref = \"persianDateTime\" }\r\nplay-services-base = { module = \"com.google.android.gms:play-services-base\", version.ref = \"playServicesBase\" }\r\nplay-services-mlkit-subject-segmentation = { module = \"com.google.android.gms:play-services-mlkit-subject-segmentation\", version.ref = \"playServicesMlkitSubjectSegmentation\" }\r\nandroidx-swiperefreshlayout = { module = \"androidx.swiperefreshlayout:swiperefreshlayout\", version.ref = \"swiperefreshlayout\" }\r\nremotepreferences = { module = \"com.crossbowffs.remotepreferences:remotepreferences\", version.ref = \"remotepreferences\" }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
--- a/gradle/libs.versions.toml	(revision 70ae4b148c9d68164902904968f1acfda8fe8d63)
+++ b/gradle/libs.versions.toml	(date 1728801290522)
@@ -23,10 +23,15 @@
 recyclerview = "1.3.2"
 preferenceKtx = "1.2.1"
 remotepreferences = "0.8"
+removebg = "1.0.4"
 swiperefreshlayout = "1.2.0-alpha01"
 uiGeometry = "1.7.2"
 workRuntime = "2.9.1"
 kotlin = "1.8.0"
+junit = "4.13.2"
+junitVersion = "1.2.1"
+espressoCore = "3.6.1"
+pytorch_android_torchvision_lite = "1.13.1"
 
 [libraries]
 androidx-activity = { module = "androidx.activity:activity", version.ref = "activity" }
@@ -58,4 +63,9 @@
 play-services-base = { module = "com.google.android.gms:play-services-base", version.ref = "playServicesBase" }
 play-services-mlkit-subject-segmentation = { module = "com.google.android.gms:play-services-mlkit-subject-segmentation", version.ref = "playServicesMlkitSubjectSegmentation" }
 androidx-swiperefreshlayout = { module = "androidx.swiperefreshlayout:swiperefreshlayout", version.ref = "swiperefreshlayout" }
-remotepreferences = { module = "com.crossbowffs.remotepreferences:remotepreferences", version.ref = "remotepreferences" }
\ No newline at end of file
+remotepreferences = { module = "com.crossbowffs.remotepreferences:remotepreferences", version.ref = "remotepreferences" }
+junit = { group = "junit", name = "junit", version.ref = "junit" }
+androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
+androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
+pytorch_android_lite = { module = "org.pytorch:pytorch_android_lite", version.ref = "pytorch_android_torchvision_lite" }
+pytorch_android_torchvision_lite = { module = "org.pytorch:pytorch_android_torchvision_lite", version.ref = "pytorch_android_torchvision_lite" }
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//file:noinspection SpellCheckingInspection\r\nplugins {\r\n\tid 'com.android.application'\r\n}\r\napply plugin: 'kotlin-android'\r\n\r\nandroid {\r\n\tcompileSdk 34\r\n\r\n\tdefaultConfig {\r\n\t\tapplicationId \"sh.siava.pixelxpert\"\r\n\t\tminSdk 33\r\n\t\ttargetSdk 34\r\n\t\tversionCode 394\r\n\t\tversionName \"canary-394\"\r\n\r\n\t\ttestInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n\t}\r\n\r\n\tfinal def keystorePropertiesFile = rootProject.file(\"ReleaseKey.properties\")\r\n\r\n\tdef releaseSignature = signingConfigs.debug\r\n\ttry (def keystorePropertiesStream = new FileInputStream(keystorePropertiesFile)) {\r\n\t\tfinal def keystoreProperties = new Properties()\r\n\t\tkeystoreProperties.load(keystorePropertiesStream)\r\n\t\treleaseSignature = signingConfigs.create(\"releaseSignature\")\r\n\t\t\t\t{\r\n\t\t\t\t\tkeyAlias keystoreProperties['keyAlias']\r\n\t\t\t\t\tkeyPassword keystoreProperties['keyPassword']\r\n\t\t\t\t\tstoreFile rootProject.file(keystoreProperties['storeFile'])\r\n\t\t\t\t\tstorePassword keystoreProperties['storePassword']\r\n\t\t\t\t}\r\n\t}\r\n\tcatch (ignored) {\r\n\t}\r\n\r\n\tbuildTypes {\r\n\t\trelease {\r\n\t\t\tminifyEnabled true\r\n\t\t\tshrinkResources true\r\n\t\t\tcrunchPngs true\r\n\t\t\tproguardFiles(\"proguard-android-optimize.txt\", \"proguard.pro\", \"proguard-rules.pro\")\r\n\t\t\tsigningConfig releaseSignature\r\n\t\t}\r\n\t\tdebug {\r\n\t\t\tminifyEnabled false\r\n\t\t\tproguardFiles(\"proguard-android-optimize.txt\", \"proguard.pro\", \"proguard-rules.pro\")\r\n\t\t\tsigningConfig releaseSignature\r\n\t\t}\r\n\t}\r\n\r\n\tapplicationVariants.configureEach { variant ->\r\n\t\tvariant.outputs.configureEach { output ->\r\n\t\t\toutputFileName = new File(\"PixelXpert.apk\")\r\n\t\t}\r\n\t}\r\n\r\n\tcompileOptions {\r\n\t\tsourceCompatibility JavaVersion.VERSION_1_9\r\n\t\ttargetCompatibility JavaVersion.VERSION_1_9\r\n\t}\r\n\tlint {\r\n\t\tcheckReleaseBuilds false\r\n\t\tabortOnError false\r\n\t}\r\n\tnamespace 'sh.siava.pixelxpert'\r\n\tbuildFeatures {\r\n\t\tviewBinding true\r\n\t\taidl true\r\n\t}\r\n\tkotlinOptions {\r\n\t\tjvmTarget = '9'\r\n\t}\r\n}\r\n\r\ndependencies {\r\n\t// Xposed api\r\n\tcompileOnly files('lib/api-82.jar')\r\n\tcompileOnly files('lib/api-82-sources.jar')\r\n\r\n\timplementation project(path: ':RangeSliderPreference')\r\n\r\n\timplementation libs.androidx.constraintlayout\r\n\timplementation libs.navigation.fragment.ktx\r\n\timplementation libs.navigation.ui.ktx\r\n\timplementation libs.navigation.fragment.ktx\r\n\timplementation libs.navigation.ui.ktx\r\n\timplementation libs.androidx.appcompat\r\n\timplementation libs.androidx.annotation\r\n\timplementation libs.androidx.preference.ktx\r\n\timplementation libs.androidx.recyclerview\r\n\timplementation libs.android.material\r\n\timplementation libs.androidx.ui.geometry\r\n\t//noinspection KtxExtensionAvailable\r\n\timplementation libs.androidx.activity\r\n\timplementation libs.androidx.work.runtime\r\n\timplementation libs.androidx.concurrent.futures\r\n\r\n\t// The core module that provides APIs to a shell\r\n\timplementation libs.libsuCore\r\n\t// Optional: APIs for creating root services. Depends on \":core\"\r\n\timplementation libs.libsuService\r\n\t// Optional: Provides remote file system support\r\n\timplementation libs.libsuNIO\r\n\r\n\timplementation libs.remotepreferences\r\n\t// Remote Preferences for Xposed Module prefs\r\n\timplementation libs.colorpicker //Color Picker Component for UI\r\n\timplementation libs.persian.date.time //Persian Calendar\r\n\r\n\timplementation libs.markdown //Markdown reader\r\n\r\n\t// Search Preference\r\n\timplementation libs.androidx.cardview\r\n\timplementation libs.apache.commons.text\r\n\r\n\timplementation libs.androidx.swiperefreshlayout\r\n\r\n\t// Class initializer\r\n\t// https://mvnrepository.com/artifact/org.objenesis/objenesis\r\n\timplementation libs.objenesis\r\n\r\n\timplementation libs.ntpClient //NTP Client\r\n\r\n\t//Google Subject Segmentation - MLKit\r\n\timplementation libs.play.services.mlkit.subject.segmentation\r\n\timplementation libs.play.services.base\r\n  \r\n  // Collapsing Toolbar with subtitle\r\n\timplementation libs.collapsingtoolbarlayout.subtitle\r\n\r\n\t// Splash screen\r\n\timplementation libs.androidx.core.splashscreen\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 70ae4b148c9d68164902904968f1acfda8fe8d63)
+++ b/app/build.gradle	(date 1728805992807)
@@ -15,6 +15,15 @@
 		versionName "canary-394"
 
 		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
+
+		packagingOptions {
+			exclude "**/*.so"  // Exclude all .so files
+		}
+
+		ndk {
+			//noinspection ChromeOsAbiSupport
+			abiFilters "arm64-v8a"
+		}
 	}
 
 	final def keystorePropertiesFile = rootProject.file("ReleaseKey.properties")
@@ -74,6 +83,7 @@
 }
 
 dependencies {
+	implementation project(':pytorch')
 	// Xposed api
 	compileOnly files('lib/api-82.jar')
 	compileOnly files('lib/api-82-sources.jar')
@@ -131,4 +141,5 @@
 
 	// Splash screen
 	implementation libs.androidx.core.splashscreen
+
 }
\ No newline at end of file
Index: pytorch/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pytorch/src/main/AndroidManifest.xml b/pytorch/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1728796968487)
+++ b/pytorch/src/main/AndroidManifest.xml	(date 1728796968487)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android">
+
+</manifest>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision 70ae4b148c9d68164902904968f1acfda8fe8d63)
+++ b/.idea/vcs.xml	(date 1728796287559)
@@ -2,5 +2,6 @@
 <project version="4">
   <component name="VcsDirectoryMappings">
     <mapping directory="" vcs="Git" />
+    <mapping directory="$PROJECT_DIR$/Submodules/RangeSliderPreference" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: pytorch/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pytorch/.gitignore b/pytorch/.gitignore
new file mode 100644
--- /dev/null	(date 1728796968079)
+++ b/pytorch/.gitignore	(date 1728796968079)
@@ -0,0 +1,1 @@
+/build
\ No newline at end of file
Index: pytorch/src/main/java/sh/siava/pytorch/BackgroundRemover.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pytorch/src/main/java/sh/siava/pytorch/BackgroundRemover.java b/pytorch/src/main/java/sh/siava/pytorch/BackgroundRemover.java
new file mode 100644
--- /dev/null	(date 1728802286727)
+++ b/pytorch/src/main/java/sh/siava/pytorch/BackgroundRemover.java	(date 1728802286727)
@@ -0,0 +1,81 @@
+package sh.siava.pytorch;
+
+import static org.pytorch.torchvision.TensorImageUtils.TORCHVISION_NORM_MEAN_RGB;
+import static org.pytorch.torchvision.TensorImageUtils.TORCHVISION_NORM_STD_RGB;
+
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.PorterDuff;
+import android.graphics.PorterDuffXfermode;
+import android.util.Log;
+
+import org.pytorch.Device;
+import org.pytorch.IValue;
+import org.pytorch.LiteModuleLoader;
+import org.pytorch.Module;
+import org.pytorch.Tensor;
+import org.pytorch.torchvision.TensorImageUtils;
+
+import java.io.File;
+
+public class BackgroundRemover {
+
+	private static final int MODEL_SIZE = 32;
+	private static final String TAG = "RemoveBG";
+	private Paint maskPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+	public BackgroundRemover() {
+
+	}
+
+	public Bitmap removeBackground(Bitmap input)
+	{
+		Bitmap mi = input.copy(Bitmap.Config.ARGB_8888, true);
+		maskPaint.setAntiAlias(true);
+		maskPaint.setStyle(Paint.Style.FILL);
+
+		maskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
+
+		int width = mi.getWidth();
+		int height = mi.getHeight();
+		Bitmap scaledBitmap = Bitmap.createScaledBitmap(mi, MODEL_SIZE, MODEL_SIZE, true);
+
+		Log.d(TAG, "removeBackground: exist" + new File("/sdcard/u2net.ptl").exists());
+		Module module = LiteModuleLoader.load("/sdcard/u2net.ptl");
+
+		Log.d(TAG, "removeBackground: loaded module");
+		Tensor inputTensor = TensorImageUtils.bitmapToFloat32Tensor(scaledBitmap, TORCHVISION_NORM_MEAN_RGB, TORCHVISION_NORM_STD_RGB);
+		IValue[] outputTensor = module.forward(IValue.from(inputTensor)).toTuple();
+		float[] arr = outputTensor[0].toTensor().getDataAsFloatArray();
+		Bitmap scaledMask =convertArrayToBitmap(arr, MODEL_SIZE, MODEL_SIZE);
+		if (scaledMask != null) {
+			scaledMask = Bitmap.createScaledBitmap(scaledMask, width, height, true);
+			Log.d(TAG, "removeBackground: scaled mask");
+			return getMaskedImage(mi, scaledMask);
+		}
+		return null;
+	}
+
+	public Bitmap getMaskedImage(Bitmap input, Bitmap mask) {
+		Bitmap result = Bitmap.createBitmap(mask.getWidth(), mask.getHeight(), Bitmap.Config.ARGB_8888);
+		Canvas mCanvas = new Canvas(result);
+
+		mCanvas.drawBitmap(input, 0f, 0f, null);
+		mCanvas.drawBitmap(mask, 0f, 0f, maskPaint);
+
+		return result;
+	}
+
+	public static Bitmap convertArrayToBitmap(float[] arr, int width, int height) {
+		Bitmap grayToneImage = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
+
+		for (int i = 0; i < width; i++) {
+			for (int j = 0; j < height; j++) {
+				int pixelValue = (int) (arr[i * height + j] * 255f) << 24;
+				grayToneImage.setPixel(j, i, pixelValue);
+			}
+		}
+
+		return grayToneImage;
+	}
+}
Index: pytorch/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pytorch/build.gradle b/pytorch/build.gradle
new file mode 100644
--- /dev/null	(date 1728797322802)
+++ b/pytorch/build.gradle	(date 1728797322802)
@@ -0,0 +1,37 @@
+plugins {
+	id 'com.android.library'
+}
+
+android {
+	namespace 'sh.siava.pytorch'
+	compileSdk 34
+
+	defaultConfig {
+		minSdk 33
+
+		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
+		consumerProguardFiles "consumer-rules.pro"
+	}
+
+	buildTypes {
+		release {
+			minifyEnabled false
+			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
+		}
+	}
+	compileOptions {
+		sourceCompatibility JavaVersion.VERSION_1_8
+		targetCompatibility JavaVersion.VERSION_1_8
+	}
+}
+
+dependencies {
+
+	implementation libs.pytorch.android.lite
+	implementation libs.pytorch.android.torchvision.lite
+	implementation libs.androidx.appcompat
+	implementation libs.android.material
+	testImplementation libs.junit
+	androidTestImplementation libs.androidx.junit
+	androidTestImplementation libs.androidx.espresso.core
+}
\ No newline at end of file
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>rootProject.name = \"PixelXpert\"\r\ninclude ':app'\r\ninclude ':RangeSliderPreference'\r\n\r\nproject(':RangeSliderPreference').projectDir = new File(rootDir, 'Submodules/RangeSliderPreference/')\r\n\r\ndependencyResolutionManagement {\r\n\trepositories {\r\n\t\tgoogle()\r\n\t\tmavenCentral()\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle b/settings.gradle
--- a/settings.gradle	(revision 70ae4b148c9d68164902904968f1acfda8fe8d63)
+++ b/settings.gradle	(date 1728796968294)
@@ -9,4 +9,5 @@
 		google()
 		mavenCentral()
 	}
-}
\ No newline at end of file
+}
+include ':pytorch'
Index: pytorch/src/test/java/sh/siava/pytorch/ExampleUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pytorch/src/test/java/sh/siava/pytorch/ExampleUnitTest.java b/pytorch/src/test/java/sh/siava/pytorch/ExampleUnitTest.java
new file mode 100644
--- /dev/null	(date 1728796968535)
+++ b/pytorch/src/test/java/sh/siava/pytorch/ExampleUnitTest.java	(date 1728796968535)
@@ -0,0 +1,17 @@
+package sh.siava.pytorch;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+	@Test
+	public void addition_isCorrect() {
+		assertEquals(4, 2 + 2);
+	}
+}
\ No newline at end of file
diff --git a/pytorch/consumer-rules.pro b/pytorch/consumer-rules.pro
new file mode 100644
