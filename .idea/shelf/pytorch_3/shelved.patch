Index: app/src/main/java/sh/siava/pixelxpert/service/RootProviderProxy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sh.siava.pixelxpert.service;\r\n\r\nimport android.app.Service;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.os.Binder;\r\nimport android.os.IBinder;\r\nimport android.os.RemoteException;\r\n\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.topjohnwu.superuser.Shell;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.concurrent.CountDownLatch;\r\n\r\nimport sh.siava.pixelxpert.IRootProviderProxy;\r\nimport sh.siava.pixelxpert.PixelXpert;\r\nimport sh.siava.pixelxpert.R;\r\nimport sh.siava.pixelxpert.modpacks.Constants;\r\nimport sh.siava.pixelxpert.utils.BitmapSubjectSegmenter;\r\n\r\npublic class RootProviderProxy extends Service {\r\n\t@Nullable\r\n\t@Override\r\n\tpublic IBinder onBind(Intent intent) {\r\n\t\treturn new RootProviderProxyIPC(this);\r\n\t}\r\n\r\n\tclass RootProviderProxyIPC extends IRootProviderProxy.Stub\r\n\t{\r\n\t\t/** @noinspection unused*/\r\n\t\tString TAG = getClass().getSimpleName();\r\n\r\n\t\tprivate final List<String> rootAllowedPacks;\r\n\t\tprivate final boolean rootGranted;\r\n\r\n\t\tprivate RootProviderProxyIPC(Context context)\r\n\t\t{\r\n\t\t\ttry {\r\n\t\t\t\tShell.setDefaultBuilder(Shell.Builder.create().setFlags(Shell.FLAG_MOUNT_MASTER));\r\n\t\t\t}\r\n\t\t\tcatch (Throwable ignored){}\r\n\t\t\trootGranted = Shell.getShell().isRoot();\r\n\r\n\t\t\tif(!rootGranted)\r\n\t\t\t{\r\n\t\t\t\tcontext.sendBroadcast(new Intent(Constants.ACTION_KSU_ACQUIRE_ROOT));\r\n\t\t\t}\r\n\r\n\t\t\trootAllowedPacks = Arrays.asList(context.getResources().getStringArray(R.array.root_requirement));\r\n\t\t}\r\n\r\n\t\t/** @noinspection RedundantThrows*/\r\n\t\t@Override\r\n\t\tpublic String[] runCommand(String command) throws RemoteException {\r\n\t\t\ttry {\r\n\t\t\t\tensureEnvironment();\r\n\r\n\t\t\t\tList<String> result = Shell.cmd(command).exec().getOut();\r\n\t\t\t\treturn result.toArray(new String[0]);\r\n\t\t\t}\r\n\t\t\tcatch (Throwable t)\r\n\t\t\t{\r\n\t\t\t\treturn new String[0];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic Bitmap extractSubject(Bitmap input) throws RemoteException {\r\n\t\t\tensureEnvironment();\r\n\r\n\t\t\tif(!PixelXpert.get().isCoreRootServiceBound())\r\n\t\t\t{\r\n\t\t\t\tPixelXpert.get().tryConnectRootService();\r\n\t\t\t}\r\n\r\n\t\t\tfinal Bitmap[] resultBitmap = new Bitmap[]{null};\r\n\t\t\tCountDownLatch resultWaiter = new CountDownLatch(1);\r\n\t\t\ttry {\r\n\t\t\t\t\tnew BitmapSubjectSegmenter(getApplicationContext()).segmentSubject(input, new BitmapSubjectSegmenter.SegmentResultListener() {\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic void onSuccess(Bitmap result) {\r\n\t\t\t\t\t\t\tresultBitmap[0] = result;\r\n\t\t\t\t\t\t\tresultWaiter.countDown();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic void onFail() {\r\n\t\t\t\t\t\t\tresultWaiter.countDown();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\tresultWaiter.await();\r\n\t\t\t\treturn resultBitmap[0];\r\n\t\t\t} catch (Throwable ignored) {}\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tprivate void ensureEnvironment() throws RemoteException {\r\n\t\t\tif(!rootGranted)\r\n\t\t\t{\r\n\t\t\t\tthrow new RemoteException(\"Root permission denied\");\r\n\t\t\t}\r\n\r\n\t\t\tensureSecurity(Binder.getCallingUid());\r\n\t\t}\r\n\r\n\t\tprivate void ensureSecurity(int uid) throws RemoteException {\r\n\t\t\tfor (String packageName : getPackageManager().getPackagesForUid(uid)) {\r\n\t\t\t\tif(rootAllowedPacks.contains(packageName))\r\n\t\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthrow new RemoteException(\"You do know you're not supposed to use this service. So...\");\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sh/siava/pixelxpert/service/RootProviderProxy.java b/app/src/main/java/sh/siava/pixelxpert/service/RootProviderProxy.java
--- a/app/src/main/java/sh/siava/pixelxpert/service/RootProviderProxy.java	(revision 37a6d25ac9cbf2fa520c575e2e51af2e25532f98)
+++ b/app/src/main/java/sh/siava/pixelxpert/service/RootProviderProxy.java	(date 1728819461280)
@@ -1,25 +1,44 @@
 package sh.siava.pixelxpert.service;
 
+import static java.lang.System.loadLibrary;
+import static sh.siava.pixelxpert.modpacks.Constants.AI_METHOD_MLKIT;
+import static sh.siava.pixelxpert.modpacks.Constants.AI_METHOD_PYTORCH;
+
+import android.annotation.SuppressLint;
+import android.app.DownloadManager;
 import android.app.Service;
 import android.content.Context;
 import android.content.Intent;
 import android.graphics.Bitmap;
+import android.net.Uri;
 import android.os.Binder;
+import android.os.Build;
+import android.os.Environment;
 import android.os.IBinder;
 import android.os.RemoteException;
+import android.util.Log;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 import com.topjohnwu.superuser.Shell;
 
+import java.io.File;
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
 
+import dev.eren.removebg.RemoveBg;
+import kotlin.Unit;
+import kotlin.coroutines.Continuation;
+import kotlin.coroutines.CoroutineContext;
+import kotlinx.coroutines.Dispatchers;
+import kotlinx.coroutines.flow.FlowCollector;
 import sh.siava.pixelxpert.IRootProviderProxy;
 import sh.siava.pixelxpert.PixelXpert;
 import sh.siava.pixelxpert.R;
 import sh.siava.pixelxpert.modpacks.Constants;
+import sh.siava.pixelxpert.service.utils.PyTorchSegmentor;
 import sh.siava.pixelxpert.utils.BitmapSubjectSegmenter;
 
 public class RootProviderProxy extends Service {
@@ -69,7 +88,7 @@
 		}
 
 		@Override
-		public Bitmap extractSubject(Bitmap input) throws RemoteException {
+		public Bitmap extractSubject(Bitmap input, int method) throws RemoteException {
 			ensureEnvironment();
 
 			if(!PixelXpert.get().isCoreRootServiceBound())
@@ -77,24 +96,47 @@
 				PixelXpert.get().tryConnectRootService();
 			}
 
-			final Bitmap[] resultBitmap = new Bitmap[]{null};
-			CountDownLatch resultWaiter = new CountDownLatch(1);
-			try {
-					new BitmapSubjectSegmenter(getApplicationContext()).segmentSubject(input, new BitmapSubjectSegmenter.SegmentResultListener() {
-						@Override
-						public void onSuccess(Bitmap result) {
-							resultBitmap[0] = result;
-							resultWaiter.countDown();
-						}
+			switch (method)
+			{
+				case AI_METHOD_MLKIT:
+					return extractSubjectMLKit(input);
+				case AI_METHOD_PYTORCH:
+					return extractSubjectPytorch(input);
+			}
+			return null;
+		}
+
+		private Bitmap extractSubjectPytorch(Bitmap input) {
+			return PyTorchSegmentor.extractSubject(PixelXpert.get(), input);
+		}
+
+
+		private Bitmap extractSubjectMLKit(Bitmap input) {
+			Log.d(TAG, "extractSubjectMLKit: start");
+			try
+			{
+				final Bitmap[] resultBitmap = new Bitmap[]{null};
+				CountDownLatch resultWaiter = new CountDownLatch(1);
+
+				new BitmapSubjectSegmenter(getApplicationContext()).segmentSubject(input, new BitmapSubjectSegmenter.SegmentResultListener() {
+					@Override
+					public void onSuccess(Bitmap result) {
+						resultBitmap[0] = result;
+						Log.d(TAG, "onSuccess: ");
+						resultWaiter.countDown();
+					}
 
-						@Override
-						public void onFail() {
-							resultWaiter.countDown();
-						}
-					});
+					@Override
+					public void onFail() {
+						Log.d(TAG, "onFail: ");
+						resultWaiter.countDown();
+					}
+				});
 				resultWaiter.await();
 				return resultBitmap[0];
-			} catch (Throwable ignored) {}
+			} catch (Throwable ignored) {
+				Log.e(TAG, "extractSubjectMLKit: ", ignored);
+			}
 			return null;
 		}
 
Index: app/src/main/aidl/sh/siava/pixelxpert/IRootProviderProxy.aidl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// IRootProviderProxy.aidl\r\npackage sh.siava.pixelxpert;\r\n\r\n// Declare any non-default types here with import statements\r\n\r\ninterface IRootProviderProxy {\r\n\t/**\r\n\t * Demonstrates some basic types that you can use as parameters\r\n\t * and return values in AIDL.\r\n\t */\r\n\tString[] runCommand(String command);\r\n\tBitmap extractSubject(in Bitmap input);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/aidl/sh/siava/pixelxpert/IRootProviderProxy.aidl b/app/src/main/aidl/sh/siava/pixelxpert/IRootProviderProxy.aidl
--- a/app/src/main/aidl/sh/siava/pixelxpert/IRootProviderProxy.aidl	(revision 37a6d25ac9cbf2fa520c575e2e51af2e25532f98)
+++ b/app/src/main/aidl/sh/siava/pixelxpert/IRootProviderProxy.aidl	(date 1728811386561)
@@ -9,5 +9,5 @@
 	 * and return values in AIDL.
 	 */
 	String[] runCommand(String command);
-	Bitmap extractSubject(in Bitmap input);
+	Bitmap extractSubject(in Bitmap input, int method);
 }
\ No newline at end of file
Index: app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sh.siava.pixelxpert.modpacks.systemui;\r\n\r\nimport static android.view.View.GONE;\r\nimport static android.view.View.VISIBLE;\r\nimport static de.robv.android.xposed.XposedBridge.hookAllConstructors;\r\nimport static de.robv.android.xposed.XposedBridge.hookAllMethods;\r\nimport static de.robv.android.xposed.XposedHelpers.callMethod;\r\nimport static de.robv.android.xposed.XposedHelpers.findClass;\r\nimport static de.robv.android.xposed.XposedHelpers.findClassIfExists;\r\nimport static de.robv.android.xposed.XposedHelpers.getFloatField;\r\nimport static de.robv.android.xposed.XposedHelpers.getObjectField;\r\nimport static sh.siava.pixelxpert.modpacks.XPrefs.Xprefs;\r\nimport static sh.siava.pixelxpert.modpacks.utils.toolkit.ReflectionTools.reAddView;\r\nimport static sh.siava.pixelxpert.modpacks.utils.toolkit.ReflectionTools.tryHookAllConstructors;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.WallpaperManager;\r\nimport android.content.Context;\r\nimport android.content.res.Resources;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Color;\r\nimport android.graphics.Rect;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.graphics.drawable.LayerDrawable;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.FrameLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.util.Arrays;\r\n\r\nimport de.robv.android.xposed.XC_MethodHook;\r\nimport de.robv.android.xposed.callbacks.XC_LoadPackage;\r\nimport sh.siava.pixelxpert.modpacks.Constants;\r\nimport sh.siava.pixelxpert.modpacks.XPLauncher;\r\nimport sh.siava.pixelxpert.modpacks.XposedModPack;\r\nimport sh.siava.pixelxpert.modpacks.utils.toolkit.ReflectionTools;\r\n\r\n/** @noinspection RedundantThrows, SameParameterValue */\r\npublic class DepthWallpaper extends XposedModPack {\r\n\tprivate static final String listenPackage = Constants.SYSTEM_UI_PACKAGE;\r\n\tprivate static boolean lockScreenSubjectCacheValid = false;\r\n\tprivate Object mScrimController;\r\n\tprivate static boolean DWallpaperEnabled = false;\r\n\tprivate static int DWOpacity = 192;\r\n\r\n\tprivate static boolean DWonAOD = false;\r\n\tprivate FrameLayout mLockScreenSubject;\r\n\tprivate Drawable mSubjectDimmingOverlay;\r\n\tprivate FrameLayout mWallpaperBackground;\r\n\tprivate FrameLayout mWallpaperBitmapContainer;\r\n\tprivate FrameLayout mWallpaperDimmingOverlay;\r\n\tprivate boolean mLayersCreated = false;\r\n\tpublic DepthWallpaper(Context context) {\r\n\t\tsuper(context);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void updatePrefs(String... Key) {\r\n\t\tDWallpaperEnabled = Xprefs.getBoolean(\"DWallpaperEnabled\", false);\r\n\t\tDWOpacity = Xprefs.getSliderInt(\"DWOpacity\", 192);\r\n\t\tDWonAOD = Xprefs.getBoolean(\"DWonAOD\", false);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpParam) throws Throwable {\r\n\t\tClass<?> QSImplClass = findClassIfExists(\"com.android.systemui.qs.QSImpl\", lpParam.classLoader);\r\n\t\tif(QSImplClass == null) //Older versions of QS\r\n\t\t{\r\n\t\t\tQSImplClass = findClass(\"com.android.systemui.qs.QSFragment\", lpParam.classLoader);\r\n\t\t}\r\n\r\n\t\tClass<?> CanvasEngineClass = findClass(\"com.android.systemui.wallpapers.ImageWallpaper$CanvasEngine\", lpParam.classLoader);\r\n\t\tClass<?> CentralSurfacesImplClass = findClass(\"com.android.systemui.statusbar.phone.CentralSurfacesImpl\", lpParam.classLoader);\r\n\t\tClass<?> ScrimControllerClass = findClass(\"com.android.systemui.statusbar.phone.ScrimController\", lpParam.classLoader);\r\n\t\tClass<?> ScrimViewClass = findClass(\"com.android.systemui.scrim.ScrimView\", lpParam.classLoader);\r\n\r\n\r\n\t\tClass<?> AodBurnInLayerClass = findClassIfExists(\"com.android.systemui.keyguard.ui.view.layout.sections.AodBurnInLayer\", lpParam.classLoader);\r\n\t\ttryHookAllConstructors(AodBurnInLayerClass, new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable { //A15 compose keyguard\r\n\t\t\t\tView entryV = (View) param.thisObject;\r\n\r\n\t\t\t\tif(!DWallpaperEnabled) return;\r\n\r\n\t\t\t\tResources res = mContext.getResources();\r\n\r\n\t\t\t\tentryV.addOnAttachStateChangeListener(new View.OnAttachStateChangeListener() {\r\n\t\t\t\t\t@SuppressLint(\"DiscouragedApi\")\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void onViewAttachedToWindow(@NonNull View v) {\r\n\t\t\t\t\t\tReflectionTools.runDelayedOnMainThread(entryV, 1000, () -> {\r\n\t\t\t\t\t\t\tViewGroup rootView = (ViewGroup) entryV.getParent();\r\n\r\n\t\t\t\t\t\t\tif(!mLayersCreated) {\r\n\t\t\t\t\t\t\t\tcreateLayers();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treAddView(rootView, mLockScreenSubject, 0);\r\n\t\t\t\t\t\t\treAddView(rootView, rootView.findViewById(res.getIdentifier(\"lockscreen_clock_view_large\", \"id\", mContext.getPackageName())), 0);\r\n\t\t\t\t\t\t\treAddView(rootView, rootView.findViewById(res.getIdentifier(\"lockscreen_clock_view\", \"id\", mContext.getPackageName())),0);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void onViewDetachedFromWindow(@NonNull View v) {\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(ScrimViewClass, \"setViewAlpha\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void beforeHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(!mLayersCreated) return;\r\n\r\n\t\t\t\tif(DWonAOD\r\n\t\t\t\t\t\t&& !getObjectField(mScrimController, \"mState\").toString().equals(\"KEYGUARD\")) {\r\n\t\t\t\t\tmLockScreenSubject.post(() -> mLockScreenSubject.setAlpha(DWOpacity));\r\n\t\t\t\t}\r\n\t\t\t\telse if(getObjectField(mScrimController, \"mNotificationsScrim\").equals(param.thisObject)) //instead of using the mScrimName since older ones don't have that field\r\n\t\t\t\t{\r\n\t\t\t\t\tfloat mScrimBehindAlphaKeyguard = getFloatField(mScrimController, \"mScrimBehindAlphaKeyguard\");\r\n\r\n\t\t\t\t\tfloat notificationAlpha = (float)param.args[0];\r\n\r\n\t\t\t\t\tif(notificationAlpha < mScrimBehindAlphaKeyguard)\r\n\t\t\t\t\t\tnotificationAlpha = 0;\r\n\r\n\t\t\t\t\tfloat subjectAlpha = (notificationAlpha > mScrimBehindAlphaKeyguard)\r\n\t\t\t\t\t\t\t? (1f - notificationAlpha) / (1f - mScrimBehindAlphaKeyguard)\r\n\t\t\t\t\t\t\t: 1f;\r\n\r\n\t\t\t\t\tmLockScreenSubject.post(() -> mLockScreenSubject.setAlpha(subjectAlpha));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(CentralSurfacesImplClass, \"start\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(!DWallpaperEnabled) return;\r\n\r\n\t\t\t\tResources res = mContext.getResources();\r\n\r\n\t\t\t\tView scrimBehind = (View) getObjectField(mScrimController, \"mScrimBehind\");\r\n\t\t\t\tViewGroup rootView = (ViewGroup) scrimBehind.getParent();\r\n\r\n\t\t\t\t@SuppressLint(\"DiscouragedApi\")\r\n\t\t\t\tViewGroup targetView = rootView.findViewById(res.getIdentifier(\"notification_container_parent\", \"id\", mContext.getPackageName()));\r\n\r\n\t\t\t\tif(!mLayersCreated) {\r\n\t\t\t\t\tcreateLayers();\r\n\t\t\t\t}\r\n\r\n\t\t\t\treAddView(rootView, mWallpaperBackground, 0);\r\n\r\n\t\t\t\ttargetView.addView(mLockScreenSubject,1);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(CanvasEngineClass, \"onSurfaceDestroyed\", new XC_MethodHook() { //lockscreen wallpaper changed\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(DWallpaperEnabled && isLockScreenWallpaper(param.thisObject))\r\n\t\t\t\t{\r\n\t\t\t\t\tinvalidateLSWSC();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(CanvasEngineClass, \"onCreate\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(\r\n\t\t\t\t\t\tcallMethod(\r\n\t\t\t\t\t\t\t\tgetObjectField(param.thisObject, \"mWallpaperManager\"),\r\n\t\t\t\t\t\t\t\t\"getWallpaperInfo\", WallpaperManager.FLAG_LOCK)\r\n\t\t\t\t\t\t\t\t!= null) //it's live wallpaper. we can't use that\r\n\t\t\t\t{\r\n\t\t\t\t\tinvalidateLSWSC();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tfinal Thread[] wallpaperProcessorThread = {null};\r\n\t\thookAllMethods(CanvasEngineClass, \"drawFrameOnCanvas\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(wallpaperProcessorThread[0] != null)\r\n\t\t\t\t{\r\n\t\t\t\t\twallpaperProcessorThread[0].interrupt();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(DWallpaperEnabled && isLockScreenWallpaper(param.thisObject))\r\n\t\t\t\t{\r\n\t\t\t\t\twallpaperProcessorThread[0] =new Thread(() -> {\r\n\t\t\t\t\t\t\tBitmap wallpaperBitmap = Bitmap.createBitmap((Bitmap) param.args[0]);\r\n\r\n\t\t\t\t\t\t\tboolean cacheIsValid = assertCache(wallpaperBitmap);\r\n\r\n\t\t\t\t\t\t\tRect displayBounds =  ((Context) callMethod(param.thisObject, \"getDisplayContext\")).getSystemService(WindowManager.class)\r\n\t\t\t\t\t\t\t\t\t.getCurrentWindowMetrics()\r\n\t\t\t\t\t\t\t\t\t.getBounds();\r\n\r\n\t\t\t\t\t\t\tfloat ratioW = 1f * displayBounds.width() / wallpaperBitmap.getWidth();\r\n\t\t\t\t\t\t\tfloat ratioH = 1f * displayBounds.height() / wallpaperBitmap.getHeight();\r\n\r\n\t\t\t\t\t\t\tint desiredHeight = Math.round(Math.max(ratioH, ratioW) * wallpaperBitmap.getHeight());\r\n\t\t\t\t\t\t\tint desiredWidth = Math.round(Math.max(ratioH, ratioW) * wallpaperBitmap.getWidth());\r\n\r\n\t\t\t\t\t\t\tint xPixelShift = (desiredWidth - displayBounds.width()) / 2;\r\n\t\t\t\t\t\t\tint yPixelShift = (desiredHeight - displayBounds.height()) / 2;\r\n\r\n\t\t\t\t\t\t\tBitmap scaledWallpaperBitmap = Bitmap.createScaledBitmap(wallpaperBitmap, desiredWidth, desiredHeight, true);\r\n\r\n\t\t\t\t\t\t\t//crop to display bounds\r\n\t\t\t\t\t\t\tscaledWallpaperBitmap = Bitmap.createBitmap(scaledWallpaperBitmap, xPixelShift, yPixelShift, displayBounds.width(), displayBounds.height());\r\n\t\t\t\t\t\t\tBitmap finalScaledWallpaperBitmap = Bitmap.createBitmap(scaledWallpaperBitmap);\r\n\r\n\t\t\t\t\t\t\tif(!mLayersCreated) {\r\n\t\t\t\t\t\t\t\tcreateLayers();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmWallpaperBackground.post(() -> mWallpaperBitmapContainer.setBackground(new BitmapDrawable(mContext.getResources(), finalScaledWallpaperBitmap)));\r\n\r\n\t\t\t\t\t\tif(!cacheIsValid) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tString cachePath = Constants.getLockScreenSubjectCachePath(mContext);\r\n\t\t\t\t\t\t\t\tBitmap subjectBitmap = XPLauncher.getRootProviderProxy().extractSubject(finalScaledWallpaperBitmap);\r\n\r\n\t\t\t\t\t\t\t\tif(subjectBitmap != null) {\r\n\t\t\t\t\t\t\t\t\tFileOutputStream subjectOutputStream = new FileOutputStream(cachePath);\r\n\t\t\t\t\t\t\t\t\tsubjectBitmap.compress(Bitmap.CompressFormat.PNG, 100, subjectOutputStream);\r\n\t\t\t\t\t\t\t\t\tsubjectOutputStream.close();\r\n\r\n\t\t\t\t\t\t\t\t\tThread.sleep(500); //letting the filesystem settle down\r\n\r\n\t\t\t\t\t\t\t\t\tsetDepthWallpaper();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} catch (Throwable ignored) {}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\twallpaperProcessorThread[0] = null;\r\n\t\t\t\t\t});\r\n\t\t\t\t\twallpaperProcessorThread[0].start();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllConstructors(ScrimControllerClass, new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tmScrimController = param.thisObject;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(ScrimControllerClass, \"applyAndDispatchState\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tsetDepthWallpaper();\r\n\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(QSImplClass, \"setQsExpansion\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void beforeHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif((boolean) callMethod(param.thisObject, \"isKeyguardState\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tsetDepthWallpaper();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate boolean assertCache(Bitmap wallpaperBitmap) {\r\n\r\n\t\tboolean cacheIsValid = false;\r\n\t\ttry\r\n\t\t{\r\n\t\t\tFile wallpaperCacheFile = new File(Constants.getLockScreenBitmapCachePath(mContext));\r\n\r\n\t\t\tByteArrayOutputStream compressedBitmap = new ByteArrayOutputStream();\r\n\t\t\twallpaperBitmap.compress(Bitmap.CompressFormat.JPEG, 100, compressedBitmap);\r\n\t\t\tif(wallpaperCacheFile.exists())\r\n\t\t\t{\r\n\t\t\t\tFileInputStream cacheStream = new FileInputStream(wallpaperCacheFile);\r\n\r\n\t\t\t\tif(Arrays.equals(cacheStream.readAllBytes(), compressedBitmap.toByteArray()))\r\n\t\t\t\t{\r\n\t\t\t\t\tcacheIsValid = true;\r\n\t\t\t\t}\r\n\t\t\t\tcacheStream.close();\r\n\t\t\t}\r\n\r\n\t\t\tif(!cacheIsValid)\r\n\t\t\t{\r\n\t\t\t\tFileOutputStream newCacheStream = new FileOutputStream(wallpaperCacheFile);\r\n\t\t\t\tcompressedBitmap.writeTo(newCacheStream);\r\n\t\t\t\tnewCacheStream.close();\r\n\t\t\t}\r\n\t\t\tcompressedBitmap.close();\r\n\t\t}\r\n\t\tcatch (Throwable ignored)\r\n\t\t{}\r\n\r\n\t\tif(!cacheIsValid)\r\n\t\t{\r\n\t\t\tinvalidateLSWSC();\r\n\t\t}\r\n\r\n\t\treturn cacheIsValid;\r\n\t}\r\n\r\n\tprivate void createLayers() {\r\n\t\tmWallpaperBackground = new FrameLayout(mContext);\r\n\t\tmWallpaperDimmingOverlay = new FrameLayout(mContext);\r\n\t\tmWallpaperBitmapContainer = new FrameLayout(mContext);\r\n\t\tFrameLayout.LayoutParams lpw = new FrameLayout.LayoutParams(-1, -1);\r\n\r\n\t\tmWallpaperDimmingOverlay.setBackgroundColor(Color.BLACK);\r\n\t\tmWallpaperDimmingOverlay.setLayoutParams(lpw);\r\n\t\tmWallpaperBitmapContainer.setLayoutParams(lpw);\r\n\r\n\t\tmWallpaperBackground.addView(mWallpaperBitmapContainer);\r\n\t\tmWallpaperBackground.addView(mWallpaperDimmingOverlay);\r\n\t\tmWallpaperBackground.setLayoutParams(lpw);\r\n\r\n\t\tmLockScreenSubject = new FrameLayout(mContext);\r\n\t\tFrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(-1, -1);\r\n\t\tmLockScreenSubject.setLayoutParams(lp);\r\n\r\n\t\tmLockScreenSubject.setId(View.generateViewId()); //a fake ID so that it can be added to constrained layout\r\n\r\n\t\tmLayersCreated = true;\r\n\t}\r\n\r\n\tprivate boolean isLockScreenWallpaper(Object canvasEngine)\r\n\t{\r\n\t\treturn (getWallpaperFlag(canvasEngine)\r\n\t\t\t\t& WallpaperManager.FLAG_LOCK)\r\n\t\t\t\t== WallpaperManager.FLAG_LOCK;\r\n\t}\r\n\tprivate void setDepthWallpaper()\r\n\t{\r\n\t\tString state = getObjectField(mScrimController, \"mState\").toString();\r\n\t\tboolean showSubject = DWallpaperEnabled\r\n\t\t\t\t&&\r\n\t\t\t\t(\r\n\t\t\t\t\t\tstate.equals(\"KEYGUARD\")\r\n\t\t\t\t\t\t||\r\n\t\t\t\t\t\t\t\t(DWonAOD\r\n\t\t\t\t\t\t\t\t\t\t&&\r\n\t\t\t\t\t\t\t\t\t\t(state.equals(\"AOD\") || state.equals(\"PULSING\"))\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\tif(showSubject) {\r\n\t\t\tif(!lockScreenSubjectCacheValid && isSubjectCacheAvailable())\r\n\t\t\t{\r\n\t\t\t\ttry (FileInputStream inputStream = new FileInputStream(Constants.getLockScreenSubjectCachePath(mContext)))\r\n\t\t\t\t{\r\n\t\t\t\t\tDrawable bitmapDrawable = BitmapDrawable.createFromStream(inputStream, \"\");\r\n\t\t\t\t\tbitmapDrawable.setAlpha(255);\r\n\r\n\t\t\t\t\tmSubjectDimmingOverlay = bitmapDrawable.getConstantState().newDrawable().mutate();\r\n\t\t\t\t\tmSubjectDimmingOverlay.setTint(Color.BLACK);\r\n\r\n\t\t\t\t\tmLockScreenSubject.setBackground(new LayerDrawable(new Drawable[]{bitmapDrawable, mSubjectDimmingOverlay}));\r\n\t\t\t\t\tlockScreenSubjectCacheValid = true;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (Throwable ignored) {}\r\n\t\t\t}\r\n\r\n\t\t\tif(lockScreenSubjectCacheValid) {\r\n\t\t\t\tmLockScreenSubject.getBackground().setAlpha(DWOpacity);\r\n\r\n\t\t\t\tif(!state.equals(\"KEYGUARD\")) { //AOD\r\n\t\t\t\t\tmSubjectDimmingOverlay.setAlpha(192 /*Math.round(192 * (DWOpacity / 255f))*/);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//this is the dimmed wallpaper coverage\r\n\t\t\t\t\tmSubjectDimmingOverlay.setAlpha(Math.round(getFloatField(mScrimController, \"mScrimBehindAlphaKeyguard\") * 240)); //A tad bit lower than max. show it a bit lighter than other stuff\r\n\t\t\t\t\tmWallpaperDimmingOverlay.setAlpha(getFloatField(mScrimController, \"mScrimBehindAlphaKeyguard\"));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmWallpaperBackground.setVisibility(VISIBLE);\r\n\t\t\t\tmLockScreenSubject.setVisibility(VISIBLE);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(mLayersCreated)\r\n\t\t{\r\n\t\t\tmLockScreenSubject.setVisibility(GONE);\r\n\r\n\t\t\tif (state.equals(\"UNLOCKED\")) {\r\n\t\t\t\tmWallpaperBackground.setVisibility(GONE);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate boolean isSubjectCacheAvailable() {\r\n\t\ttry {\r\n\t\t\treturn new File(Constants.getLockScreenSubjectCachePath(mContext)).length() > 0;\r\n\t\t} catch (Exception e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate int getWallpaperFlag(Object canvasEngine) {\r\n\t\treturn (int) callMethod(canvasEngine, \"getWallpaperFlags\");\r\n\t}\r\n\r\n\tprivate void invalidateLSWSC() //invalidate lock screen wallpaper subject cache\r\n\t{\r\n\t\tlockScreenSubjectCacheValid = false;\r\n\t\tif(mLayersCreated) {\r\n\t\t\tmLockScreenSubject.post(() -> {\r\n\t\t\t\tmLockScreenSubject.setVisibility(GONE);\r\n\t\t\t\tmLockScreenSubject.setBackground(null);\r\n\t\t\t\tmWallpaperBackground.setVisibility(GONE);\r\n\t\t\t\tmWallpaperBitmapContainer.setBackground(null);\r\n\t\t\t});\r\n\t\t}\r\n\t\ttry {\r\n\t\t\t//noinspection ResultOfMethodCallIgnored\r\n\t\t\tnew File(Constants.getLockScreenSubjectCachePath(mContext)).delete();\r\n\t\t}\r\n\t\tcatch (Throwable ignored){}\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean listensTo(String packageName) {\r\n\t\treturn listenPackage.equals(packageName) && !XPLauncher.isChildProcess;\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java b/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java
--- a/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java	(revision 37a6d25ac9cbf2fa520c575e2e51af2e25532f98)
+++ b/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java	(date 1728812699337)
@@ -4,11 +4,14 @@
 import static android.view.View.VISIBLE;
 import static de.robv.android.xposed.XposedBridge.hookAllConstructors;
 import static de.robv.android.xposed.XposedBridge.hookAllMethods;
+import static de.robv.android.xposed.XposedBridge.log;
 import static de.robv.android.xposed.XposedHelpers.callMethod;
 import static de.robv.android.xposed.XposedHelpers.findClass;
 import static de.robv.android.xposed.XposedHelpers.findClassIfExists;
 import static de.robv.android.xposed.XposedHelpers.getFloatField;
 import static de.robv.android.xposed.XposedHelpers.getObjectField;
+import static sh.siava.pixelxpert.modpacks.Constants.AI_METHOD_MLKIT;
+import static sh.siava.pixelxpert.modpacks.Constants.AI_METHOD_PYTORCH;
 import static sh.siava.pixelxpert.modpacks.XPrefs.Xprefs;
 import static sh.siava.pixelxpert.modpacks.utils.toolkit.ReflectionTools.reAddView;
 import static sh.siava.pixelxpert.modpacks.utils.toolkit.ReflectionTools.tryHookAllConstructors;
@@ -29,6 +32,7 @@
 import android.widget.FrameLayout;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -38,6 +42,11 @@
 
 import de.robv.android.xposed.XC_MethodHook;
 import de.robv.android.xposed.callbacks.XC_LoadPackage;
+import dev.eren.removebg.RemoveBg;
+import kotlin.Unit;
+import kotlin.coroutines.Continuation;
+import kotlin.coroutines.CoroutineContext;
+import kotlinx.coroutines.flow.FlowCollector;
 import sh.siava.pixelxpert.modpacks.Constants;
 import sh.siava.pixelxpert.modpacks.XPLauncher;
 import sh.siava.pixelxpert.modpacks.XposedModPack;
@@ -58,6 +67,8 @@
 	private FrameLayout mWallpaperBitmapContainer;
 	private FrameLayout mWallpaperDimmingOverlay;
 	private boolean mLayersCreated = false;
+
+	private static int SegmentorAI = Constants.AI_METHOD_MLKIT;
 	public DepthWallpaper(Context context) {
 		super(context);
 	}
@@ -67,6 +78,7 @@
 		DWallpaperEnabled = Xprefs.getBoolean("DWallpaperEnabled", false);
 		DWOpacity = Xprefs.getSliderInt("DWOpacity", 192);
 		DWonAOD = Xprefs.getBoolean("DWonAOD", false);
+		SegmentorAI = Integer.parseInt(Xprefs.getString("SegmentorAI", String.valueOf(AI_METHOD_PYTORCH)));
 	}
 
 	@Override
@@ -235,7 +247,12 @@
 						if(!cacheIsValid) {
 							try {
 								String cachePath = Constants.getLockScreenSubjectCachePath(mContext);
-								Bitmap subjectBitmap = XPLauncher.getRootProviderProxy().extractSubject(finalScaledWallpaperBitmap);
+
+								log("method " + SegmentorAI);
+
+								Bitmap subjectBitmap = XPLauncher.getRootProviderProxy().extractSubject(finalScaledWallpaperBitmap, SegmentorAI);
+
+								log("Bitmap: " + subjectBitmap);
 
 								if(subjectBitmap != null) {
 									FileOutputStream subjectOutputStream = new FileOutputStream(cachePath);
Index: app/src/main/java/sh/siava/pixelxpert/modpacks/Constants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sh.siava.pixelxpert.modpacks;\r\n\r\nimport static sh.siava.pixelxpert.BuildConfig.APPLICATION_ID;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport sh.siava.pixelxpert.modpacks.utils.BootLoopProtector;\r\n\r\npublic final class Constants {\r\n\tpublic static final String ACTION_SCREENSHOT = APPLICATION_ID + \".ACTION_SCREENSHOT\";\r\n\r\n\tpublic static final String ACTION_HOME = APPLICATION_ID + \".ACTION_HOME\";\r\n\tpublic static final String ACTION_BACK = APPLICATION_ID + \".ACTION_BACK\";\r\n\tpublic static final String ACTION_SLEEP = APPLICATION_ID + \".ACTION_SLEEP\";\r\n\tpublic static final String ACTION_SWITCH_APP_PROFILE = APPLICATION_ID + \".ACTION_SWITCH_APP_PROFILE\";\r\n\tpublic static final String ACTION_PROFILE_SWITCH_AVAILABLE = APPLICATION_ID + \".ACTION_PROFILE_SWITCH_AVAILABLE\";\r\n\tpublic static final String ACTION_CHECK_XPOSED_ENABLED = APPLICATION_ID + \".ACTION_CHECK_XPOSED_ENABLED\";\r\n\tpublic static final String ACTION_XPOSED_CONFIRMED = APPLICATION_ID + \".ACTION_XPOSED_CONFIRMED\";\r\n\tpublic static final String ACTION_KSU_ACQUIRE_ROOT = APPLICATION_ID + \"ACTION_KSU_ACQUIRE_ROOT\";\r\n\r\n\tpublic static final String SYSTEM_UI_PACKAGE = \"com.android.systemui\";\r\n\tpublic static final String SYSTEM_FRAMEWORK_PACKAGE = \"android\";\r\n\tpublic static final String TELECOM_SERVER_PACKAGE = \"com.android.server.telecom\";\r\n\tpublic static final String LAUNCHER_PACKAGE = \"com.google.android.apps.nexuslauncher\";\r\n\tpublic static final String SETTINGS_PACKAGE = \"com.android.settings\";\r\n\tpublic static final String DIALER_PACKAGE = \"com.google.android.dialer\";\r\n\tpublic static final String KSU_PACKAGE = \"me.weishu.kernelsu\";\r\n\r\n\tpublic static final String PX_ROOT_EXTRA = \"EXTRA_PX_ROOT\";\r\n\r\n\tpublic static final List<String> PREF_UPDATE_EXCLUSIONS = Arrays.asList(BootLoopProtector.LOAD_TIME_KEY_KEY, BootLoopProtector.PACKAGE_STRIKE_KEY_KEY);\r\n\r\n\tpublic static String getLockScreenSubjectCachePath(Context context)\r\n\t{\r\n\t\treturn context.getCacheDir().getAbsolutePath() + \"/lswt.png\";\r\n\t}\r\n\r\n\tpublic static String getLockScreenBitmapCachePath(Context context)\r\n\t{\r\n\t\treturn context.getCacheDir().getAbsolutePath() + \"/lsw.jpg\";\r\n\t}\r\n\r\n\tpublic static Intent getAppProfileSwitchIntent()\r\n\t{\r\n\t\treturn new Intent()\r\n\t\t\t\t.setAction(Constants.ACTION_SWITCH_APP_PROFILE)\r\n\t\t\t\t.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sh/siava/pixelxpert/modpacks/Constants.java b/app/src/main/java/sh/siava/pixelxpert/modpacks/Constants.java
--- a/app/src/main/java/sh/siava/pixelxpert/modpacks/Constants.java	(revision 37a6d25ac9cbf2fa520c575e2e51af2e25532f98)
+++ b/app/src/main/java/sh/siava/pixelxpert/modpacks/Constants.java	(date 1728811386565)
@@ -32,6 +32,9 @@
 
 	public static final String PX_ROOT_EXTRA = "EXTRA_PX_ROOT";
 
+	public static final int AI_METHOD_MLKIT = 0;
+	public static final int AI_METHOD_PYTORCH = 1;
+
 	public static final List<String> PREF_UPDATE_EXCLUSIONS = Arrays.asList(BootLoopProtector.LOAD_TIME_KEY_KEY, BootLoopProtector.PACKAGE_STRIKE_KEY_KEY);
 
 	public static String getLockScreenSubjectCachePath(Context context)
Index: app/src/main/java/sh/siava/pixelxpert/service/utils/PyTorchSegmentor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sh/siava/pixelxpert/service/utils/PyTorchSegmentor.java b/app/src/main/java/sh/siava/pixelxpert/service/utils/PyTorchSegmentor.java
new file mode 100644
--- /dev/null	(date 1728824971371)
+++ b/app/src/main/java/sh/siava/pixelxpert/service/utils/PyTorchSegmentor.java	(date 1728824971371)
@@ -0,0 +1,123 @@
+package sh.siava.pixelxpert.service.utils;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.os.Build;
+import android.util.Log;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
+import com.downloader.Error;
+import com.downloader.OnDownloadListener;
+import com.downloader.PRDownloader;
+
+import java.io.File;
+import java.util.concurrent.CountDownLatch;
+
+import dev.eren.removebg.RemoveBg;
+import kotlin.Unit;
+import kotlin.coroutines.Continuation;
+import kotlin.coroutines.CoroutineContext;
+import kotlinx.coroutines.Dispatchers;
+import kotlinx.coroutines.flow.FlowCollector;
+
+public class PyTorchSegmentor {
+
+	private static final String TAG = "PyTorchSegmentor";
+	private static final String PYTORCH_LIB = "libpytorch_jni_lite.so";
+	private static final String LIB_BASE_URL = "https://github.com/siavash79/PixelXpert/raw/refs/heads/canary/app/lib/";
+	private static final String MODEL_FILENAME = "u2net.ptl";
+	private static final String MODEL_BASE_URL = "https://github.com/siavash79/PixelXpert/raw/refs/heads/canary/app/pytorchModel/";
+	public static Bitmap extractSubject(Context context, Bitmap input)
+	{
+		try {
+			boolean libLoaded = loadPyTorchLibrary(context);
+			boolean modelLoaded =  downloadAIModel(context);
+
+			if(!libLoaded || !modelLoaded) return null;
+
+			RemoveBg r = new RemoveBg(context);
+			final Bitmap[] resultBitmap = new Bitmap[]{null};
+			CountDownLatch resultWaiter = new CountDownLatch(1);
+
+			r.clearBackground(input).collect(new FlowCollector<>() {
+				@Nullable
+				@Override
+				public Object emit(Bitmap bitmap, @NonNull Continuation<? super Unit> continuation) {
+					Log.d(TAG, "emit: done remove");
+					resultWaiter.countDown();
+					resultBitmap[0] = bitmap;
+					return bitmap;
+				}
+			}, new Continuation<>() {
+				@NonNull
+				@Override
+				public CoroutineContext getContext() {
+					return Dispatchers.getDefault();
+				}
+
+				@Override
+				public void resumeWith(@NonNull Object o) {
+
+				}
+			});
+			resultWaiter.await();
+			return resultBitmap[0];
+		} catch (Throwable ignored) {
+			Log.e(TAG, "extractSubject: ", ignored);
+		}
+		return null;
+
+	}
+
+	private static boolean downloadAIModel(Context context) {
+		String AIPath = String.format("%s/%s", context.getCacheDir(), MODEL_FILENAME);
+		if(new File(AIPath).exists()) return true;
+
+		String downloadURL = String.format("%s/%s", MODEL_BASE_URL, MODEL_FILENAME);
+
+		PRDownloader.download(downloadURL, context.getCacheDir().getPath(), MODEL_FILENAME).build().start(new OnDownloadListener(){
+			@Override
+			public void onDownloadComplete() {
+
+			}
+
+			@Override
+			public void onError(Error error) {
+
+			}
+		});
+
+		return false;
+	}
+
+	@SuppressLint("UnsafeDynamicallyLoadedCode")
+	private static boolean loadPyTorchLibrary(Context context) {
+		String libPath = String.format("%s/%s", context.getCacheDir(), PYTORCH_LIB);
+		if(new File(libPath).exists())
+		{
+			try {
+				System.load(libPath);
+				return true;
+			} catch (Throwable ignored) {}
+		}
+
+		downloadLibrary(context);
+		return false;
+	}
+
+	private static void downloadLibrary(Context context) {
+		String architecture = Build.SUPPORTED_ABIS[0];
+		String downloadURL = String.format("%s%s/%s", LIB_BASE_URL, architecture, PYTORCH_LIB);
+
+		PRDownloader.download(downloadURL, context.getCacheDir().getPath(), PYTORCH_LIB).build().start(new OnDownloadListener() {
+			@Override
+			public void onDownloadComplete() {}
+
+			@Override
+			public void onError(Error error) {}
+		});
+	}
+}
