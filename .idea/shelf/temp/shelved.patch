Index: app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/ThemeManager_14.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sh.siava.pixelxpert.modpacks.systemui;\r\n\r\nimport static android.graphics.Color.BLACK;\r\nimport static android.graphics.Color.WHITE;\r\nimport static android.service.quicksettings.Tile.STATE_ACTIVE;\r\nimport static android.service.quicksettings.Tile.STATE_UNAVAILABLE;\r\nimport static de.robv.android.xposed.XposedHelpers.callMethod;\r\nimport static de.robv.android.xposed.XposedHelpers.getIntField;\r\nimport static de.robv.android.xposed.XposedHelpers.getObjectField;\r\nimport static de.robv.android.xposed.XposedHelpers.setObjectField;\r\nimport static sh.siava.pixelxpert.modpacks.XPrefs.Xprefs;\r\nimport static sh.siava.pixelxpert.modpacks.utils.toolkit.ColorUtils.getColorAttrDefaultColor;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Context;\r\nimport android.content.res.ColorStateList;\r\nimport android.content.res.Resources;\r\nimport android.graphics.Color;\r\nimport android.graphics.PorterDuff;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.graphics.drawable.DrawableWrapper;\r\nimport android.graphics.drawable.GradientDrawable;\r\nimport android.graphics.drawable.LayerDrawable;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.ColorInt;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.regex.Pattern;\r\n\r\nimport de.robv.android.xposed.callbacks.XC_LoadPackage;\r\nimport sh.siava.pixelxpert.modpacks.Constants;\r\nimport sh.siava.pixelxpert.modpacks.XPLauncher;\r\nimport sh.siava.pixelxpert.modpacks.XposedModPack;\r\nimport sh.siava.pixelxpert.modpacks.utils.SystemUtils;\r\nimport sh.siava.pixelxpert.modpacks.utils.toolkit.ReflectedClass;\r\nimport sh.siava.pixelxpert.modpacks.utils.toolkit.ReflectedClass.ReflectionConsumer;\r\n\r\n@SuppressWarnings(\"RedundantThrows\")\r\npublic class ThemeManager_14 extends XposedModPack {\r\n\tpublic static final String listenPackage = Constants.SYSTEM_UI_PACKAGE;\r\n\tprivate static boolean lightQSHeaderEnabled = false;\r\n\tprivate static boolean enablePowerMenuTheme = false;\r\n\tprivate static boolean brightnessThickTrackEnabled = false;\r\n\tprivate boolean isDark;\r\n\tprivate Integer colorInactive = null;\r\n\r\n\tprivate final int colorFadedBlack = applyAlpha(0.3f, BLACK); //30% opacity of black color\r\n\r\n\tprivate int colorUnavailable;\r\n\tprivate int colorActive;\r\n\tprivate int mScrimBehindTint = BLACK;\r\n\tprivate Object unlockedScrimState;\r\n\tprivate Object ShadeCarrierGroupController;\r\n\tprivate final ArrayList<Object> ModernShadeCarrierGroupMobileViews = new ArrayList<>();\r\n\tprivate static final int PM_LITE_BACKGROUND_CODE = 1;\r\n\r\n\tpublic ThemeManager_14(Context context) {\r\n\t\tsuper(context);\r\n\t\tif (!listensTo(context.getPackageName())) return;\r\n\r\n\t\tisDark = isDarkMode();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void updatePrefs(String... Key) {\r\n\t\tif (Xprefs == null) return;\r\n\r\n\t\tenablePowerMenuTheme = Xprefs.getBoolean(\"enablePowerMenuTheme\", false);\r\n\t\tsetLightQSHeader(Xprefs.getBoolean(\"LightQSPanel\", false));\r\n\t\tboolean newbrightnessThickTrackEnabled = Xprefs.getBoolean(\"BSThickTrackOverlay\", false);\r\n\t\tif (newbrightnessThickTrackEnabled != brightnessThickTrackEnabled) {\r\n\t\t\tbrightnessThickTrackEnabled = newbrightnessThickTrackEnabled;\r\n\r\n\t\t\trebuildSysUI(true);\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tif (Key[0].equals(\"LightQSPanel\")) {\r\n\t\t\t\t//Application of Light QS usually only needs a screen off/on. but some users get confused. Let's restart systemUI and get it over with\r\n\t\t\t\t//This has to happen AFTER overlays are applied. So we do it after update operations are done\r\n\t\t\t\tSystemUtils.killSelf();\r\n\t\t\t}\r\n\t\t} catch (Throwable ignored) {\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void setLightQSHeader(boolean state) {\r\n\t\tif (lightQSHeaderEnabled != state) {\r\n\t\t\tlightQSHeaderEnabled = state;\r\n\r\n\t\t\trebuildSysUI(true);\r\n\t\t}\r\n\t}\r\n\r\n\t@SuppressLint(\"DiscouragedApi\")\r\n\t@Override\r\n\tpublic void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpParam) {\r\n\t\tif (!lightQSHeaderEnabled)\r\n\t\t\treturn; //light QS header pref update needs a systemui restart. so there's no point to load these if not enabled\r\n\r\n\t\tReflectedClass QSTileViewImplClass = ReflectedClass.of(\"com.android.systemui.qs.tileimpl.QSTileViewImpl\", lpParam.classLoader);\r\n\t\tReflectedClass ScrimControllerClass = ReflectedClass.of(\"com.android.systemui.statusbar.phone.ScrimController\", lpParam.classLoader);\r\n\t\tReflectedClass QSPanelControllerClass = ReflectedClass.of(\"com.android.systemui.qs.QSPanelController\", lpParam.classLoader);\r\n\t\tReflectedClass ScrimStateEnum = ReflectedClass.of(\"com.android.systemui.statusbar.phone.ScrimState\", lpParam.classLoader);\r\n\t\tReflectedClass QSIconViewImplClass = ReflectedClass.of(\"com.android.systemui.qs.tileimpl.QSIconViewImpl\", lpParam.classLoader);\r\n\t\tReflectedClass CentralSurfacesImplClass = ReflectedClass.of(\"com.android.systemui.statusbar.phone.CentralSurfacesImpl\", lpParam.classLoader);\r\n\t\tReflectedClass GlobalActionsDialogLiteSinglePressActionClass = ReflectedClass.of(\"com.android.systemui.globalactions.GlobalActionsDialogLite$SinglePressAction\", lpParam.classLoader);\r\n\t\tReflectedClass GlobalActionsDialogLiteEmergencyActionClass = ReflectedClass.of(\"com.android.systemui.globalactions.GlobalActionsDialogLite$EmergencyAction\", lpParam.classLoader);\r\n\t\tReflectedClass GlobalActionsLayoutLiteClass = ReflectedClass.of(\"com.android.systemui.globalactions.GlobalActionsLayoutLite\", lpParam.classLoader);\r\n\t\tReflectedClass QSFooterViewClass = ReflectedClass.of(\"com.android.systemui.qs.QSFooterView\", lpParam.classLoader);\r\n\t\tReflectedClass BrightnessSliderViewClass = ReflectedClass.of(\"com.android.systemui.settings.brightness.BrightnessSliderView\", lpParam.classLoader);\r\n\t\tReflectedClass ShadeCarrierClass = ReflectedClass.of(\"com.android.systemui.shade.carrier.ShadeCarrier\", lpParam.classLoader);\r\n\t\tReflectedClass QSCustomizerClass = ReflectedClass.of(\"com.android.systemui.qs.customize.QSCustomizer\", lpParam.classLoader);\r\n\t\tReflectedClass BatteryStatusChipClass = ReflectedClass.of(\"com.android.systemui.statusbar.BatteryStatusChip\", lpParam.classLoader);\r\n\t\tReflectedClass QSContainerImplClass = ReflectedClass.of(\"com.android.systemui.qs.QSContainerImpl\", lpParam.classLoader);\r\n\t\tReflectedClass ShadeHeaderControllerClass = ReflectedClass.ofIfPossible(\"com.android.systemui.shade.ShadeHeaderController\", lpParam.classLoader);\r\n\r\n\t\ttry { //A15 early implementation of QS Footer actions - doesn't seem to be leading to final A15 release\r\n\t\t\tReflectedClass FooterActionsViewBinderClass = ReflectedClass.of(\"com.android.systemui.qs.footer.ui.binder.FooterActionsViewBinder\", lpParam.classLoader);\r\n\t\t\tReflectedClass TextButtonViewHolderClass = ReflectedClass.of(\"com.android.systemui.qs.footer.ui.binder.TextButtonViewHolder\", lpParam.classLoader);\r\n\t\t\tReflectedClass NumberButtonViewHolderClass = ReflectedClass.of(\"com.android.systemui.qs.footer.ui.binder.NumberButtonViewHolder\", lpParam.classLoader);\r\n\r\n\t\t\tNumberButtonViewHolderClass\r\n\t\t\t\t\t.afterConstruction()\r\n\t\t\t\t\t.run(param -> {\r\n\t\t\t\t\t\tif (!isDark) {\r\n\t\t\t\t\t\t\t((ImageView) getObjectField(param.thisObject\r\n\t\t\t\t\t\t\t\t\t, \"newDot\"))\r\n\t\t\t\t\t\t\t\t\t.setColorFilter(BLACK);\r\n\r\n\t\t\t\t\t\t\t((TextView) getObjectField(param.thisObject\r\n\t\t\t\t\t\t\t\t\t, \"number\"))\r\n\t\t\t\t\t\t\t\t\t.setTextColor(BLACK);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\tTextButtonViewHolderClass\r\n\t\t\t\t\t.afterConstruction()\r\n\t\t\t\t\t.run(param -> {\r\n\t\t\t\t\t\tif (!isDark) {\r\n\t\t\t\t\t\t\t((ImageView) getObjectField(param.thisObject\r\n\t\t\t\t\t\t\t\t\t, \"chevron\"))\r\n\t\t\t\t\t\t\t\t\t.setColorFilter(BLACK);\r\n\r\n\t\t\t\t\t\t\t((ImageView) getObjectField(param.thisObject\r\n\t\t\t\t\t\t\t\t\t, \"icon\"))\r\n\t\t\t\t\t\t\t\t\t.setColorFilter(BLACK);\r\n\r\n\t\t\t\t\t\t\t((ImageView) getObjectField(param.thisObject\r\n\t\t\t\t\t\t\t\t\t, \"newDot\"))\r\n\t\t\t\t\t\t\t\t\t.setColorFilter(BLACK);\r\n\r\n\t\t\t\t\t\t\t((TextView) getObjectField(param.thisObject\r\n\t\t\t\t\t\t\t\t\t, \"text\"))\r\n\t\t\t\t\t\t\t\t\t.setTextColor(BLACK);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\tFooterActionsViewBinderClass\r\n\t\t\t\t\t.after(\"bind\")\r\n\t\t\t\t\t.run(param -> {\r\n\t\t\t\t\t\tif (!isDark) {\r\n\t\t\t\t\t\t\tLinearLayout view = (LinearLayout) param.args[0];\r\n\t\t\t\t\t\t\tview.setBackgroundColor(mScrimBehindTint);\r\n\t\t\t\t\t\t\tview.setElevation(0); //remove elevation shadow\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t} catch (Throwable ignored) {\r\n\t\t}\r\n\r\n\t\ttry { //A14 Compose implementation of QS Footer actions\r\n//\t\t\tReflectedClass FooterActionsButtonViewModelClass = ReflectedClass.of(\"com.android.systemui.qs.footer.ui.viewmodel.FooterActionsButtonViewModel\", lpParam.classLoader);\r\n\t\t\tReflectedClass FooterActionsViewModelClass = ReflectedClass.of(\"com.android.systemui.qs.footer.ui.viewmodel.FooterActionsViewModel\", lpParam.classLoader);\r\n//\t\t\tReflectedClass FooterActionsKtClass = ReflectedClass.of(\"com.android.systemui.qs.footer.ui.compose.FooterActionsKt\", lpParam.classLoader);\r\n\t\t\tReflectedClass ThemeColorKtClass = ReflectedClass.of(\"com.android.compose.theme.ColorKt\", lpParam.classLoader);\r\n\t\t\tReflectedClass ExpandableControllerImplClass = ReflectedClass.of(\"com.android.compose.animation.ExpandableControllerImpl\", lpParam.classLoader);\r\n\r\n\t\t\tExpandableControllerImplClass\r\n\t\t\t\t\t.beforeConstruction()\r\n\t\t\t\t\t.run(param -> {\r\n\t\t\t\t\t\tif (!isDark) {\r\n\t\t\t\t\t\t\tReflectedClass GraphicsColorKtClass = ReflectedClass.of(\"androidx.compose.ui.graphics.ColorKt\", lpParam.classLoader);\r\n\t\t\t\t\t\t\tparam.args[1] = GraphicsColorKtClass.callStaticMethod(\"Color\", BLACK);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\tThemeColorKtClass\r\n\t\t\t\t\t.before(\"colorAttr\")\r\n\t\t\t\t\t.run(param -> {\r\n\t\t\t\t\t\tif (isDark) return;\r\n\r\n\t\t\t\t\t\tint code = (int) param.args[0];\r\n\r\n\t\t\t\t\t\tint result = 0;\r\n\r\n\t\t\t\t\t\tif (code == PM_LITE_BACKGROUND_CODE) {\r\n\t\t\t\t\t\t\tresult = colorActive;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t//numberbutton text\r\n\t\t\t\t\t\t\t\tresult = switch (mContext.getResources().getResourceName(code).split(\"/\")[1]) {\r\n\t\t\t\t\t\t\t\t\tcase \"underSurface\",\r\n\t\t\t\t\t\t\t\t\t\t \"onShadeActive\",\r\n\t\t\t\t\t\t\t\t\t\t \"shadeInactive\" ->\r\n\t\t\t\t\t\t\t\t\t\t\tcolorInactive; //button backgrounds\r\n\t\t\t\t\t\t\t\t\tcase \"onShadeInactiveVariant\" -> BLACK;\r\n\t\t\t\t\t\t\t\t\tdefault -> result;\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t} catch (Throwable ignored) {}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (result != 0) {\r\n\t\t\t\t\t\t\tReflectedClass GraphicsColorKtClass = ReflectedClass.of(\"androidx.compose.ui.graphics.ColorKt\", lpParam.classLoader);\r\n\t\t\t\t\t\t\tparam.setResult(GraphicsColorKtClass.callStaticMethod(\"Color\", result));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\tFooterActionsViewModelClass\r\n\t\t\t\t\t.afterConstruction()\r\n\t\t\t\t\t.run(param -> {\r\n\t\t\t\t\t\tif (isDark) return;\r\n\r\n\t\t\t\t\t\t//power button\r\n\t\t\t\t\t\tObject power = getObjectField(param.thisObject, \"power\");\r\n\t\t\t\t\t\tsetObjectField(power, \"iconTint\", colorInactive);\r\n\t\t\t\t\t\tsetObjectField(power, \"backgroundColor\", PM_LITE_BACKGROUND_CODE);\r\n\r\n\t\t\t\t\t\t//settings button\r\n\t\t\t\t\t\tsetObjectField(\r\n\t\t\t\t\t\t\t\tgetObjectField(param.thisObject, \"settings\"),\r\n\t\t\t\t\t\t\t\t\"iconTint\",\r\n\t\t\t\t\t\t\t\tBLACK);\r\n\r\n\t\t\t\t\t\t//we must use the classes defined in the apk. using our own will fail\r\n\t\t\t\t\t\tReflectedClass StateFlowImplClass = ReflectedClass.of(\"kotlinx.coroutines.flow.StateFlowImpl\", lpParam.classLoader);\r\n\t\t\t\t\t\tReflectedClass ReadonlyStateFlowClass = ReflectedClass.of(\"kotlinx.coroutines.flow.ReadonlyStateFlow\", lpParam.classLoader);\r\n\r\n\t\t\t\t\t\tObject zeroAlphaFlow = StateFlowImplClass.getClazz().getConstructor(Object.class).newInstance(0f);\r\n\t\t\t\t\t\tsetObjectField(param.thisObject, \"backgroundAlpha\", ReadonlyStateFlowClass.getClazz().getConstructors()[0].newInstance(zeroAlphaFlow));\r\n\t\t\t\t\t});\r\n\t\t} catch (Throwable ignored) {\r\n\t\t}\r\n\r\n\t\ttry { //A14 ap11 onwards - modern implementation of mobile icons\r\n\t\t\tReflectedClass ShadeCarrierGroupControllerClass = ReflectedClass.of(\"com.android.systemui.shade.carrier.ShadeCarrierGroupController\", lpParam.classLoader);\r\n\t\t\tReflectedClass MobileIconBinderClass = ReflectedClass.of(\"com.android.systemui.statusbar.pipeline.mobile.ui.binder.MobileIconBinder\", lpParam.classLoader);\r\n\r\n\t\t\tShadeCarrierGroupControllerClass\r\n\t\t\t\t\t.afterConstruction()\r\n\t\t\t\t\t.run(param -> ShadeCarrierGroupController = param.thisObject);\r\n\r\n\t\t\tMobileIconBinderClass\r\n\t\t\t\t\t.after(\"bind\")\r\n\t\t\t\t\t.run(param -> {\r\n\t\t\t\t\t\tif (param.args[1].getClass().getName().contains(\"ShadeCarrierGroupMobileIconViewModel\")) {\r\n\t\t\t\t\t\t\tModernShadeCarrierGroupMobileViews.add(param.getResult());\r\n\t\t\t\t\t\t\tif (!isDark) {\r\n\t\t\t\t\t\t\t\tint textColor = getColorAttrDefaultColor(mContext, android.R.attr.textColorPrimary);\r\n\t\t\t\t\t\t\t\tsetMobileIconTint(param.getResult(), textColor);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t} catch (Throwable ignored) {\r\n\t\t}\r\n\r\n\t\tif (ShadeHeaderControllerClass.getClazz() == null) {\r\n\t\t\tShadeHeaderControllerClass = ReflectedClass.of(\"com.android.systemui.shade.LargeScreenShadeHeaderController\", lpParam.classLoader);\r\n\t\t}\r\n\r\n\t\tQSCustomizerClass\r\n\t\t\t\t.afterConstruction()\r\n\t\t\t\t.run(param -> {\r\n\t\t\t\t\tif (!isDark) {\r\n\t\t\t\t\t\tViewGroup mainView = (ViewGroup) param.thisObject;\r\n\t\t\t\t\t\tfor (int i = 0; i < mainView.getChildCount(); i++) {\r\n\t\t\t\t\t\t\tmainView.getChildAt(i).setBackgroundColor(mScrimBehindTint);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\tShadeCarrierClass\r\n\t\t\t\t.after(\"updateState\")\r\n\t\t\t\t.run(param -> {\r\n\t\t\t\t\tif (!isDark) {\r\n\t\t\t\t\t\t((ImageView) getObjectField(param.thisObject\r\n\t\t\t\t\t\t\t\t, \"mMobileSignal\"))\r\n\t\t\t\t\t\t\t\t.setImageTintList(\r\n\t\t\t\t\t\t\t\t\t\tColorStateList.valueOf(BLACK)\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\tQSFooterViewClass\r\n\t\t\t\t.after(\"onFinishInflate\")\r\n\t\t\t\t.run(param -> {\r\n\t\t\t\t\tif (!isDark) {\r\n\t\t\t\t\t\t((TextView) getObjectField(param.thisObject\r\n\t\t\t\t\t\t\t\t, \"mBuildText\"))\r\n\t\t\t\t\t\t\t\t.setTextColor(BLACK);\r\n\r\n\t\t\t\t\t\t((ImageView) getObjectField(param.thisObject\r\n\t\t\t\t\t\t\t\t, \"mEditButton\"))\r\n\t\t\t\t\t\t\t\t.setColorFilter(BLACK);\r\n\r\n\t\t\t\t\t\tsetObjectField(\r\n\t\t\t\t\t\t\t\tgetObjectField(\r\n\t\t\t\t\t\t\t\t\t\tparam.thisObject\r\n\t\t\t\t\t\t\t\t\t\t, \"mPageIndicator\")\r\n\t\t\t\t\t\t\t\t, \"mTint\"\r\n\t\t\t\t\t\t\t\t, ColorStateList.valueOf(BLACK));\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\tReflectionConsumer updateResourcesHook = param -> {\r\n\t\t\tif (!isDark)\r\n\t\t\t\t((LinearLayout) getObjectField(param.thisObject, \"roundedContainer\"))\r\n\t\t\t\t\t\t.getBackground()\r\n\t\t\t\t\t\t.setTint(colorInactive);\r\n\t\t};\r\n\r\n\t\tBatteryStatusChipClass\r\n\t\t\t\t.afterConstruction()\r\n\t\t\t\t.run(updateResourcesHook);\r\n\r\n\t\tBatteryStatusChipClass\r\n\t\t\t\t.after(\"onConfigurationChanged\")\r\n\t\t\t\t.run(updateResourcesHook);\r\n\r\n\t\tBrightnessSliderViewClass\r\n\t\t\t\t.after(\"onFinishInflate\")\r\n\t\t\t\t.run(param -> {\r\n\t\t\t\t\tif (!isDark) {\r\n\t\t\t\t\t\t((LayerDrawable) callMethod(\r\n\t\t\t\t\t\t\t\tgetObjectField(param.thisObject, \"mSlider\")\r\n\t\t\t\t\t\t\t\t, \"getProgressDrawable\"))\r\n\t\t\t\t\t\t\t\t.findDrawableByLayerId(android.R.id.background)\r\n\t\t\t\t\t\t\t\t.setTint(Color.GRAY); //setting brightness slider background to gray\r\n\r\n\t\t\t\t\t\t((GradientDrawable) getObjectField(param.thisObject\r\n\t\t\t\t\t\t\t\t, \"mProgressDrawable\"))\r\n\t\t\t\t\t\t\t\t.setColor(colorActive); //progress drawable\r\n\r\n\r\n\t\t\t\t\t\tLayerDrawable progress = (LayerDrawable) callMethod(getObjectField(param.thisObject, \"mSlider\"), \"getProgressDrawable\");\r\n\t\t\t\t\t\tDrawableWrapper progressSlider = (DrawableWrapper) progress\r\n\t\t\t\t\t\t\t\t.findDrawableByLayerId(android.R.id.progress);\r\n\t\t\t\t\t\tLayerDrawable actualProgressSlider = (LayerDrawable) progressSlider.getDrawable();\r\n\t\t\t\t\t\t@SuppressLint(\"DiscouragedApi\")\r\n\t\t\t\t\t\tDrawable slider_icon = actualProgressSlider.findDrawableByLayerId(mContext.getResources().getIdentifier(\"slider_icon\", \"id\", mContext.getPackageName()));\r\n\t\t\t\t\t\tslider_icon.setTint(WHITE); //progress icon\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t//noinspection OptionalGetWithoutIsPresent\r\n\t\tunlockedScrimState = Arrays.stream(ScrimStateEnum.getClazz().getEnumConstants()).filter(c -> c.toString().equals(\"UNLOCKED\")).findFirst().get();\r\n\r\n\t\tReflectedClass.of(unlockedScrimState.getClass())\r\n\t\t\t\t.after(\"prepare\")\r\n\t\t\t\t.run(param -> setObjectField(unlockedScrimState, \"mBehindTint\", mScrimBehindTint));\r\n\r\n\t\tQSPanelControllerClass\r\n\t\t\t\t.afterConstruction()\r\n\t\t\t\t.run(param -> calculateColors());\r\n\r\n\t\tShadeHeaderControllerClass\r\n\t\t\t\t.after(\"onInit\")\r\n\t\t\t\t.run(param -> {\r\n\t\t\t\t\tView mView = (View) getObjectField(param.thisObject, \"mView\");\r\n\r\n\t\t\t\t\tObject iconManager = getObjectField(param.thisObject, \"iconManager\");\r\n\t\t\t\t\tObject batteryIcon = getObjectField(param.thisObject, \"batteryIcon\");\r\n\t\t\t\t\tObject configurationControllerListener = getObjectField(param.thisObject, \"configurationControllerListener\");\r\n\r\n\t\t\t\t\tReflectedClass.of(configurationControllerListener.getClass())\r\n\t\t\t\t\t\t\t.after(\"onConfigChanged\")\r\n\t\t\t\t\t\t\t.run(param1 -> {\r\n\t\t\t\t\t\t\t\tResources res = mContext.getResources();\r\n\r\n\t\t\t\t\t\t\t\tint textColor = getColorAttrDefaultColor(mContext, android.R.attr.textColorPrimary);\r\n\r\n\t\t\t\t\t\t\t\t((TextView) mView.findViewById(res.getIdentifier(\"clock\", \"id\", mContext.getPackageName()))).setTextColor(textColor);\r\n\t\t\t\t\t\t\t\t((TextView) mView.findViewById(res.getIdentifier(\"date\", \"id\", mContext.getPackageName()))).setTextColor(textColor);\r\n\r\n\t\t\t\t\t\t\t\ttry { //A14 ap11\r\n\t\t\t\t\t\t\t\t\tcallMethod(iconManager, \"setTint\", textColor, textColor);\r\n\t\t\t\t\t\t\t\t} catch (Throwable ignored) { //A14 older\r\n\t\t\t\t\t\t\t\t\tcallMethod(iconManager, \"setTint\", textColor);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\ttry { //A14 ap11\r\n\t\t\t\t\t\t\t\t\tModernShadeCarrierGroupMobileViews.forEach(view -> setMobileIconTint(view, textColor));\r\n\t\t\t\t\t\t\t\t\tsetModernSignalTextColor(textColor);\r\n\t\t\t\t\t\t\t\t} catch (Throwable ignored) {\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tfor (int i = 1; i <= 3; i++) {\r\n\t\t\t\t\t\t\t\t\tString id = String.format(\"carrier%s\", i);\r\n\r\n\t\t\t\t\t\t\t\t\t((TextView) getObjectField(mView.findViewById(res.getIdentifier(id, \"id\", mContext.getPackageName())), \"mCarrierText\")).setTextColor(textColor);\r\n\t\t\t\t\t\t\t\t\t((ImageView) getObjectField(mView.findViewById(res.getIdentifier(id, \"id\", mContext.getPackageName())), \"mMobileSignal\")).setImageTintList(ColorStateList.valueOf(textColor));\r\n\t\t\t\t\t\t\t\t\t((ImageView) getObjectField(mView.findViewById(res.getIdentifier(id, \"id\", mContext.getPackageName())), \"mMobileRoaming\")).setImageTintList(ColorStateList.valueOf(textColor));\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tcallMethod(batteryIcon, \"updateColors\", textColor, textColor, textColor);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t});\r\n\r\n\t\tQSContainerImplClass\r\n\t\t\t\t.after(\"updateResources\")\r\n\t\t\t\t.run(param -> {\r\n\t\t\t\t\tif (!isDark) {\r\n\t\t\t\t\t\ttry { //In case a compose implementation is in order, this block will fail\r\n\t\t\t\t\t\t\tResources res = mContext.getResources();\r\n\t\t\t\t\t\t\tViewGroup view = (ViewGroup) param.thisObject;\r\n\r\n\t\t\t\t\t\t\t@SuppressLint(\"DiscouragedApi\")\r\n\t\t\t\t\t\t\tView settings_button_container = view.findViewById(res.getIdentifier(\"settings_button_container\", \"id\", mContext.getPackageName()));\r\n\t\t\t\t\t\t\tsettings_button_container.getBackground().setTint(colorInactive);\r\n\r\n\t\t\t\t\t\t\t//Power Button on QS Footer\r\n\t\t\t\t\t\t\t@SuppressLint(\"DiscouragedApi\")\r\n\t\t\t\t\t\t\tViewGroup powerButton = view.findViewById(res.getIdentifier(\"pm_lite\", \"id\", mContext.getPackageName()));\r\n\t\t\t\t\t\t\t((ImageView) powerButton\r\n\t\t\t\t\t\t\t\t\t.getChildAt(0))\r\n\t\t\t\t\t\t\t\t\t.setColorFilter(colorInactive, PorterDuff.Mode.SRC_IN);\r\n\t\t\t\t\t\t\tpowerButton.getBackground().setTint(colorActive);\r\n\r\n\t\t\t\t\t\t\t@SuppressLint(\"DiscouragedApi\")\r\n\t\t\t\t\t\t\tImageView icon = settings_button_container.findViewById(res.getIdentifier(\"icon\", \"id\", mContext.getPackageName()));\r\n\t\t\t\t\t\t\ticon.setColorFilter(BLACK);\r\n\r\n\t\t\t\t\t\t\t((FrameLayout.LayoutParams)\r\n\t\t\t\t\t\t\t\t\t((ViewGroup) settings_button_container\r\n\t\t\t\t\t\t\t\t\t\t\t.getParent()\r\n\t\t\t\t\t\t\t\t\t).getLayoutParams()\r\n\t\t\t\t\t\t\t).setMarginEnd(0);\r\n\r\n\r\n\t\t\t\t\t\t\tViewGroup parent = (ViewGroup) settings_button_container.getParent();\r\n\t\t\t\t\t\t\tfor (int i = 0; i < 3; i++) //Security + Foreground services containers\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tparent.getChildAt(i).getBackground().setTint(colorInactive);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch (Throwable ignored) {\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\tQSIconViewImplClass\r\n\t\t\t\t.after(\"updateIcon\")\r\n\t\t\t\t.run(param -> {\r\n\t\t\t\t\tif (!isDark) {\r\n\t\t\t\t\t\tint color = switch (getIntField(param.args[1], \"state\")) {\r\n\t\t\t\t\t\t\tcase STATE_ACTIVE -> colorInactive;\r\n\t\t\t\t\t\t\tcase STATE_UNAVAILABLE -> colorFadedBlack;\r\n\t\t\t\t\t\t\tdefault -> BLACK;\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t((ImageView) param.args[0])\r\n\t\t\t\t\t\t\t\t.setImageTintList(\r\n\t\t\t\t\t\t\t\t\t\tColorStateList\r\n\t\t\t\t\t\t\t\t\t\t\t\t.valueOf(color));\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\tCentralSurfacesImplClass\r\n\t\t\t\t.afterConstruction()\r\n\t\t\t\t.run(param -> new Thread(() -> {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tSystemUtils.threadSleep(5000);\r\n\t\t\t\t\t\trebuildSysUI(true);\r\n\t\t\t\t\t} catch (Throwable ignored) {\r\n\t\t\t\t\t}\r\n\t\t\t\t}).start());\r\n\r\n\r\n\t\t//setting tile colors in light theme\r\n\t\tQSTileViewImplClass\r\n\t\t\t\t.afterConstruction()\r\n\t\t\t\t.run(param -> {\r\n\t\t\t\t\tif (isDark) return;\r\n\r\n\t\t\t\t\tsetObjectField(param.thisObject, \"colorActive\", colorActive);\r\n\t\t\t\t\tsetObjectField(param.thisObject, \"colorInactive\", colorInactive);\r\n\t\t\t\t\tsetObjectField(param.thisObject, \"colorUnavailable\", colorUnavailable);\r\n\r\n\t\t\t\t\tsetObjectField(param.thisObject, \"colorLabelActive\", WHITE);\r\n\t\t\t\t\tsetObjectField(param.thisObject, \"colorSecondaryLabelActive\", WHITE);\r\n\r\n\t\t\t\t\tsetObjectField(param.thisObject, \"colorLabelInactive\", BLACK);\r\n\t\t\t\t\tsetObjectField(param.thisObject, \"colorSecondaryLabelInactive\", BLACK);\r\n\r\n\t\t\t\t\tsetObjectField(param.thisObject, \"colorLabelInactive\", BLACK);\r\n\t\t\t\t\tsetObjectField(param.thisObject, \"colorSecondaryLabelInactive\", BLACK);\r\n\t\t\t\t});\r\n\r\n\t\tCentralSurfacesImplClass\r\n\t\t\t\t.after(\"updateTheme\")\r\n\t\t\t\t.run(param -> rebuildSysUI(false));\r\n\r\n\t\tScrimControllerClass\r\n\t\t\t\t.after(\"updateThemeColors\")\r\n\t\t\t\t.run(param -> calculateColors());\r\n\r\n\t\tScrimControllerClass\r\n\t\t\t\t.before(Pattern.compile(\"applyState.*\"))\r\n\t\t\t\t.run(param -> {\r\n\t\t\t\t\tboolean mClipsQsScrim = (boolean) getObjectField(param.thisObject, \"mClipsQsScrim\");\r\n\t\t\t\t\tif (mClipsQsScrim) {\r\n\t\t\t\t\t\tsetObjectField(param.thisObject, \"mBehindTint\", mScrimBehindTint);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t//region power menu aka GlobalActions\r\n\t\tGlobalActionsLayoutLiteClass\r\n\t\t\t\t.before(\"onLayout\")\r\n\t\t\t\t.run(param -> {\r\n\t\t\t\t\tif (!enablePowerMenuTheme || isDark) return;\r\n\r\n\t\t\t\t\t((View) param.thisObject)\r\n\t\t\t\t\t\t\t.findViewById(android.R.id.list)\r\n\t\t\t\t\t\t\t.getBackground()\r\n\t\t\t\t\t\t\t.setTint(mScrimBehindTint); //Layout background color\r\n\t\t\t\t});\r\n\r\n\t\tGlobalActionsDialogLiteEmergencyActionClass\r\n\t\t\t\t.after(\"create\")\r\n\t\t\t\t.run(param -> {\r\n\t\t\t\t\tif (!enablePowerMenuTheme || isDark) return;\r\n\r\n\t\t\t\t\t((TextView) ((View) param.getResult())\r\n\t\t\t\t\t\t\t.findViewById(android.R.id.message))\r\n\t\t\t\t\t\t\t.setTextColor(BLACK); //Emergency Text Color\r\n\t\t\t\t});\r\n\r\n\t\tGlobalActionsDialogLiteSinglePressActionClass\r\n\t\t\t\t.after(\"create\")\r\n\t\t\t\t.run(param -> {\r\n\t\t\t\t\tif (!enablePowerMenuTheme || isDark) return;\r\n\r\n\t\t\t\t\tView itemView = (View) param.getResult();\r\n\r\n\t\t\t\t\tImageView iconView = itemView.findViewById(android.R.id.icon);\r\n\r\n\t\t\t\t\ticonView\r\n\t\t\t\t\t\t\t.getDrawable()\r\n\t\t\t\t\t\t\t.setTint(colorInactive); //Icon color\r\n\r\n\t\t\t\t\ticonView\r\n\t\t\t\t\t\t\t.getBackground()\r\n\t\t\t\t\t\t\t.setTint(colorActive); //Button Color\r\n\r\n\t\t\t\t\t((TextView) itemView\r\n\t\t\t\t\t\t\t.findViewById(android.R.id.message))\r\n\t\t\t\t\t\t\t.setTextColor(BLACK); //Text Color\r\n\t\t\t\t});\r\n\t\t//endregion\r\n\r\n\t}\r\n\r\n\tprivate void setMobileIconTint(Object ModernStatusBarViewBinding, int textColor) {\r\n\t\tcallMethod(ModernStatusBarViewBinding, \"onIconTintChanged\", textColor, textColor);\r\n\t}\r\n\r\n\t@SuppressLint(\"DiscouragedApi\")\r\n\tprivate void setModernSignalTextColor(int textColor) {\r\n\t\tResources res = mContext.getResources();\r\n\r\n\t\tfor (View shadeCarrier : (View[]) getObjectField(ShadeCarrierGroupController, \"mCarrierGroups\")) {\r\n\t\t\ttry {\r\n\t\t\t\tshadeCarrier = shadeCarrier.findViewById(res.getIdentifier(\"carrier_combo\", \"id\", mContext.getPackageName()));\r\n\t\t\t\t((TextView) shadeCarrier.findViewById(res.getIdentifier(\"mobile_carrier_text\", \"id\", mContext.getPackageName()))).setTextColor(textColor);\r\n\t\t\t} catch (Throwable ignored) {\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void rebuildSysUI(boolean force) {\r\n\t\tboolean isCurrentlyDark = isDarkMode();\r\n\r\n\t\tif (isCurrentlyDark == isDark && !force) return;\r\n\r\n\t\tisDark = isCurrentlyDark;\r\n\r\n\t\tcalculateColors();\r\n\r\n\t\tXPLauncher.enqueueProxyCommand(proxy -> proxy.runCommand(\"cmd overlay disable com.google.android.systemui.gxoverlay; cmd overlay enable com.google.android.systemui.gxoverlay\"));\r\n\t}\r\n\r\n\t@SuppressLint(\"DiscouragedApi\")\r\n\tprivate void calculateColors() { //calculating dual-tone QS scrim color and tile colors\r\n\t\tmScrimBehindTint = mContext.getColor(\r\n\t\t\t\tisDark\r\n\t\t\t\t\t\t? android.R.color.system_neutral1_1000\r\n\t\t\t\t\t\t: android.R.color.system_neutral1_100);\r\n\r\n\t\ttry {\r\n\t\t\tsetObjectField(unlockedScrimState, \"mBehindTint\", mScrimBehindTint);\r\n\t\t} catch (Throwable ignored) {\r\n\t\t}\r\n\r\n\t\tif (!isDark) {\r\n\t\t\tcolorActive = mContext.getColor(android.R.color.system_accent1_600);\r\n\r\n\t\t\tcolorInactive = mContext.getColor(android.R.color.system_accent1_10);\r\n\r\n\t\t\tcolorUnavailable = applyAlpha(0.3f, colorInactive); //30% opacity of inactive color\r\n\t\t}\r\n\t}\r\n\r\n\tprivate boolean isDarkMode() {\r\n\t\treturn SystemUtils.isDarkMode();\r\n\t}\r\n\r\n\t@ColorInt\r\n\tpublic static int applyAlpha(float alpha, int inputColor) {\r\n\t\talpha *= Color.alpha(inputColor);\r\n\t\treturn Color.argb((int) (alpha), Color.red(inputColor), Color.green(inputColor),\r\n\t\t\t\tColor.blue(inputColor));\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean listensTo(String packageName) {\r\n\t\treturn listenPackage.equals(packageName) && !XPLauncher.isChildProcess;\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/ThemeManager_14.java b/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/ThemeManager_14.java
--- a/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/ThemeManager_14.java	(revision 0a7eeb082f43700d9c2e0e51b16abb7076c18b61)
+++ b/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/ThemeManager_14.java	(date 1734512819091)
@@ -102,8 +102,7 @@
 	@SuppressLint("DiscouragedApi")
 	@Override
 	public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpParam) {
-		if (!lightQSHeaderEnabled)
-			return; //light QS header pref update needs a systemui restart. so there's no point to load these if not enabled
+		if (!lightQSHeaderEnabled) return; //light QS header pref update needs a systemui restart. so there's no point to load these if not enabled
 
 		ReflectedClass QSTileViewImplClass = ReflectedClass.of("com.android.systemui.qs.tileimpl.QSTileViewImpl", lpParam.classLoader);
 		ReflectedClass ScrimControllerClass = ReflectedClass.of("com.android.systemui.statusbar.phone.ScrimController", lpParam.classLoader);
@@ -388,17 +387,19 @@
 								((TextView) mView.findViewById(res.getIdentifier("clock", "id", mContext.getPackageName()))).setTextColor(textColor);
 								((TextView) mView.findViewById(res.getIdentifier("date", "id", mContext.getPackageName()))).setTextColor(textColor);
 
-								try { //A14 ap11
+								try
+								{ //A14 ap11
 									callMethod(iconManager, "setTint", textColor, textColor);
-								} catch (Throwable ignored) { //A14 older
+								}
+								catch (Throwable ignored)
+								{ //A14 older
 									callMethod(iconManager, "setTint", textColor);
 								}
 
 								try { //A14 ap11
 									ModernShadeCarrierGroupMobileViews.forEach(view -> setMobileIconTint(view, textColor));
 									setModernSignalTextColor(textColor);
-								} catch (Throwable ignored) {
-								}
+								} catch (Throwable ignored){}
 
 								for (int i = 1; i <= 3; i++) {
 									String id = String.format("carrier%s", i);
@@ -420,19 +421,16 @@
 							Resources res = mContext.getResources();
 							ViewGroup view = (ViewGroup) param.thisObject;
 
-							@SuppressLint("DiscouragedApi")
 							View settings_button_container = view.findViewById(res.getIdentifier("settings_button_container", "id", mContext.getPackageName()));
 							settings_button_container.getBackground().setTint(colorInactive);
 
 							//Power Button on QS Footer
-							@SuppressLint("DiscouragedApi")
 							ViewGroup powerButton = view.findViewById(res.getIdentifier("pm_lite", "id", mContext.getPackageName()));
 							((ImageView) powerButton
 									.getChildAt(0))
 									.setColorFilter(colorInactive, PorterDuff.Mode.SRC_IN);
 							powerButton.getBackground().setTint(colorActive);
 
-							@SuppressLint("DiscouragedApi")
 							ImageView icon = settings_button_container.findViewById(res.getIdentifier("icon", "id", mContext.getPackageName()));
 							icon.setColorFilter(BLACK);
 
@@ -448,8 +446,7 @@
 							{
 								parent.getChildAt(i).getBackground().setTint(colorInactive);
 							}
-						} catch (Throwable ignored) {
-						}
+						} catch (Throwable ignored){}
 					}
 				});
 
@@ -476,12 +473,9 @@
 					try {
 						SystemUtils.threadSleep(5000);
 						rebuildSysUI(true);
-					} catch (Throwable ignored) {
-					}
+					} catch (Throwable ignored) {}
 				}).start());
 
-
-		//setting tile colors in light theme
 		QSTileViewImplClass
 				.afterConstruction()
 				.run(param -> {
@@ -499,6 +493,7 @@
 
 					setObjectField(param.thisObject, "colorLabelInactive", BLACK);
 					setObjectField(param.thisObject, "colorSecondaryLabelInactive", BLACK);
+
 				});
 
 		CentralSurfacesImplClass
@@ -510,7 +505,7 @@
 				.run(param -> calculateColors());
 
 		ScrimControllerClass
-				.before(Pattern.compile("applyState.*"))
+				.after(Pattern.compile("applyState.*"))
 				.run(param -> {
 					boolean mClipsQsScrim = (boolean) getObjectField(param.thisObject, "mClipsQsScrim");
 					if (mClipsQsScrim) {
@@ -560,7 +555,9 @@
 					((TextView) itemView
 							.findViewById(android.R.id.message))
 							.setTextColor(BLACK); //Text Color
+
 				});
+
 		//endregion
 
 	}
@@ -573,11 +570,13 @@
 	private void setModernSignalTextColor(int textColor) {
 		Resources res = mContext.getResources();
 
-		for (View shadeCarrier : (View[]) getObjectField(ShadeCarrierGroupController, "mCarrierGroups")) {
+		for(View shadeCarrier : (View[]) getObjectField(ShadeCarrierGroupController, "mCarrierGroups"))
+		{
 			try {
 				shadeCarrier = shadeCarrier.findViewById(res.getIdentifier("carrier_combo", "id", mContext.getPackageName()));
 				((TextView) shadeCarrier.findViewById(res.getIdentifier("mobile_carrier_text", "id", mContext.getPackageName()))).setTextColor(textColor);
-			} catch (Throwable ignored) {
+			}
+			catch (Throwable ignored){
 			}
 		}
 	}
@@ -603,8 +602,8 @@
 
 		try {
 			setObjectField(unlockedScrimState, "mBehindTint", mScrimBehindTint);
-		} catch (Throwable ignored) {
 		}
+		catch (Throwable ignored){}
 
 		if (!isDark) {
 			colorActive = mContext.getColor(android.R.color.system_accent1_600);
@@ -630,4 +629,6 @@
 	public boolean listensTo(String packageName) {
 		return listenPackage.equals(packageName) && !XPLauncher.isChildProcess;
 	}
+
+
 }
\ No newline at end of file
