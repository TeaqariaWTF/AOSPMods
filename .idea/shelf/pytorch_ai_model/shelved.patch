Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	(revision 70ae4b148c9d68164902904968f1acfda8fe8d63)
+++ b/.idea/vcs.xml	(date 1728794789283)
@@ -2,5 +2,6 @@
 <project version="4">
   <component name="VcsDirectoryMappings">
     <mapping directory="" vcs="Git" />
+    <mapping directory="$PROJECT_DIR$/Submodules/RangeSliderPreference" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/sh/siava/pixelxpert/service/RootProviderProxy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sh.siava.pixelxpert.service;\r\n\r\nimport android.app.Service;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.os.Binder;\r\nimport android.os.IBinder;\r\nimport android.os.RemoteException;\r\n\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.topjohnwu.superuser.Shell;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.concurrent.CountDownLatch;\r\n\r\nimport sh.siava.pixelxpert.IRootProviderProxy;\r\nimport sh.siava.pixelxpert.PixelXpert;\r\nimport sh.siava.pixelxpert.R;\r\nimport sh.siava.pixelxpert.modpacks.Constants;\r\nimport sh.siava.pixelxpert.utils.BitmapSubjectSegmenter;\r\n\r\npublic class RootProviderProxy extends Service {\r\n\t@Nullable\r\n\t@Override\r\n\tpublic IBinder onBind(Intent intent) {\r\n\t\treturn new RootProviderProxyIPC(this);\r\n\t}\r\n\r\n\tclass RootProviderProxyIPC extends IRootProviderProxy.Stub\r\n\t{\r\n\t\t/** @noinspection unused*/\r\n\t\tString TAG = getClass().getSimpleName();\r\n\r\n\t\tprivate final List<String> rootAllowedPacks;\r\n\t\tprivate final boolean rootGranted;\r\n\r\n\t\tprivate RootProviderProxyIPC(Context context)\r\n\t\t{\r\n\t\t\ttry {\r\n\t\t\t\tShell.setDefaultBuilder(Shell.Builder.create().setFlags(Shell.FLAG_MOUNT_MASTER));\r\n\t\t\t}\r\n\t\t\tcatch (Throwable ignored){}\r\n\t\t\trootGranted = Shell.getShell().isRoot();\r\n\r\n\t\t\tif(!rootGranted)\r\n\t\t\t{\r\n\t\t\t\tcontext.sendBroadcast(new Intent(Constants.ACTION_KSU_ACQUIRE_ROOT));\r\n\t\t\t}\r\n\r\n\t\t\trootAllowedPacks = Arrays.asList(context.getResources().getStringArray(R.array.root_requirement));\r\n\t\t}\r\n\r\n\t\t/** @noinspection RedundantThrows*/\r\n\t\t@Override\r\n\t\tpublic String[] runCommand(String command) throws RemoteException {\r\n\t\t\ttry {\r\n\t\t\t\tensureEnvironment();\r\n\r\n\t\t\t\tList<String> result = Shell.cmd(command).exec().getOut();\r\n\t\t\t\treturn result.toArray(new String[0]);\r\n\t\t\t}\r\n\t\t\tcatch (Throwable t)\r\n\t\t\t{\r\n\t\t\t\treturn new String[0];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic Bitmap extractSubject(Bitmap input) throws RemoteException {\r\n\t\t\tensureEnvironment();\r\n\r\n\t\t\tif(!PixelXpert.get().isCoreRootServiceBound())\r\n\t\t\t{\r\n\t\t\t\tPixelXpert.get().tryConnectRootService();\r\n\t\t\t}\r\n\r\n\t\t\tfinal Bitmap[] resultBitmap = new Bitmap[]{null};\r\n\t\t\tCountDownLatch resultWaiter = new CountDownLatch(1);\r\n\t\t\ttry {\r\n\t\t\t\t\tnew BitmapSubjectSegmenter(getApplicationContext()).segmentSubject(input, new BitmapSubjectSegmenter.SegmentResultListener() {\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic void onSuccess(Bitmap result) {\r\n\t\t\t\t\t\t\tresultBitmap[0] = result;\r\n\t\t\t\t\t\t\tresultWaiter.countDown();\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t@Override\r\n\t\t\t\t\t\tpublic void onFail() {\r\n\t\t\t\t\t\t\tresultWaiter.countDown();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\tresultWaiter.await();\r\n\t\t\t\treturn resultBitmap[0];\r\n\t\t\t} catch (Throwable ignored) {}\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tprivate void ensureEnvironment() throws RemoteException {\r\n\t\t\tif(!rootGranted)\r\n\t\t\t{\r\n\t\t\t\tthrow new RemoteException(\"Root permission denied\");\r\n\t\t\t}\r\n\r\n\t\t\tensureSecurity(Binder.getCallingUid());\r\n\t\t}\r\n\r\n\t\tprivate void ensureSecurity(int uid) throws RemoteException {\r\n\t\t\tfor (String packageName : getPackageManager().getPackagesForUid(uid)) {\r\n\t\t\t\tif(rootAllowedPacks.contains(packageName))\r\n\t\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthrow new RemoteException(\"You do know you're not supposed to use this service. So...\");\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sh/siava/pixelxpert/service/RootProviderProxy.java b/app/src/main/java/sh/siava/pixelxpert/service/RootProviderProxy.java
--- a/app/src/main/java/sh/siava/pixelxpert/service/RootProviderProxy.java	(revision 70ae4b148c9d68164902904968f1acfda8fe8d63)
+++ b/app/src/main/java/sh/siava/pixelxpert/service/RootProviderProxy.java	(date 1728796163528)
@@ -7,7 +7,9 @@
 import android.os.Binder;
 import android.os.IBinder;
 import android.os.RemoteException;
+import android.util.Log;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 import com.topjohnwu.superuser.Shell;
@@ -16,11 +18,16 @@
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
 
+import dev.eren.removebg.RemoveBg;
+import kotlin.Unit;
+import kotlin.coroutines.Continuation;
+import kotlin.coroutines.CoroutineContext;
+import kotlinx.coroutines.Dispatchers;
+import kotlinx.coroutines.flow.FlowCollector;
 import sh.siava.pixelxpert.IRootProviderProxy;
 import sh.siava.pixelxpert.PixelXpert;
 import sh.siava.pixelxpert.R;
 import sh.siava.pixelxpert.modpacks.Constants;
-import sh.siava.pixelxpert.utils.BitmapSubjectSegmenter;
 
 public class RootProviderProxy extends Service {
 	@Nullable
@@ -77,10 +84,32 @@
 				PixelXpert.get().tryConnectRootService();
 			}
 
-			final Bitmap[] resultBitmap = new Bitmap[]{null};
+			RemoveBg r = new RemoveBg(getApplicationContext());
+				final Bitmap[] resultBitmap = new Bitmap[]{null};
 			CountDownLatch resultWaiter = new CountDownLatch(1);
 			try {
-					new BitmapSubjectSegmenter(getApplicationContext()).segmentSubject(input, new BitmapSubjectSegmenter.SegmentResultListener() {
+				Bitmap bb = (Bitmap) r.clearBackground(input).collect(new FlowCollector<>() {
+					@Nullable
+					@Override
+					public Object emit(Bitmap bitmap, @NonNull Continuation<? super Unit> continuation) {
+						Log.d(TAG, "emit: done remove");
+						resultBitmap[0] = bitmap;
+						return bitmap;
+					}
+				}, new Continuation<>() {
+					@NonNull
+					@Override
+					public CoroutineContext getContext() {
+						return Dispatchers.getDefault();
+					}
+
+					@Override
+					public void resumeWith(@NonNull Object o) {
+
+					}
+				});
+
+/*				new BitmapSubjectSegmenter(getApplicationContext()).segmentSubject(input, new BitmapSubjectSegmenter.SegmentResultListener() {
 						@Override
 						public void onSuccess(Bitmap result) {
 							resultBitmap[0] = result;
@@ -91,10 +120,11 @@
 						public void onFail() {
 							resultWaiter.countDown();
 						}
-					});
-				resultWaiter.await();
+					});*/
 				return resultBitmap[0];
-			} catch (Throwable ignored) {}
+			} catch (Throwable ignored) {
+				Log.e(TAG, "extractSubject: ", ignored);
+			}
 			return null;
 		}
 
Index: app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sh.siava.pixelxpert.modpacks.systemui;\r\n\r\nimport static android.view.View.GONE;\r\nimport static android.view.View.VISIBLE;\r\nimport static de.robv.android.xposed.XposedBridge.hookAllConstructors;\r\nimport static de.robv.android.xposed.XposedBridge.hookAllMethods;\r\nimport static de.robv.android.xposed.XposedHelpers.callMethod;\r\nimport static de.robv.android.xposed.XposedHelpers.findClass;\r\nimport static de.robv.android.xposed.XposedHelpers.findClassIfExists;\r\nimport static de.robv.android.xposed.XposedHelpers.getFloatField;\r\nimport static de.robv.android.xposed.XposedHelpers.getObjectField;\r\nimport static sh.siava.pixelxpert.modpacks.XPrefs.Xprefs;\r\nimport static sh.siava.pixelxpert.modpacks.utils.toolkit.ReflectionTools.reAddView;\r\nimport static sh.siava.pixelxpert.modpacks.utils.toolkit.ReflectionTools.tryHookAllConstructors;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.WallpaperManager;\r\nimport android.content.Context;\r\nimport android.content.res.Resources;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Color;\r\nimport android.graphics.Rect;\r\nimport android.graphics.drawable.BitmapDrawable;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.graphics.drawable.LayerDrawable;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.FrameLayout;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.util.Arrays;\r\n\r\nimport de.robv.android.xposed.XC_MethodHook;\r\nimport de.robv.android.xposed.callbacks.XC_LoadPackage;\r\nimport sh.siava.pixelxpert.modpacks.Constants;\r\nimport sh.siava.pixelxpert.modpacks.XPLauncher;\r\nimport sh.siava.pixelxpert.modpacks.XposedModPack;\r\nimport sh.siava.pixelxpert.modpacks.utils.toolkit.ReflectionTools;\r\n\r\n/** @noinspection RedundantThrows, SameParameterValue */\r\npublic class DepthWallpaper extends XposedModPack {\r\n\tprivate static final String listenPackage = Constants.SYSTEM_UI_PACKAGE;\r\n\tprivate static boolean lockScreenSubjectCacheValid = false;\r\n\tprivate Object mScrimController;\r\n\tprivate static boolean DWallpaperEnabled = false;\r\n\tprivate static int DWOpacity = 192;\r\n\r\n\tprivate static boolean DWonAOD = false;\r\n\tprivate FrameLayout mLockScreenSubject;\r\n\tprivate Drawable mSubjectDimmingOverlay;\r\n\tprivate FrameLayout mWallpaperBackground;\r\n\tprivate FrameLayout mWallpaperBitmapContainer;\r\n\tprivate FrameLayout mWallpaperDimmingOverlay;\r\n\tprivate boolean mLayersCreated = false;\r\n\tpublic DepthWallpaper(Context context) {\r\n\t\tsuper(context);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void updatePrefs(String... Key) {\r\n\t\tDWallpaperEnabled = Xprefs.getBoolean(\"DWallpaperEnabled\", false);\r\n\t\tDWOpacity = Xprefs.getSliderInt(\"DWOpacity\", 192);\r\n\t\tDWonAOD = Xprefs.getBoolean(\"DWonAOD\", false);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpParam) throws Throwable {\r\n\t\tClass<?> QSImplClass = findClassIfExists(\"com.android.systemui.qs.QSImpl\", lpParam.classLoader);\r\n\t\tif(QSImplClass == null) //Older versions of QS\r\n\t\t{\r\n\t\t\tQSImplClass = findClass(\"com.android.systemui.qs.QSFragment\", lpParam.classLoader);\r\n\t\t}\r\n\r\n\t\tClass<?> CanvasEngineClass = findClass(\"com.android.systemui.wallpapers.ImageWallpaper$CanvasEngine\", lpParam.classLoader);\r\n\t\tClass<?> CentralSurfacesImplClass = findClass(\"com.android.systemui.statusbar.phone.CentralSurfacesImpl\", lpParam.classLoader);\r\n\t\tClass<?> ScrimControllerClass = findClass(\"com.android.systemui.statusbar.phone.ScrimController\", lpParam.classLoader);\r\n\t\tClass<?> ScrimViewClass = findClass(\"com.android.systemui.scrim.ScrimView\", lpParam.classLoader);\r\n\r\n\r\n\t\tClass<?> AodBurnInLayerClass = findClassIfExists(\"com.android.systemui.keyguard.ui.view.layout.sections.AodBurnInLayer\", lpParam.classLoader);\r\n\t\ttryHookAllConstructors(AodBurnInLayerClass, new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable { //A15 compose keyguard\r\n\t\t\t\tView entryV = (View) param.thisObject;\r\n\r\n\t\t\t\tif(!DWallpaperEnabled) return;\r\n\r\n\t\t\t\tResources res = mContext.getResources();\r\n\r\n\t\t\t\tentryV.addOnAttachStateChangeListener(new View.OnAttachStateChangeListener() {\r\n\t\t\t\t\t@SuppressLint(\"DiscouragedApi\")\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void onViewAttachedToWindow(@NonNull View v) {\r\n\t\t\t\t\t\tReflectionTools.runDelayedOnMainThread(entryV, 1000, () -> {\r\n\t\t\t\t\t\t\tViewGroup rootView = (ViewGroup) entryV.getParent();\r\n\r\n\t\t\t\t\t\t\tif(!mLayersCreated) {\r\n\t\t\t\t\t\t\t\tcreateLayers();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treAddView(rootView, mLockScreenSubject, 0);\r\n\t\t\t\t\t\t\treAddView(rootView, rootView.findViewById(res.getIdentifier(\"lockscreen_clock_view_large\", \"id\", mContext.getPackageName())), 0);\r\n\t\t\t\t\t\t\treAddView(rootView, rootView.findViewById(res.getIdentifier(\"lockscreen_clock_view\", \"id\", mContext.getPackageName())),0);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic void onViewDetachedFromWindow(@NonNull View v) {\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(ScrimViewClass, \"setViewAlpha\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void beforeHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(!mLayersCreated) return;\r\n\r\n\t\t\t\tif(DWonAOD\r\n\t\t\t\t\t\t&& !getObjectField(mScrimController, \"mState\").toString().equals(\"KEYGUARD\")) {\r\n\t\t\t\t\tmLockScreenSubject.post(() -> mLockScreenSubject.setAlpha(DWOpacity));\r\n\t\t\t\t}\r\n\t\t\t\telse if(getObjectField(mScrimController, \"mNotificationsScrim\").equals(param.thisObject)) //instead of using the mScrimName since older ones don't have that field\r\n\t\t\t\t{\r\n\t\t\t\t\tfloat mScrimBehindAlphaKeyguard = getFloatField(mScrimController, \"mScrimBehindAlphaKeyguard\");\r\n\r\n\t\t\t\t\tfloat notificationAlpha = (float)param.args[0];\r\n\r\n\t\t\t\t\tif(notificationAlpha < mScrimBehindAlphaKeyguard)\r\n\t\t\t\t\t\tnotificationAlpha = 0;\r\n\r\n\t\t\t\t\tfloat subjectAlpha = (notificationAlpha > mScrimBehindAlphaKeyguard)\r\n\t\t\t\t\t\t\t? (1f - notificationAlpha) / (1f - mScrimBehindAlphaKeyguard)\r\n\t\t\t\t\t\t\t: 1f;\r\n\r\n\t\t\t\t\tmLockScreenSubject.post(() -> mLockScreenSubject.setAlpha(subjectAlpha));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(CentralSurfacesImplClass, \"start\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(!DWallpaperEnabled) return;\r\n\r\n\t\t\t\tResources res = mContext.getResources();\r\n\r\n\t\t\t\tView scrimBehind = (View) getObjectField(mScrimController, \"mScrimBehind\");\r\n\t\t\t\tViewGroup rootView = (ViewGroup) scrimBehind.getParent();\r\n\r\n\t\t\t\t@SuppressLint(\"DiscouragedApi\")\r\n\t\t\t\tViewGroup targetView = rootView.findViewById(res.getIdentifier(\"notification_container_parent\", \"id\", mContext.getPackageName()));\r\n\r\n\t\t\t\tif(!mLayersCreated) {\r\n\t\t\t\t\tcreateLayers();\r\n\t\t\t\t}\r\n\r\n\t\t\t\treAddView(rootView, mWallpaperBackground, 0);\r\n\r\n\t\t\t\ttargetView.addView(mLockScreenSubject,1);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(CanvasEngineClass, \"onSurfaceDestroyed\", new XC_MethodHook() { //lockscreen wallpaper changed\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(DWallpaperEnabled && isLockScreenWallpaper(param.thisObject))\r\n\t\t\t\t{\r\n\t\t\t\t\tinvalidateLSWSC();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(CanvasEngineClass, \"onCreate\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(\r\n\t\t\t\t\t\tcallMethod(\r\n\t\t\t\t\t\t\t\tgetObjectField(param.thisObject, \"mWallpaperManager\"),\r\n\t\t\t\t\t\t\t\t\"getWallpaperInfo\", WallpaperManager.FLAG_LOCK)\r\n\t\t\t\t\t\t\t\t!= null) //it's live wallpaper. we can't use that\r\n\t\t\t\t{\r\n\t\t\t\t\tinvalidateLSWSC();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tfinal Thread[] wallpaperProcessorThread = {null};\r\n\t\thookAllMethods(CanvasEngineClass, \"drawFrameOnCanvas\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif(wallpaperProcessorThread[0] != null)\r\n\t\t\t\t{\r\n\t\t\t\t\twallpaperProcessorThread[0].interrupt();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(DWallpaperEnabled && isLockScreenWallpaper(param.thisObject))\r\n\t\t\t\t{\r\n\t\t\t\t\twallpaperProcessorThread[0] =new Thread(() -> {\r\n\t\t\t\t\t\t\tBitmap wallpaperBitmap = Bitmap.createBitmap((Bitmap) param.args[0]);\r\n\r\n\t\t\t\t\t\t\tboolean cacheIsValid = assertCache(wallpaperBitmap);\r\n\r\n\t\t\t\t\t\t\tRect displayBounds =  ((Context) callMethod(param.thisObject, \"getDisplayContext\")).getSystemService(WindowManager.class)\r\n\t\t\t\t\t\t\t\t\t.getCurrentWindowMetrics()\r\n\t\t\t\t\t\t\t\t\t.getBounds();\r\n\r\n\t\t\t\t\t\t\tfloat ratioW = 1f * displayBounds.width() / wallpaperBitmap.getWidth();\r\n\t\t\t\t\t\t\tfloat ratioH = 1f * displayBounds.height() / wallpaperBitmap.getHeight();\r\n\r\n\t\t\t\t\t\t\tint desiredHeight = Math.round(Math.max(ratioH, ratioW) * wallpaperBitmap.getHeight());\r\n\t\t\t\t\t\t\tint desiredWidth = Math.round(Math.max(ratioH, ratioW) * wallpaperBitmap.getWidth());\r\n\r\n\t\t\t\t\t\t\tint xPixelShift = (desiredWidth - displayBounds.width()) / 2;\r\n\t\t\t\t\t\t\tint yPixelShift = (desiredHeight - displayBounds.height()) / 2;\r\n\r\n\t\t\t\t\t\t\tBitmap scaledWallpaperBitmap = Bitmap.createScaledBitmap(wallpaperBitmap, desiredWidth, desiredHeight, true);\r\n\r\n\t\t\t\t\t\t\t//crop to display bounds\r\n\t\t\t\t\t\t\tscaledWallpaperBitmap = Bitmap.createBitmap(scaledWallpaperBitmap, xPixelShift, yPixelShift, displayBounds.width(), displayBounds.height());\r\n\t\t\t\t\t\t\tBitmap finalScaledWallpaperBitmap = Bitmap.createBitmap(scaledWallpaperBitmap);\r\n\r\n\t\t\t\t\t\t\tif(!mLayersCreated) {\r\n\t\t\t\t\t\t\t\tcreateLayers();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmWallpaperBackground.post(() -> mWallpaperBitmapContainer.setBackground(new BitmapDrawable(mContext.getResources(), finalScaledWallpaperBitmap)));\r\n\r\n\t\t\t\t\t\tif(!cacheIsValid) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tString cachePath = Constants.getLockScreenSubjectCachePath(mContext);\r\n\t\t\t\t\t\t\t\tBitmap subjectBitmap = XPLauncher.getRootProviderProxy().extractSubject(finalScaledWallpaperBitmap);\r\n\r\n\t\t\t\t\t\t\t\tif(subjectBitmap != null) {\r\n\t\t\t\t\t\t\t\t\tFileOutputStream subjectOutputStream = new FileOutputStream(cachePath);\r\n\t\t\t\t\t\t\t\t\tsubjectBitmap.compress(Bitmap.CompressFormat.PNG, 100, subjectOutputStream);\r\n\t\t\t\t\t\t\t\t\tsubjectOutputStream.close();\r\n\r\n\t\t\t\t\t\t\t\t\tThread.sleep(500); //letting the filesystem settle down\r\n\r\n\t\t\t\t\t\t\t\t\tsetDepthWallpaper();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} catch (Throwable ignored) {}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\twallpaperProcessorThread[0] = null;\r\n\t\t\t\t\t});\r\n\t\t\t\t\twallpaperProcessorThread[0].start();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllConstructors(ScrimControllerClass, new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tmScrimController = param.thisObject;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(ScrimControllerClass, \"applyAndDispatchState\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void afterHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tsetDepthWallpaper();\r\n\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\thookAllMethods(QSImplClass, \"setQsExpansion\", new XC_MethodHook() {\r\n\t\t\t@Override\r\n\t\t\tprotected void beforeHookedMethod(MethodHookParam param) throws Throwable {\r\n\t\t\t\tif((boolean) callMethod(param.thisObject, \"isKeyguardState\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tsetDepthWallpaper();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate boolean assertCache(Bitmap wallpaperBitmap) {\r\n\r\n\t\tboolean cacheIsValid = false;\r\n\t\ttry\r\n\t\t{\r\n\t\t\tFile wallpaperCacheFile = new File(Constants.getLockScreenBitmapCachePath(mContext));\r\n\r\n\t\t\tByteArrayOutputStream compressedBitmap = new ByteArrayOutputStream();\r\n\t\t\twallpaperBitmap.compress(Bitmap.CompressFormat.JPEG, 100, compressedBitmap);\r\n\t\t\tif(wallpaperCacheFile.exists())\r\n\t\t\t{\r\n\t\t\t\tFileInputStream cacheStream = new FileInputStream(wallpaperCacheFile);\r\n\r\n\t\t\t\tif(Arrays.equals(cacheStream.readAllBytes(), compressedBitmap.toByteArray()))\r\n\t\t\t\t{\r\n\t\t\t\t\tcacheIsValid = true;\r\n\t\t\t\t}\r\n\t\t\t\tcacheStream.close();\r\n\t\t\t}\r\n\r\n\t\t\tif(!cacheIsValid)\r\n\t\t\t{\r\n\t\t\t\tFileOutputStream newCacheStream = new FileOutputStream(wallpaperCacheFile);\r\n\t\t\t\tcompressedBitmap.writeTo(newCacheStream);\r\n\t\t\t\tnewCacheStream.close();\r\n\t\t\t}\r\n\t\t\tcompressedBitmap.close();\r\n\t\t}\r\n\t\tcatch (Throwable ignored)\r\n\t\t{}\r\n\r\n\t\tif(!cacheIsValid)\r\n\t\t{\r\n\t\t\tinvalidateLSWSC();\r\n\t\t}\r\n\r\n\t\treturn cacheIsValid;\r\n\t}\r\n\r\n\tprivate void createLayers() {\r\n\t\tmWallpaperBackground = new FrameLayout(mContext);\r\n\t\tmWallpaperDimmingOverlay = new FrameLayout(mContext);\r\n\t\tmWallpaperBitmapContainer = new FrameLayout(mContext);\r\n\t\tFrameLayout.LayoutParams lpw = new FrameLayout.LayoutParams(-1, -1);\r\n\r\n\t\tmWallpaperDimmingOverlay.setBackgroundColor(Color.BLACK);\r\n\t\tmWallpaperDimmingOverlay.setLayoutParams(lpw);\r\n\t\tmWallpaperBitmapContainer.setLayoutParams(lpw);\r\n\r\n\t\tmWallpaperBackground.addView(mWallpaperBitmapContainer);\r\n\t\tmWallpaperBackground.addView(mWallpaperDimmingOverlay);\r\n\t\tmWallpaperBackground.setLayoutParams(lpw);\r\n\r\n\t\tmLockScreenSubject = new FrameLayout(mContext);\r\n\t\tFrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(-1, -1);\r\n\t\tmLockScreenSubject.setLayoutParams(lp);\r\n\r\n\t\tmLockScreenSubject.setId(View.generateViewId()); //a fake ID so that it can be added to constrained layout\r\n\r\n\t\tmLayersCreated = true;\r\n\t}\r\n\r\n\tprivate boolean isLockScreenWallpaper(Object canvasEngine)\r\n\t{\r\n\t\treturn (getWallpaperFlag(canvasEngine)\r\n\t\t\t\t& WallpaperManager.FLAG_LOCK)\r\n\t\t\t\t== WallpaperManager.FLAG_LOCK;\r\n\t}\r\n\tprivate void setDepthWallpaper()\r\n\t{\r\n\t\tString state = getObjectField(mScrimController, \"mState\").toString();\r\n\t\tboolean showSubject = DWallpaperEnabled\r\n\t\t\t\t&&\r\n\t\t\t\t(\r\n\t\t\t\t\t\tstate.equals(\"KEYGUARD\")\r\n\t\t\t\t\t\t||\r\n\t\t\t\t\t\t\t\t(DWonAOD\r\n\t\t\t\t\t\t\t\t\t\t&&\r\n\t\t\t\t\t\t\t\t\t\t(state.equals(\"AOD\") || state.equals(\"PULSING\"))\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\tif(showSubject) {\r\n\t\t\tif(!lockScreenSubjectCacheValid && isSubjectCacheAvailable())\r\n\t\t\t{\r\n\t\t\t\ttry (FileInputStream inputStream = new FileInputStream(Constants.getLockScreenSubjectCachePath(mContext)))\r\n\t\t\t\t{\r\n\t\t\t\t\tDrawable bitmapDrawable = BitmapDrawable.createFromStream(inputStream, \"\");\r\n\t\t\t\t\tbitmapDrawable.setAlpha(255);\r\n\r\n\t\t\t\t\tmSubjectDimmingOverlay = bitmapDrawable.getConstantState().newDrawable().mutate();\r\n\t\t\t\t\tmSubjectDimmingOverlay.setTint(Color.BLACK);\r\n\r\n\t\t\t\t\tmLockScreenSubject.setBackground(new LayerDrawable(new Drawable[]{bitmapDrawable, mSubjectDimmingOverlay}));\r\n\t\t\t\t\tlockScreenSubjectCacheValid = true;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (Throwable ignored) {}\r\n\t\t\t}\r\n\r\n\t\t\tif(lockScreenSubjectCacheValid) {\r\n\t\t\t\tmLockScreenSubject.getBackground().setAlpha(DWOpacity);\r\n\r\n\t\t\t\tif(!state.equals(\"KEYGUARD\")) { //AOD\r\n\t\t\t\t\tmSubjectDimmingOverlay.setAlpha(192 /*Math.round(192 * (DWOpacity / 255f))*/);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//this is the dimmed wallpaper coverage\r\n\t\t\t\t\tmSubjectDimmingOverlay.setAlpha(Math.round(getFloatField(mScrimController, \"mScrimBehindAlphaKeyguard\") * 240)); //A tad bit lower than max. show it a bit lighter than other stuff\r\n\t\t\t\t\tmWallpaperDimmingOverlay.setAlpha(getFloatField(mScrimController, \"mScrimBehindAlphaKeyguard\"));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmWallpaperBackground.setVisibility(VISIBLE);\r\n\t\t\t\tmLockScreenSubject.setVisibility(VISIBLE);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(mLayersCreated)\r\n\t\t{\r\n\t\t\tmLockScreenSubject.setVisibility(GONE);\r\n\r\n\t\t\tif (state.equals(\"UNLOCKED\")) {\r\n\t\t\t\tmWallpaperBackground.setVisibility(GONE);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate boolean isSubjectCacheAvailable() {\r\n\t\ttry {\r\n\t\t\treturn new File(Constants.getLockScreenSubjectCachePath(mContext)).length() > 0;\r\n\t\t} catch (Exception e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate int getWallpaperFlag(Object canvasEngine) {\r\n\t\treturn (int) callMethod(canvasEngine, \"getWallpaperFlags\");\r\n\t}\r\n\r\n\tprivate void invalidateLSWSC() //invalidate lock screen wallpaper subject cache\r\n\t{\r\n\t\tlockScreenSubjectCacheValid = false;\r\n\t\tif(mLayersCreated) {\r\n\t\t\tmLockScreenSubject.post(() -> {\r\n\t\t\t\tmLockScreenSubject.setVisibility(GONE);\r\n\t\t\t\tmLockScreenSubject.setBackground(null);\r\n\t\t\t\tmWallpaperBackground.setVisibility(GONE);\r\n\t\t\t\tmWallpaperBitmapContainer.setBackground(null);\r\n\t\t\t});\r\n\t\t}\r\n\t\ttry {\r\n\t\t\t//noinspection ResultOfMethodCallIgnored\r\n\t\t\tnew File(Constants.getLockScreenSubjectCachePath(mContext)).delete();\r\n\t\t}\r\n\t\tcatch (Throwable ignored){}\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean listensTo(String packageName) {\r\n\t\treturn listenPackage.equals(packageName) && !XPLauncher.isChildProcess;\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java b/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java
--- a/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java	(revision 70ae4b148c9d68164902904968f1acfda8fe8d63)
+++ b/app/src/main/java/sh/siava/pixelxpert/modpacks/systemui/DepthWallpaper.java	(date 1728795224306)
@@ -29,6 +29,7 @@
 import android.widget.FrameLayout;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
@@ -38,6 +39,11 @@
 
 import de.robv.android.xposed.XC_MethodHook;
 import de.robv.android.xposed.callbacks.XC_LoadPackage;
+import dev.eren.removebg.RemoveBg;
+import kotlin.Unit;
+import kotlin.coroutines.Continuation;
+import kotlin.coroutines.CoroutineContext;
+import kotlinx.coroutines.flow.FlowCollector;
 import sh.siava.pixelxpert.modpacks.Constants;
 import sh.siava.pixelxpert.modpacks.XPLauncher;
 import sh.siava.pixelxpert.modpacks.XposedModPack;
@@ -235,6 +241,8 @@
 						if(!cacheIsValid) {
 							try {
 								String cachePath = Constants.getLockScreenSubjectCachePath(mContext);
+
+
 								Bitmap subjectBitmap = XPLauncher.getRootProviderProxy().extractSubject(finalScaledWallpaperBitmap);
 
 								if(subjectBitmap != null) {
Index: gradle/libs.versions.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[versions]\r\nactivity = \"1.9.2\"\r\nannotation = \"1.8.2\"\r\nappcompat = \"1.7.0\"\r\ncardview = \"1.0.0\"\r\ncollapsingtoolbarlayoutSubtitle = \"1.5.0\"\r\ncolorpicker = \"1.1.0\"\r\ncommonsText = \"1.11.0\"\r\nconcurrentFutures = \"1.2.0\"\r\nconstraintlayout = \"2.1.4\"\r\ncoreSplashscreen = \"1.0.1\"\r\ngradle = \"8.5.2\"\r\nmarkdown = \"0.19.0\"\r\nlibsuVersion = \"5.2.2\"\r\nandroid-material = \"1.12.0\"\r\nnavigationUiKtxVersion = \"2.8.1\"\r\nnavigationFragmentKtxVersion = \"2.8.1\"\r\nobjenesis = \"3.3\"\r\nntpClient = \"0.0.1-alpha11\"\r\npersianDateTime = \"4.2.1\"\r\nplayServicesBase = \"18.5.0\"\r\nplayServicesMlkitSubjectSegmentation = \"16.0.0-beta1\"\r\nrecyclerview = \"1.3.2\"\r\npreferenceKtx = \"1.2.1\"\r\nremotepreferences = \"0.8\"\r\nswiperefreshlayout = \"1.2.0-alpha01\"\r\nuiGeometry = \"1.7.2\"\r\nworkRuntime = \"2.9.1\"\r\nkotlin = \"1.8.0\"\r\n\r\n[libraries]\r\nandroidx-activity = { module = \"androidx.activity:activity\", version.ref = \"activity\" }\r\nandroidx-annotation = { module = \"androidx.annotation:annotation\", version.ref = \"annotation\" }\r\nandroidx-appcompat = { module = \"androidx.appcompat:appcompat\", version.ref = \"appcompat\" }\r\nandroidx-cardview = { module = \"androidx.cardview:cardview\", version.ref = \"cardview\" }\r\nandroidx-constraintlayout = { module = \"androidx.constraintlayout:constraintlayout\", version.ref = \"constraintlayout\" }\r\nandroidx-core-splashscreen = { module = \"androidx.core:core-splashscreen\", version.ref = \"coreSplashscreen\" }\r\nandroidx-preference-ktx = { module = \"androidx.preference:preference-ktx\", version.ref = \"preferenceKtx\" }\r\nandroidx-recyclerview = { module = \"androidx.recyclerview:recyclerview\", version.ref = \"recyclerview\" }\r\nandroidx-ui-geometry = { module = \"androidx.compose.ui:ui-geometry\", version.ref = \"uiGeometry\" }\r\nandroidx-work-runtime = { module = \"androidx.work:work-runtime\", version.ref = \"workRuntime\" }\r\nandroidx-concurrent-futures = { module = \"androidx.concurrent:concurrent-futures\", version.ref = \"concurrentFutures\" }\r\ncollapsingtoolbarlayout-subtitle = { module = \"com.hendraanggrian.material:collapsingtoolbarlayout-subtitle\", version.ref = \"collapsingtoolbarlayoutSubtitle\" }\r\ncolorpicker = { module = \"com.jaredrummler:colorpicker\", version.ref = \"colorpicker\" }\r\napache-commons-text = { module = \"org.apache.commons:commons-text\", version.ref = \"commonsText\" }\r\ngradle = { module = \"com.android.tools.build:gradle\", version.ref = \"gradle\" }\r\nkotlin = { module = \"org.jetbrains.kotlin:kotlin-gradle-plugin\", version.ref = \"kotlin\"}\r\nmarkdown = { module = \"com.github.tiagohm.MarkdownView:library\", version.ref = \"markdown\" }\r\nandroid-material = { module = \"com.google.android.material:material\", version.ref = \"android-material\" }\r\nnavigation-fragment-ktx = { module = \"androidx.navigation:navigation-fragment-ktx\", version.ref = \"navigationFragmentKtxVersion\" }\r\nnavigation-ui-ktx = { module = \"androidx.navigation:navigation-ui-ktx\", version.ref = \"navigationUiKtxVersion\" }\r\nlibsuCore = { module = \"com.github.topjohnwu.libsu:core\", version.ref = \"libsuVersion\" }\r\nlibsuNIO = { module = \"com.github.topjohnwu.libsu:nio\", version.ref = \"libsuVersion\" }\r\nlibsuService = { module = \"com.github.topjohnwu.libsu:service\", version.ref = \"libsuVersion\" }\r\nobjenesis = { group = \"org.objenesis\", name = \"objenesis\", version.ref = \"objenesis\" }\r\nntpClient = { group = \"com.lyft.kronos\", name = \"kronos-android\", version.ref = \"ntpClient\" }\r\npersian-date-time = { module = \"com.github.mfathi91:persian-date-time\", version.ref = \"persianDateTime\" }\r\nplay-services-base = { module = \"com.google.android.gms:play-services-base\", version.ref = \"playServicesBase\" }\r\nplay-services-mlkit-subject-segmentation = { module = \"com.google.android.gms:play-services-mlkit-subject-segmentation\", version.ref = \"playServicesMlkitSubjectSegmentation\" }\r\nandroidx-swiperefreshlayout = { module = \"androidx.swiperefreshlayout:swiperefreshlayout\", version.ref = \"swiperefreshlayout\" }\r\nremotepreferences = { module = \"com.crossbowffs.remotepreferences:remotepreferences\", version.ref = \"remotepreferences\" }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
--- a/gradle/libs.versions.toml	(revision 70ae4b148c9d68164902904968f1acfda8fe8d63)
+++ b/gradle/libs.versions.toml	(date 1728794843822)
@@ -23,6 +23,7 @@
 recyclerview = "1.3.2"
 preferenceKtx = "1.2.1"
 remotepreferences = "0.8"
+removebg = "1.0.4"
 swiperefreshlayout = "1.2.0-alpha01"
 uiGeometry = "1.7.2"
 workRuntime = "2.9.1"
@@ -58,4 +59,5 @@
 play-services-base = { module = "com.google.android.gms:play-services-base", version.ref = "playServicesBase" }
 play-services-mlkit-subject-segmentation = { module = "com.google.android.gms:play-services-mlkit-subject-segmentation", version.ref = "playServicesMlkitSubjectSegmentation" }
 androidx-swiperefreshlayout = { module = "androidx.swiperefreshlayout:swiperefreshlayout", version.ref = "swiperefreshlayout" }
-remotepreferences = { module = "com.crossbowffs.remotepreferences:remotepreferences", version.ref = "remotepreferences" }
\ No newline at end of file
+remotepreferences = { module = "com.crossbowffs.remotepreferences:remotepreferences", version.ref = "remotepreferences" }
+removebg = { module = "com.github.erenalpaslan:removebg", version.ref = "removebg" }
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//file:noinspection SpellCheckingInspection\r\nplugins {\r\n\tid 'com.android.application'\r\n}\r\napply plugin: 'kotlin-android'\r\n\r\nandroid {\r\n\tcompileSdk 34\r\n\r\n\tdefaultConfig {\r\n\t\tapplicationId \"sh.siava.pixelxpert\"\r\n\t\tminSdk 33\r\n\t\ttargetSdk 34\r\n\t\tversionCode 394\r\n\t\tversionName \"canary-394\"\r\n\r\n\t\ttestInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n\t}\r\n\r\n\tfinal def keystorePropertiesFile = rootProject.file(\"ReleaseKey.properties\")\r\n\r\n\tdef releaseSignature = signingConfigs.debug\r\n\ttry (def keystorePropertiesStream = new FileInputStream(keystorePropertiesFile)) {\r\n\t\tfinal def keystoreProperties = new Properties()\r\n\t\tkeystoreProperties.load(keystorePropertiesStream)\r\n\t\treleaseSignature = signingConfigs.create(\"releaseSignature\")\r\n\t\t\t\t{\r\n\t\t\t\t\tkeyAlias keystoreProperties['keyAlias']\r\n\t\t\t\t\tkeyPassword keystoreProperties['keyPassword']\r\n\t\t\t\t\tstoreFile rootProject.file(keystoreProperties['storeFile'])\r\n\t\t\t\t\tstorePassword keystoreProperties['storePassword']\r\n\t\t\t\t}\r\n\t}\r\n\tcatch (ignored) {\r\n\t}\r\n\r\n\tbuildTypes {\r\n\t\trelease {\r\n\t\t\tminifyEnabled true\r\n\t\t\tshrinkResources true\r\n\t\t\tcrunchPngs true\r\n\t\t\tproguardFiles(\"proguard-android-optimize.txt\", \"proguard.pro\", \"proguard-rules.pro\")\r\n\t\t\tsigningConfig releaseSignature\r\n\t\t}\r\n\t\tdebug {\r\n\t\t\tminifyEnabled false\r\n\t\t\tproguardFiles(\"proguard-android-optimize.txt\", \"proguard.pro\", \"proguard-rules.pro\")\r\n\t\t\tsigningConfig releaseSignature\r\n\t\t}\r\n\t}\r\n\r\n\tapplicationVariants.configureEach { variant ->\r\n\t\tvariant.outputs.configureEach { output ->\r\n\t\t\toutputFileName = new File(\"PixelXpert.apk\")\r\n\t\t}\r\n\t}\r\n\r\n\tcompileOptions {\r\n\t\tsourceCompatibility JavaVersion.VERSION_1_9\r\n\t\ttargetCompatibility JavaVersion.VERSION_1_9\r\n\t}\r\n\tlint {\r\n\t\tcheckReleaseBuilds false\r\n\t\tabortOnError false\r\n\t}\r\n\tnamespace 'sh.siava.pixelxpert'\r\n\tbuildFeatures {\r\n\t\tviewBinding true\r\n\t\taidl true\r\n\t}\r\n\tkotlinOptions {\r\n\t\tjvmTarget = '9'\r\n\t}\r\n}\r\n\r\ndependencies {\r\n\t// Xposed api\r\n\tcompileOnly files('lib/api-82.jar')\r\n\tcompileOnly files('lib/api-82-sources.jar')\r\n\r\n\timplementation project(path: ':RangeSliderPreference')\r\n\r\n\timplementation libs.androidx.constraintlayout\r\n\timplementation libs.navigation.fragment.ktx\r\n\timplementation libs.navigation.ui.ktx\r\n\timplementation libs.navigation.fragment.ktx\r\n\timplementation libs.navigation.ui.ktx\r\n\timplementation libs.androidx.appcompat\r\n\timplementation libs.androidx.annotation\r\n\timplementation libs.androidx.preference.ktx\r\n\timplementation libs.androidx.recyclerview\r\n\timplementation libs.android.material\r\n\timplementation libs.androidx.ui.geometry\r\n\t//noinspection KtxExtensionAvailable\r\n\timplementation libs.androidx.activity\r\n\timplementation libs.androidx.work.runtime\r\n\timplementation libs.androidx.concurrent.futures\r\n\r\n\t// The core module that provides APIs to a shell\r\n\timplementation libs.libsuCore\r\n\t// Optional: APIs for creating root services. Depends on \":core\"\r\n\timplementation libs.libsuService\r\n\t// Optional: Provides remote file system support\r\n\timplementation libs.libsuNIO\r\n\r\n\timplementation libs.remotepreferences\r\n\t// Remote Preferences for Xposed Module prefs\r\n\timplementation libs.colorpicker //Color Picker Component for UI\r\n\timplementation libs.persian.date.time //Persian Calendar\r\n\r\n\timplementation libs.markdown //Markdown reader\r\n\r\n\t// Search Preference\r\n\timplementation libs.androidx.cardview\r\n\timplementation libs.apache.commons.text\r\n\r\n\timplementation libs.androidx.swiperefreshlayout\r\n\r\n\t// Class initializer\r\n\t// https://mvnrepository.com/artifact/org.objenesis/objenesis\r\n\timplementation libs.objenesis\r\n\r\n\timplementation libs.ntpClient //NTP Client\r\n\r\n\t//Google Subject Segmentation - MLKit\r\n\timplementation libs.play.services.mlkit.subject.segmentation\r\n\timplementation libs.play.services.base\r\n  \r\n  // Collapsing Toolbar with subtitle\r\n\timplementation libs.collapsingtoolbarlayout.subtitle\r\n\r\n\t// Splash screen\r\n\timplementation libs.androidx.core.splashscreen\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision 70ae4b148c9d68164902904968f1acfda8fe8d63)
+++ b/app/build.gradle	(date 1728794843816)
@@ -131,4 +131,6 @@
 
 	// Splash screen
 	implementation libs.androidx.core.splashscreen
+
+	implementation libs.removebg
 }
\ No newline at end of file
