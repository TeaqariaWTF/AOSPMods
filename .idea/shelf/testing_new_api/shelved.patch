Index: app/src/main/java/sh/siava/pixelxpert/ui/fragments/HooksFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sh.siava.pixelxpert.ui.fragments;\r\n\r\nimport static android.content.Context.RECEIVER_EXPORTED;\r\nimport static android.view.View.GONE;\r\nimport static android.view.View.VISIBLE;\r\nimport static sh.siava.pixelxpert.modpacks.Constants.SYSTEM_FRAMEWORK_PACKAGE;\r\nimport static sh.siava.pixelxpert.modpacks.Constants.SYSTEM_UI_PACKAGE;\r\nimport static sh.siava.pixelxpert.modpacks.utils.BootLoopProtector.PACKAGE_STRIKE_KEY_KEY;\r\n\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.ComponentName;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.ServiceConnection;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.drawable.Drawable;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.IBinder;\r\nimport android.os.RemoteException;\r\nimport android.util.Log;\r\nimport android.util.TypedValue;\r\nimport android.view.Gravity;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MenuInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.PopupMenu;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.topjohnwu.superuser.Shell;\r\nimport com.topjohnwu.superuser.ipc.RootService;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\nimport sh.siava.pixelxpert.IRootProviderService;\r\nimport sh.siava.pixelxpert.R;\r\nimport sh.siava.pixelxpert.databinding.FragmentHooksBinding;\r\nimport sh.siava.pixelxpert.modpacks.Constants;\r\nimport sh.siava.pixelxpert.service.RootProvider;\r\nimport sh.siava.pixelxpert.utils.AppUtils;\r\nimport sh.siava.pixelxpert.utils.PreferenceHelper;\r\n\r\npublic class HooksFragment extends BaseFragment {\r\n\r\n\tprivate FragmentHooksBinding binding;\r\n\t/**\r\n\t * @noinspection unused\r\n\t */\r\n\tprivate final String TAG = getClass().getSimpleName();\r\n\tIntentFilter intentFilterHookedPackages = new IntentFilter();\r\n\tprivate final List<String> hookedPackageList = new ArrayList<>();\r\n\tprivate List<String> monitorPackageList;\r\n\tprivate int dotCount = 0;\r\n\t/**\r\n\t * @noinspection FieldCanBeLocal\r\n\t */\r\n\tprivate ServiceConnection mCoreRootServiceConnection;\r\n\tprivate IRootProviderService mRootServiceIPC = null;\r\n\tprivate boolean rebootPending = false;\r\n\tprivate final String reboot_key = \"reboot_pending\";\r\n\r\n\t@Override\r\n\tpublic String getTitle() {\r\n\t\treturn getString(R.string.hooked_packages_title);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n\t\tbinding = FragmentHooksBinding.inflate(inflater, container, false);\r\n\r\n\t\tif (savedInstanceState != null) {\r\n\t\t\trebootPending = savedInstanceState.getBoolean(reboot_key);\r\n\t\t}\r\n\r\n\t\tbinding.rebootButton.setOnClickListener(view -> AppUtils.Restart(\"system\"));\r\n\r\n\t\tif (!rebootPending) {\r\n\t\t\tbinding.rebootButton.hide();\r\n\t\t}\r\n\r\n\t\tstartRootService();\r\n\r\n\t\treturn binding.getRoot();\r\n\t}\r\n\r\n\tprivate void startRootService() {\r\n\t\t// Start RootService connection\r\n\t\tIntent intent = new Intent(requireContext(), RootProvider.class);\r\n\t\tmCoreRootServiceConnection = new ServiceConnection() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onServiceConnected(ComponentName name, IBinder service) {\r\n\t\t\t\tbinding.loadingIndicator.setVisibility(GONE);\r\n\t\t\t\tmRootServiceIPC = IRootProviderService.Stub.asInterface(service);\r\n\t\t\t\tonRootServiceStarted();\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onServiceDisconnected(ComponentName name) {\r\n\t\t\t\tmRootServiceIPC = null;\r\n\t\t\t}\r\n\t\t};\r\n\t\tRootService.bind(intent, mCoreRootServiceConnection);\r\n\t}\r\n\r\n\tprivate void onRootServiceStarted() {\r\n\t\tif (getContext() == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tintentFilterHookedPackages.addAction(Constants.ACTION_XPOSED_CONFIRMED);\r\n\t\trequireContext().registerReceiver(receiverHookedPackages, intentFilterHookedPackages, RECEIVER_EXPORTED);\r\n\r\n\t\tmonitorPackageList = Arrays.asList(getResources().getStringArray(R.array.module_scope));\r\n\t\tcheckHookedPackages();\r\n\r\n\t\tbinding.swipeRefreshLayout.setOnRefreshListener(() -> {\r\n\t\t\tcheckHookedPackages();\r\n\t\t\tbinding.swipeRefreshLayout.setRefreshing(false);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate final BroadcastReceiver receiverHookedPackages = new BroadcastReceiver() {\r\n\t\t@Override\r\n\t\tpublic void onReceive(Context context, Intent intent) {\r\n\t\t\tif (Objects.equals(intent.getAction(), Constants.ACTION_XPOSED_CONFIRMED)) {\r\n\t\t\t\tString broadcastPackageName = intent.getStringExtra(\"packageName\");\r\n\r\n\t\t\t\tfor (int i = 0; i < binding.content.getChildCount(); i++) {\r\n\t\t\t\t\tView list = binding.content.getChildAt(i);\r\n\t\t\t\t\tTextView desc = list.findViewById(R.id.desc);\r\n\t\t\t\t\tString pkgName = ((TextView) list.findViewById(R.id.title)).getText().toString();\r\n\r\n\t\t\t\t\tif (pkgName.equals(broadcastPackageName)) {\r\n\t\t\t\t\t\tbinding.content.post(() -> {\r\n\t\t\t\t\t\t\tdesc.setText(getText(R.string.package_hooked_successful));\r\n\t\t\t\t\t\t\tdesc.setTextColor(requireContext().getColor(R.color.success));\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!hookedPackageList.contains(broadcastPackageName)) {\r\n\t\t\t\t\thookedPackageList.add(broadcastPackageName);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tprivate final CountDownTimer countDownTimer = new CountDownTimer(5000, 500) {\r\n\t\t@Override\r\n\t\tpublic void onTick(long millisUntilFinished) {\r\n\t\t\tdotCount = (dotCount + 1) % 4;\r\n\t\t\tString dots = new String(new char[dotCount]).replace('\\0', '.');\r\n\r\n\t\t\tfor (int i = 0; i < binding.content.getChildCount(); i++) {\r\n\t\t\t\tView list = binding.content.getChildAt(i);\r\n\t\t\t\tTextView desc = list.findViewById(R.id.desc);\r\n\r\n\t\t\t\tif (((String) desc.getText()).contains(getString(R.string.package_checking, \"\"))) {\r\n\t\t\t\t\tdesc.setText(getString(R.string.package_checking, dots));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void onFinish() {\r\n\t\t\tdotCount = 0;\r\n\t\t\trefreshListItem();\r\n\t\t}\r\n\t};\r\n\r\n\tprivate void checkHookedPackages() {\r\n\t\thookedPackageList.clear();\r\n\r\n\t\tinitListItem(monitorPackageList);\r\n\t\tnew Thread(() -> requireContext().sendBroadcast(new Intent().setAction(Constants.ACTION_CHECK_XPOSED_ENABLED))).start();\r\n\t\twaitAndRefresh();\r\n\t}\r\n\r\n\tprivate void waitAndRefresh() {\r\n\t\tcountDownTimer.start();\r\n\t}\r\n\r\n\tprivate void initListItem(List<String> pack) {\r\n\t\tdotCount = 0;\r\n\t\tcountDownTimer.cancel();\r\n\r\n\t\tif (binding.content.getChildCount() > 0) {\r\n\t\t\tbinding.content.removeAllViews();\r\n\t\t}\r\n\r\n\t\tfor (int i = 0; i < pack.size(); i++) {\r\n\t\t\tView list = LayoutInflater.from(requireContext()).inflate(R.layout.view_hooked_package_list, binding.content, false);\r\n\r\n\t\t\tLinearLayout.LayoutParams params = (LinearLayout.LayoutParams) list.getLayoutParams();\r\n\t\t\tif (i == 0) {\r\n\t\t\t\tlist.setBackgroundResource(R.drawable.container_top);\r\n\t\t\t\tparams.topMargin = dp2px(requireContext(), 16);\r\n\t\t\t} else if (i == pack.size() - 1) {\r\n\t\t\t\tlist.setBackgroundResource(R.drawable.container_bottom);\r\n\t\t\t\tparams.bottomMargin = dp2px(requireContext(), 16);\r\n\t\t\t} else {\r\n\t\t\t\tlist.setBackgroundResource(R.drawable.container_mid);\r\n\t\t\t}\r\n\r\n\t\t\tImageView preview = list.findViewById(R.id.icon);\r\n\t\t\tpreview.setImageDrawable(getAppIcon(pack.get(i)));\r\n\r\n\t\t\tTextView title = list.findViewById(R.id.title);\r\n\t\t\ttitle.setText(pack.get(i));\r\n\r\n\t\t\tTextView desc = list.findViewById(R.id.desc);\r\n\t\t\tif (isAppInstalled(pack.get(i))) {\r\n\t\t\t\tdesc.setText(getString(R.string.package_checking, \"\"));\r\n\t\t\t} else {\r\n\t\t\t\tdesc.setText(getText(R.string.package_not_found));\r\n\t\t\t\tdesc.setTextColor(requireContext().getColor(R.color.error));\r\n\t\t\t\tpreview.setAlpha(0.4f);\r\n\t\t\t\ttitle.setAlpha(0.4f);\r\n\t\t\t\tdesc.setAlpha(0.4f);\r\n\t\t\t}\r\n\r\n\t\t\tint finalI = i;\r\n\r\n\t\t\tButton activateInLSPosed = list.findViewById(R.id.activate_in_lsposed);\r\n\t\t\tactivateInLSPosed.setOnClickListener(view -> {\r\n\t\t\t\tactivateInLSPosed.setEnabled(false);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (mRootServiceIPC.activateInLSPosed(pack.get(finalI))) {\r\n\t\t\t\t\t\tactivateInLSPosed.animate().setDuration(300).withEndAction(() -> activateInLSPosed.setVisibility(GONE)).start();\r\n\t\t\t\t\t\tToast.makeText(requireContext(), getText(R.string.package_activated), Toast.LENGTH_SHORT).show();\r\n\t\t\t\t\t\tbinding.rebootButton.show();\r\n\t\t\t\t\t\trebootPending = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tToast.makeText(requireContext(), getText(R.string.package_activation_failed), Toast.LENGTH_SHORT).show();\r\n\t\t\t\t\t\tactivateInLSPosed.setEnabled(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (RemoteException e) {\r\n\t\t\t\t\tToast.makeText(requireContext(), getText(R.string.package_activation_failed), Toast.LENGTH_SHORT).show();\r\n\t\t\t\t\tactivateInLSPosed.setEnabled(true);\r\n\t\t\t\t\tLog.e(TAG, e.toString());\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlist.setOnClickListener(view -> {\r\n\t\t\t\t// show ripple effect and do nothing\r\n\t\t\t});\r\n\r\n\t\t\tPopupMenu popupMenu = new PopupMenu(requireContext(), list, Gravity.END);\r\n\t\t\tMenuInflater inflater = popupMenu.getMenuInflater();\r\n\t\t\tinflater.inflate(R.menu.hooks_menu, popupMenu.getMenu());\r\n\r\n\t\t\tpopupMenu.setOnMenuItemClickListener(item -> {\r\n\t\t\t\tint itemId = item.getItemId();\r\n\r\n\t\t\t\tif (itemId == R.id.launch_app) {\r\n\t\t\t\t\tIntent intent = requireContext()\r\n\t\t\t\t\t\t\t.getPackageManager()\r\n\t\t\t\t\t\t\t.getLaunchIntentForPackage(pack.get(finalI));\r\n\t\t\t\t\tif (intent != null) {\r\n\t\t\t\t\t\tstartActivity(intent);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tToast.makeText(\r\n\t\t\t\t\t\t\t\trequireContext(),\r\n\t\t\t\t\t\t\t\trequireContext().getString(R.string.package_not_launchable),\r\n\t\t\t\t\t\t\t\tToast.LENGTH_SHORT\r\n\t\t\t\t\t\t).show();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (itemId == R.id.restart_app) {\r\n\t\t\t\t\thandleApplicationRestart(pack.get(finalI));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tlist.setOnLongClickListener(v -> {\r\n\t\t\t\tpopupMenu.show();\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tlist.setOnClickListener(v -> {\r\n\t\t\t\tpopupMenu.show();\r\n\t\t\t});\r\n\r\n\t\t\tbinding.content.addView(list);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void handleApplicationRestart(String packageName) {\r\n\t\tif (SYSTEM_FRAMEWORK_PACKAGE.equals(packageName)) {\r\n\t\t\tAppUtils.Restart(\"android\");\r\n\t\t} else if (SYSTEM_UI_PACKAGE.equals(packageName)) {\r\n\t\t\tAppUtils.Restart(\"systemui\");\r\n\t\t} else {\r\n\t\t\tShell.cmd(\r\n\t\t\t\t\t\"killall \" + packageName,\r\n\t\t\t\t\t\"am force-stop \" + packageName\r\n\t\t\t).exec();\r\n\t\t\tIntent intent = requireContext()\r\n\t\t\t\t\t.getPackageManager()\r\n\t\t\t\t\t.getLaunchIntentForPackage(packageName);\r\n\t\t\tif (intent != null) {\r\n\t\t\t\tstartActivity(intent);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void refreshListItem() {\r\n\t\tfor (int i = 0; i < binding.content.getChildCount(); i++) {\r\n\t\t\tView list = binding.content.getChildAt(i);\r\n\t\t\tTextView desc = list.findViewById(R.id.desc);\r\n\t\t\tString pkgName = ((TextView) list.findViewById(R.id.title)).getText().toString();\r\n\t\t\tString reason;\r\n\r\n\t\t\tif (hookedPackageList.contains(pkgName)) {\r\n\t\t\t\treason = \"\";\r\n\t\t\t\tdesc.setText(getText(R.string.package_hooked_successful));\r\n\t\t\t\tdesc.setTextColor(requireContext().getColor(R.color.success));\r\n\t\t\t} else {\r\n\t\t\t\tdesc.setTextColor(requireContext().getColor(R.color.error));\r\n\t\t\t\tString description;\r\n\r\n\t\t\t\tif (!isAppInstalled(pkgName)) {\r\n\t\t\t\t\tdescription = getText(R.string.package_not_found).toString();\r\n\t\t\t\t\treason = \"\";\r\n\t\t\t\t} else if (!checkLSPosedDB(pkgName)) {\r\n\t\t\t\t\tdescription = getText(R.string.package_not_hook_enabled).toString();\r\n\t\t\t\t\treason = getString(R.string.package_not_hook_enabled_info, getString(R.string.activate_in_lsposed));\r\n\t\t\t\t} else if (hasBootLooped(pkgName)) {\r\n\t\t\t\t\tdescription = getText(R.string.package_hook_bootlooped).toString();\r\n\t\t\t\t\treason = getString(R.string.package_hook_bootlooped_info);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdescription = getText(R.string.package_hook_no_response).toString();\r\n\t\t\t\t\treason = getString(R.string.package_hook_no_response_info);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdesc.setText(description);\r\n\t\t\t}\r\n\r\n\t\t\tif (desc.getText() == getText(R.string.package_not_hook_enabled)) {\r\n\t\t\t\tButton activateInLSPosed = list.findViewById(R.id.activate_in_lsposed);\r\n\t\t\t\tactivateInLSPosed.setVisibility(VISIBLE);\r\n\t\t\t\tactivateInLSPosed.setEnabled(true);\r\n\t\t\t}\r\n\r\n\t\t\tif (!reason.isBlank()) {\r\n\t\t\t\tTextView info = list.findViewById(R.id.reason);\r\n\t\t\t\tinfo.setVisibility(VISIBLE);\r\n\t\t\t\tinfo.setOnClickListener(view -> {\r\n\t\t\t\t\tnew MaterialAlertDialogBuilder(requireContext(), R.style.MaterialComponents_MaterialAlertDialog)\r\n\t\t\t\t\t\t\t.setTitle(R.string.whats_wrong)\r\n\t\t\t\t\t\t\t.setMessage(reason)\r\n\t\t\t\t\t\t\t.setPositiveButton(R.string.okay, (dialog, which) -> dialog.dismiss())\r\n\t\t\t\t\t\t\t.show();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate boolean isAppInstalled(String packageName) {\r\n\t\ttry {\r\n\t\t\treturn mRootServiceIPC.isPackageInstalled(packageName);\r\n\t\t} catch (RemoteException e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate Drawable getAppIcon(String packageName) {\r\n\t\ttry {\r\n\t\t\treturn requireContext().getPackageManager().getApplicationIcon(packageName);\r\n\t\t} catch (PackageManager.NameNotFoundException ignored) {\r\n\t\t\treturn ContextCompat.getDrawable(requireContext(), R.drawable.ic_android);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate boolean checkLSPosedDB(String pkgName) {\r\n\t\ttry {\r\n\t\t\treturn mRootServiceIPC.checkLSPosedDB(pkgName);\r\n\t\t} catch (RemoteException e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate boolean hasBootLooped(String pkgName) {\r\n\t\tif (PreferenceHelper.getModulePrefs() != null) {\r\n\t\t\tSharedPreferences prefs = PreferenceHelper.getModulePrefs();\r\n\t\t\tString strikeKey = String.format(\"%s%s\", PACKAGE_STRIKE_KEY_KEY, pkgName);\r\n\t\t\tint strikeCount = prefs.getInt(strikeKey, 0);\r\n\r\n\t\t\treturn strikeCount >= 3;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate int dp2px(Context context, int dp) {\r\n\t\treturn (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());\r\n\t}\r\n\r\n\t@SuppressWarnings(\"unused\")\r\n\tpublic static class StringBooleanMap {\r\n\t\tprivate final HashMap<String, Boolean> map = new HashMap<>();\r\n\r\n\t\tpublic void put(String key, boolean value) {\r\n\t\t\tmap.put(key, value);\r\n\t\t}\r\n\r\n\t\tpublic boolean get(String key) {\r\n\t\t\tBoolean value = map.get(key);\r\n\t\t\treturn value != null ? value : false;\r\n\t\t}\r\n\r\n\t\tpublic boolean containsKey(String key) {\r\n\t\t\treturn map.containsKey(key);\r\n\t\t}\r\n\r\n\t\tpublic void remove(String key) {\r\n\t\t\tmap.remove(key);\r\n\t\t}\r\n\r\n\t\tpublic void clear() {\r\n\t\t\tmap.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onSaveInstanceState(@NonNull Bundle outState) {\r\n\t\toutState.putBoolean(reboot_key, rebootPending);\r\n\t\tsuper.onSaveInstanceState(outState);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onViewStateRestored(@Nullable Bundle savedInstanceState) {\r\n\t\tsuper.onViewStateRestored(savedInstanceState);\r\n\t\tif (savedInstanceState != null) {\r\n\t\t\trebootPending = savedInstanceState.getBoolean(reboot_key);\r\n\t\t}\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onStop() {\r\n\t\tsuper.onStop();\r\n\t\tcountDownTimer.cancel();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onDestroy() {\r\n\t\tsuper.onDestroy();\r\n\t\ttry {\r\n\t\t\trequireContext().unregisterReceiver(receiverHookedPackages);\r\n\t\t} catch (Exception ignored) {\r\n\t\t}\r\n\t\tcountDownTimer.cancel();\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sh/siava/pixelxpert/ui/fragments/HooksFragment.java b/app/src/main/java/sh/siava/pixelxpert/ui/fragments/HooksFragment.java
--- a/app/src/main/java/sh/siava/pixelxpert/ui/fragments/HooksFragment.java	(revision 5b016588fc55e4cebf033bce041da275911c2f47)
+++ b/app/src/main/java/sh/siava/pixelxpert/ui/fragments/HooksFragment.java	(date 1730547702684)
@@ -48,6 +48,8 @@
 import java.util.List;
 import java.util.Objects;
 
+import io.github.libxposed.service.XposedService;
+import io.github.libxposed.service.XposedServiceHelper;
 import sh.siava.pixelxpert.IRootProviderService;
 import sh.siava.pixelxpert.R;
 import sh.siava.pixelxpert.databinding.FragmentHooksBinding;
@@ -94,6 +96,46 @@
 			binding.rebootButton.hide();
 		}
 
+		io.github.libxposed.service.XposedServiceHelper.registerListener(new XposedServiceHelper.OnServiceListener() {
+			@Override
+			public void onServiceBind(@NonNull XposedService xposedService) {
+				Log.d(TAG, "onServiceBind: ");
+				xposedService.requestScope("com.android.systemui", new XposedService.OnScopeEventListener() {
+					@Override
+					public void onScopeRequestPrompted(String packageName) {
+						Log.d(TAG, "onScopeRequestPrompted: ");
+					}
+
+					@Override
+					public void onScopeRequestApproved(String packageName) {
+						Log.d(TAG, "onScopeRequestApproved: ");
+					}
+
+					@Override
+					public void onScopeRequestDenied(String packageName) {
+						Log.d(TAG, "onScopeRequestDenied: ");
+					}
+
+					@Override
+					public void onScopeRequestTimeout(String packageName) {
+						Log.d(TAG, "onScopeRequestTimeout: ");
+					}
+
+					@Override
+					public void onScopeRequestFailed(String packageName, String message) {
+						Log.d(TAG, "onScopeRequestFailed: ");
+					}
+				});
+			}
+
+			@Override
+			public void onServiceDied(@NonNull XposedService xposedService) {
+
+			}
+		});
+		Log.d(TAG, "onCreate: register done");
+
+
 		startRootService();
 
 		return binding.getRoot();
Index: app/proguard.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>-keep,allowoptimization,allowobfuscation class com.jaredrummler.android.colorpicker.**\r\n-keep,allowoptimization,allowobfuscation class androidx.annotation.**\r\n-dontwarn sun.security.internal.spec.**\r\n-dontwarn sun.security.provider.**\r\n-dontwarn com.jaredrummler.android.colorpicker.**\r\n-dontwarn androidx.annotation.**
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/proguard.pro b/app/proguard.pro
--- a/app/proguard.pro	(revision 5b016588fc55e4cebf033bce041da275911c2f47)
+++ b/app/proguard.pro	(date 1730545977967)
@@ -3,4 +3,12 @@
 -dontwarn sun.security.internal.spec.**
 -dontwarn sun.security.provider.**
 -dontwarn com.jaredrummler.android.colorpicker.**
--dontwarn androidx.annotation.**
\ No newline at end of file
+-dontwarn androidx.annotation.**
+
+-adaptresourcefilecontents META-INF/xposed/java_init.list
+-keepattributes RuntimeVisibleAnnotations
+-keep,allowobfuscation,allowoptimization public class * extends io.github.libxposed.api.XposedModule {
+    public <init>(...);
+    public void onPackageLoaded(...);
+    public void onSystemServerLoaded(...);
+}
\ No newline at end of file
Index: app/src/main/java/sh/siava/pixelxpert/XPEntryN.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sh/siava/pixelxpert/XPEntryN.java b/app/src/main/java/sh/siava/pixelxpert/XPEntryN.java
new file mode 100644
--- /dev/null	(date 1730543930327)
+++ b/app/src/main/java/sh/siava/pixelxpert/XPEntryN.java	(date 1730543930327)
@@ -0,0 +1,16 @@
+package sh.siava.pixelxpert;
+
+import android.util.Log;
+
+import androidx.annotation.NonNull;
+
+import io.github.libxposed.api.XposedInterface;
+import io.github.libxposed.api.XposedModule;
+
+public class XPEntryN extends XposedModule {
+	public XPEntryN(@NonNull XposedInterface base, @NonNull ModuleLoadedParam param) {
+		super(base, param);
+
+		Log.d("lspo", "XPEntryN: enter");
+	}
+}
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.FileInputStream\r\nimport java.util.Properties\r\n\r\nplugins {\r\n\talias(libs.plugins.android.application)\r\n\talias(libs.plugins.kotlin.android)\r\n}\r\n\r\nandroid {\r\n\r\n\tnamespace = \"sh.siava.pixelxpert\"\r\n\tcompileSdk = 35\r\n\r\n\tdefaultConfig {\r\n\t\tapplicationId = \"sh.siava.pixelxpert\"\r\n\t\tminSdk = 33\r\n\t\ttargetSdk = 35\r\n\t\tversionCode = 401\r\n\t\tversionName = \"canary-11\"\r\n\t\tsetProperty(\"archivesBaseName\", \"PixelXpert.apk\")\r\n\t\tndk {\r\n\t\t\t//noinspection ChromeOsAbiSupport\r\n\t\t\tabiFilters.add(\"arm64-v8a\")\r\n\t\t}\r\n\t}\r\n\r\n\tval keystorePropertiesFile = rootProject.file(\"ReleaseKey.properties\")\r\n\tvar releaseSigning = signingConfigs.getByName(\"debug\")\r\n\r\n\ttry {\r\n\t\tval keystoreProperties = Properties()\r\n\t\tFileInputStream(keystorePropertiesFile).use { inputStream ->\r\n\t\t\tkeystoreProperties.load(inputStream)\r\n\t\t}\r\n\r\n\t\treleaseSigning = signingConfigs.create(\"release\") {\r\n\t\t\tkeyAlias = keystoreProperties.getProperty(\"keyAlias\")\r\n\t\t\tkeyPassword = keystoreProperties.getProperty(\"keyPassword\")\r\n\t\t\tstoreFile = rootProject.file(keystoreProperties.getProperty(\"storeFile\"))\r\n\t\t\tstorePassword = keystoreProperties.getProperty(\"storePassword\")\r\n\t\t}\r\n\t} catch (ignored: Exception) {\r\n\t}\r\n\r\n\tbuildTypes {\r\n\t\trelease {\r\n\t\t\tisMinifyEnabled = true\r\n\t\t\tisShrinkResources = true\r\n\t\t\tproguardFiles(\"proguard-android-optimize.txt\", \"proguard.pro\", \"proguard-rules.pro\")\r\n\t\t\tsigningConfig = releaseSigning\r\n\t\t}\r\n\t\tdebug {\r\n\t\t\tisDebuggable = true\r\n\t\t\tisMinifyEnabled = false\r\n\t\t\tisShrinkResources = false\r\n\t\t\tsigningConfig = releaseSigning\r\n\t\t}\r\n\t}\r\n\r\n\tapplicationVariants.all {\r\n\t\tval variant = this\r\n\t\tvariant.outputs\r\n\t\t\t.map { it as com.android.build.gradle.internal.api.BaseVariantOutputImpl }\r\n\t\t\t.forEach { output ->\r\n\t\t\t\tval outputFileName = \"PixelXpert.apk\"\r\n\t\t\t\toutput.outputFileName = outputFileName\r\n\t\t\t}\r\n\t}\r\n\r\n\tbuildFeatures{\r\n\t\tviewBinding = true\r\n\t\tbuildConfig = true\r\n\t\taidl = true\r\n\t}\r\n\r\n\tcompileOptions {\r\n\t\tsourceCompatibility = JavaVersion.VERSION_21\r\n\t\ttargetCompatibility = JavaVersion.VERSION_21\r\n\t}\r\n\tkotlinOptions {\r\n\t\tjvmTarget = \"21\"\r\n\t}\r\n\tpackaging {\r\n\t\tjniLibs.excludes += setOf(\r\n\t\t\t\"**/libpytorch_jni_lite.so\"\r\n\t\t)\r\n\r\n\t\tjniLibs.useLegacyPackaging = true\r\n\t}\r\n}\r\n\r\ndependencies {\r\n\r\n\tcompileOnly(files(\"lib/api-82.jar\"))\r\n\tcompileOnly(files(\"lib/api-82-sources.jar\"))\r\n\r\n\timplementation(project(\":Submodules:RangeSliderPreference\"))\r\n\r\n\timplementation (libs.androidx.constraintlayout)\r\n\timplementation (libs.navigation.fragment.ktx)\r\n\timplementation (libs.navigation.ui.ktx)\r\n\timplementation (libs.navigation.fragment.ktx)\r\n\timplementation (libs.navigation.ui.ktx)\r\n\timplementation (libs.androidx.appcompat)\r\n\timplementation (libs.androidx.annotation)\r\n\timplementation (libs.androidx.preference.ktx)\r\n\timplementation (libs.androidx.recyclerview)\r\n\timplementation (libs.android.material)\r\n\timplementation (libs.androidx.ui.geometry)\r\n\t//noinspection KtxExtensionAvailable\r\n\timplementation (libs.androidx.activity)\r\n\timplementation (libs.androidx.work.runtime)\r\n\timplementation (libs.androidx.concurrent.futures)\r\n\r\n\t// The core module that provides APIs to a shell\r\n\timplementation (libs.libsuCore)\r\n\t// Optional: APIs for creating root services. Depends on \":core\"\r\n\timplementation (libs.libsuService)\r\n\t// Optional: Provides remote file system support\r\n\timplementation (libs.libsuNIO)\r\n\r\n\timplementation (libs.remotepreferences)\r\n\t// Remote Preferences for Xposed Module prefs\r\n\timplementation (libs.colorpicker) //Color Picker Component for UI\r\n\timplementation (libs.persian.date.time) //Persian Calendar\r\n\r\n\timplementation (libs.markdown) //Markdown reader\r\n\r\n\t// Search Preference\r\n\timplementation (libs.androidx.cardview)\r\n\timplementation (libs.apache.commons.text)\r\n\r\n\timplementation (libs.androidx.swiperefreshlayout)\r\n\r\n\t// Class initializer\r\n\t// https://mvnrepository.com/artifact/org.objenesis/objenesis\r\n\timplementation (libs.objenesis)\r\n\r\n\timplementation (libs.ntpClient) //NTP Client\r\n\r\n\t//Google Subject Segmentation - MLKit\r\n\timplementation (libs.play.services.mlkit.subject.segmentation)\r\n\timplementation (libs.play.services.base)\r\n\r\n  // Collapsing Toolbar with subtitle\r\n\timplementation (libs.collapsingtoolbarlayout.subtitle)\r\n\r\n\t// Splash screen\r\n\timplementation (libs.androidx.core.splashscreen)\r\n\r\n\timplementation (libs.prdownloader)\r\n\r\n\timplementation (libs.pytorch.android.lite)\r\n\timplementation (libs.pytorch.android.torchvision.lite)\r\n\timplementation (libs.gson)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 5b016588fc55e4cebf033bce041da275911c2f47)
+++ b/app/build.gradle.kts	(date 1730546685592)
@@ -85,12 +85,22 @@
 			"**/libpytorch_jni_lite.so"
 		)
 
+		resources {
+			merges += "META-INF/xposed/*"
+			excludes += "**"
+		}
+
 		jniLibs.useLegacyPackaging = true
 	}
 }
 
 dependencies {
 
+	implementation(files("lib/service-debug.aar"))
+	implementation(files("lib/interface-debug.aar"))
+	compileOnly(files("lib/api-debug.aar"))
+
+
 	compileOnly(files("lib/api-82.jar"))
 	compileOnly(files("lib/api-82-sources.jar"))
 
Index: app/src/main/java/sh/siava/pixelxpert/ui/activities/SettingsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sh.siava.pixelxpert.ui.activities;\r\n\r\nimport static android.app.NotificationManager.IMPORTANCE_DEFAULT;\r\nimport static androidx.preference.PreferenceManager.getDefaultSharedPreferences;\r\nimport static sh.siava.pixelxpert.R.string.update_channel_name;\r\nimport static sh.siava.pixelxpert.ui.Constants.UPDATES_CHANNEL_ID;\r\nimport static sh.siava.pixelxpert.utils.AppUtils.isLikelyPixelBuild;\r\n\r\nimport android.animation.Animator;\r\nimport android.annotation.SuppressLint;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.content.ComponentName;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.Configuration;\r\nimport android.content.res.Resources;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.LocaleList;\r\nimport android.util.Log;\r\nimport android.view.Gravity;\r\nimport android.view.Menu;\r\nimport android.view.MenuInflater;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.FrameLayout;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.fragment.app.FragmentTransaction;\r\nimport androidx.preference.Preference;\r\nimport androidx.preference.PreferenceFragmentCompat;\r\n\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\nimport com.topjohnwu.superuser.Shell;\r\n\r\nimport java.util.Locale;\r\nimport java.util.Objects;\r\n\r\nimport sh.siava.pixelxpert.BuildConfig;\r\nimport sh.siava.pixelxpert.R;\r\nimport sh.siava.pixelxpert.databinding.SettingsActivityBinding;\r\nimport sh.siava.pixelxpert.ui.fragments.HooksFragment;\r\nimport sh.siava.pixelxpert.ui.fragments.UpdateFragment;\r\nimport sh.siava.pixelxpert.ui.models.SearchPreferenceItem;\r\nimport sh.siava.pixelxpert.ui.preferences.preferencesearch.SearchConfiguration;\r\nimport sh.siava.pixelxpert.ui.preferences.preferencesearch.SearchPreference;\r\nimport sh.siava.pixelxpert.ui.preferences.preferencesearch.SearchPreferenceResult;\r\nimport sh.siava.pixelxpert.ui.preferences.preferencesearch.SearchPreferenceResultListener;\r\nimport sh.siava.pixelxpert.utils.AppUtils;\r\nimport sh.siava.pixelxpert.utils.ControlledPreferenceFragmentCompat;\r\nimport sh.siava.pixelxpert.utils.ExtendedSharedPreferences;\r\nimport sh.siava.pixelxpert.utils.MLKitSegmentor;\r\nimport sh.siava.pixelxpert.utils.NTPTimeSyncer;\r\nimport sh.siava.pixelxpert.utils.PrefManager;\r\nimport sh.siava.pixelxpert.utils.PreferenceHelper;\r\nimport sh.siava.pixelxpert.utils.PyTorchSegmentor;\r\nimport sh.siava.pixelxpert.utils.TimeSyncScheduler;\r\nimport sh.siava.pixelxpert.utils.UpdateScheduler;\r\n\r\npublic class SettingsActivity extends BaseActivity implements PreferenceFragmentCompat.OnPreferenceStartFragmentCallback, SearchPreferenceResultListener {\r\n\tprivate static final int REQUEST_IMPORT = 7;\r\n\tprivate static final int REQUEST_EXPORT = 9;\r\n\tprivate static final String TITLE_TAG = \"settingsActivityTitle\";\r\n\tprivate SettingsActivityBinding binding;\r\n\tprivate static final String mData = \"mDataKey\";\r\n\tprivate Integer selectedFragment = null;\r\n\r\n\tprivate static FragmentManager fragmentManager;\r\n\tprivate HeaderFragment headerFragment;\r\n\tprivate static SearchPreferenceItem[] searchItems = null;\r\n\r\n\t@Override\r\n\tpublic boolean onCreateOptionsMenu(@NonNull Menu menu) {\r\n\t\tMenuInflater inflater = getMenuInflater();\r\n\t\tinflater.inflate(R.menu.main_menu, menu);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void onCreate(Bundle savedInstanceState) {\r\n\t\tbinding = SettingsActivityBinding.inflate(getLayoutInflater());\r\n\t\tsuper.onCreate(savedInstanceState);\r\n\r\n\t\ttryMigratePrefs();\r\n\r\n\t\tcreateNotificationChannel();\r\n\t\tfragmentManager = getSupportFragmentManager();\r\n\t\tinitSearchableItems();\r\n\r\n\t\tPreferenceHelper.init(ExtendedSharedPreferences.from(getDefaultSharedPreferences(createDeviceProtectedStorageContext())));\r\n\r\n\t\tsetContentView(binding.getRoot());\r\n\r\n\t\tif (savedInstanceState == null) {\r\n\t\t\treplaceFragment(new HeaderFragment());\r\n\t\t}\r\n\r\n\t\tif (getIntent() != null && getIntent().getBooleanExtra(\"updateTapped\", false)) {\r\n\t\t\tIntent intent = getIntent();\r\n\t\t\tBundle bundle = new Bundle();\r\n\t\t\tbundle.putBoolean(\"updateTapped\", intent.getBooleanExtra(\"updateTapped\", false));\r\n\t\t\tbundle.putString(\"filePath\", intent.getStringExtra(\"filePath\"));\r\n\t\t\tUpdateFragment updateFragment = new UpdateFragment();\r\n\t\t\tupdateFragment.setArguments(bundle);\r\n\t\t\treplaceFragment(updateFragment);\r\n\t\t} else if (getIntent() != null && \"true\".equals(getIntent().getStringExtra(\"migratePrefs\"))) {\r\n\t\t\tIntent intent = getIntent();\r\n\t\t\tBundle bundle = new Bundle();\r\n\t\t\tbundle.putString(\"migratePrefs\", intent.getStringExtra(\"migratePrefs\"));\r\n\t\t\tUpdateFragment updateFragment = new UpdateFragment();\r\n\t\t\tupdateFragment.setArguments(bundle);\r\n\t\t\treplaceFragment(updateFragment);\r\n\t\t} else if (getIntent() != null && getIntent().getBooleanExtra(\"newUpdate\", false)) {\r\n\t\t\treplaceFragment(new UpdateFragment());\r\n\t\t}\r\n\r\n\t\tsetupBottomNavigationView();\r\n\r\n\t\tif (!isLikelyPixelBuild() && !BuildConfig.DEBUG) {\r\n\t\t\tnew MaterialAlertDialogBuilder(this, R.style.MaterialComponents_MaterialAlertDialog)\r\n\t\t\t\t\t.setTitle(R.string.incompatible_alert_title)\r\n\t\t\t\t\t.setMessage(R.string.incompatible_alert_body)\r\n\t\t\t\t\t.setPositiveButton(R.string.incompatible_alert_ok_btn, (dialog, which) -> dialog.dismiss())\r\n\t\t\t\t\t.show();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void initSearchableItems() {\r\n\t\tsearchItems = new SearchPreferenceItem[]{\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.header_preferences, R.string.app_name, new HeaderFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.dialer_prefs, R.string.dialer_header, new DialerFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.gesture_nav_prefs, R.string.gesturenav_header, new GestureNavFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.hotspot_prefs, R.string.hotspot_header, new HotSpotFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.lock_screen_prefs, R.string.lockscreen_header_title, new LockScreenFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.lsqs_custom_text, R.string.netstat_header, new NetworkStatFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.misc_prefs, R.string.misc_header, new MiscFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.nav_prefs, R.string.nav_header, new NavFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.own_prefs_header, R.string.own_prefs_header, new OwnPrefsFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.packagemanger_prefs, R.string.pm_header, new PackageManagerFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.qs_tile_qty_prefs, R.string.qs_tile_qty_title, new QSTileQtyFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.quicksettings_prefs, R.string.qs_panel_category_title, new QuickSettingsFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.sbqs_network_prefs, R.string.ntsb_category_title, new NetworkFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.statusbar_batterybar_prefs, R.string.sbbb_header, new SBBBFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.statusbar_batteryicon_prefs, R.string.sbbIcon_header, new SBBIconFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.statusbar_clock_prefs, R.string.sbc_header, new SBCFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.statusbar_settings, R.string.statusbar_header, new StatusbarFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.theming_prefs, R.string.theme_customization_category, new ThemingFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.three_button_prefs, R.string.threebutton_header_title, new ThreeButtonNavFragment()),\r\n\t\t\t\tnew SearchPreferenceItem(R.xml.physical_buttons_prefs, R.string.remap_physical_buttons_title, new PhysicalButtonRemapFragment()),\r\n\t\t};\r\n\t}\r\n\r\n\t@SuppressLint(\"NonConstantResourceId\")\r\n\tprivate void setupBottomNavigationView() {\r\n\t\tgetSupportFragmentManager().addOnBackStackChangedListener(() -> {\r\n\t\t\tString tag = getTopFragment();\r\n\r\n\t\t\tif (Objects.equals(tag, HeaderFragment.class.getSimpleName())) {\r\n\t\t\t\tselectedFragment = R.id.navigation_home;\r\n\t\t\t\tbinding.bottomNavigationView.getMenu().getItem(0).setChecked(true);\r\n\t\t\t} else if (Objects.equals(tag, UpdateFragment.class.getSimpleName())) {\r\n\t\t\t\tselectedFragment = R.id.navigation_update;\r\n\t\t\t\tbinding.bottomNavigationView.getMenu().getItem(1).setChecked(true);\r\n\t\t\t} else if (Objects.equals(tag, HooksFragment.class.getSimpleName())) {\r\n\t\t\t\tselectedFragment = R.id.navigation_hooks;\r\n\t\t\t\tbinding.bottomNavigationView.getMenu().getItem(2).setChecked(true);\r\n\t\t\t} else if (Objects.equals(tag, OwnPrefsFragment.class.getSimpleName())) {\r\n\t\t\t\tselectedFragment = R.id.navigation_settings;\r\n\t\t\t\tbinding.bottomNavigationView.getMenu().getItem(3).setChecked(true);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tbinding.bottomNavigationView.setOnItemSelectedListener(item -> {\r\n\t\t\tString tag = getTopFragment();\r\n\r\n\t\t\tswitch (item.getItemId()) {\r\n\t\t\t\tcase R.id.navigation_home:\r\n\t\t\t\t\tif (!Objects.equals(tag, HeaderFragment.class.getSimpleName())) {\r\n\t\t\t\t\t\tselectedFragment = R.id.navigation_home;\r\n\t\t\t\t\t\treplaceFragment(new HeaderFragment());\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\tcase R.id.navigation_update:\r\n\t\t\t\t\tif (!Objects.equals(tag, UpdateFragment.class.getSimpleName())) {\r\n\t\t\t\t\t\tselectedFragment = R.id.navigation_update;\r\n\t\t\t\t\t\treplaceFragment(new UpdateFragment());\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\tcase R.id.navigation_hooks:\r\n\t\t\t\t\tif (!Objects.equals(tag, HooksFragment.class.getSimpleName())) {\r\n\t\t\t\t\t\tselectedFragment = R.id.navigation_hooks;\r\n\t\t\t\t\t\treplaceFragment(new HooksFragment());\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\tcase R.id.navigation_settings:\r\n\t\t\t\t\tif (!Objects.equals(tag, OwnPrefsFragment.class.getSimpleName())) {\r\n\t\t\t\t\t\tselectedFragment = R.id.navigation_settings;\r\n\t\t\t\t\t\treplaceFragment(new OwnPrefsFragment());\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate String getTopFragment() {\r\n\t\tString[] fragment = {null};\r\n\r\n\t\tint last = getSupportFragmentManager().getFragments().size() - 1;\r\n\r\n\t\tif (last >= 0) {\r\n\t\t\tFragment topFragment = getSupportFragmentManager().getFragments().get(last);\r\n\r\n\t\t\tif (topFragment instanceof HeaderFragment)\r\n\t\t\t\tfragment[0] = HeaderFragment.class.getSimpleName();\r\n\t\t\telse if (topFragment instanceof UpdateFragment)\r\n\t\t\t\tfragment[0] = UpdateFragment.class.getSimpleName();\r\n\t\t\telse if (topFragment instanceof HooksFragment)\r\n\t\t\t\tfragment[0] = HooksFragment.class.getSimpleName();\r\n\t\t\telse if (topFragment instanceof OwnPrefsFragment)\r\n\t\t\t\tfragment[0] = OwnPrefsFragment.class.getSimpleName();\r\n\t\t}\r\n\r\n\t\treturn fragment[0];\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void onSaveInstanceState(@NonNull Bundle outState) {\r\n\t\tsuper.onSaveInstanceState(outState);\r\n\t\tif (selectedFragment != null) outState.putInt(mData, selectedFragment);\r\n\t\t// Save current activity title so we can set it again after a configuration change\r\n\t\toutState.putCharSequence(TITLE_TAG, getTitle());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onRestoreInstanceState(@NonNull Bundle savedInstanceState) {\r\n\t\tsuper.onRestoreInstanceState(savedInstanceState);\r\n\t\tselectedFragment = savedInstanceState.getInt(mData);\r\n\t}\r\n\r\n\tprivate void tryMigratePrefs() {\r\n\t\tString migrateFileName = \"PX_migrate.tmp\";\r\n\t\t@SuppressLint(\"SdCardPath\")\r\n\t\tString migrateFilePath = \"/sdcard/\" + migrateFileName;\r\n\t\tif (!Shell.cmd(String.format(\"stat %s\", migrateFilePath)).exec().getOut().isEmpty()) {\r\n\t\t\tString PXPrefsPath = \"/data/user_de/0/sh.siava.pixelxpert/shared_prefs/sh.siava.pixelxpert_preferences.xml\";\r\n\t\t\tShell.cmd(String.format(\"mv %s %s\", migrateFilePath, PXPrefsPath)).exec();\r\n\t\t\tShell.cmd(String.format(\"chmod 777 %s\", PXPrefsPath)).exec(); //system will correct the permissions upon next launch. let's just give it access to do so\r\n\r\n\t\t\tnew MaterialAlertDialogBuilder(this, R.style.MaterialComponents_MaterialAlertDialog)\r\n\t\t\t\t\t.setTitle(R.string.app_kill_alert_title)\r\n\t\t\t\t\t.setMessage(R.string.reboot_alert_body)\r\n\t\t\t\t\t.setPositiveButton(R.string.reboot_word, (dialog, which) -> AppUtils.Restart(\"system\"))\r\n\t\t\t\t\t.setCancelable(false)\r\n\t\t\t\t\t.show();\r\n\t\t}\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onSearchResultClicked(@NonNull final SearchPreferenceResult result) {\r\n\t\theaderFragment = new HeaderFragment();\r\n\t\tnew Handler(getMainLooper()).post(() -> headerFragment.onSearchResultClicked(result));\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void attachBaseContext(Context newBase) {\r\n\t\tSharedPreferences prefs = getDefaultSharedPreferences(newBase.createDeviceProtectedStorageContext());\r\n\r\n\t\tString localeCode = prefs.getString(\"appLanguage\", \"\");\r\n\t\tLocale locale = !localeCode.isEmpty() ? Locale.forLanguageTag(localeCode) : Locale.getDefault();\r\n\r\n\t\tResources res = newBase.getResources();\r\n\t\tConfiguration configuration = res.getConfiguration();\r\n\r\n\t\tconfiguration.setLocale(locale);\r\n\r\n\t\tLocaleList localeList = new LocaleList(locale);\r\n\t\tLocaleList.setDefault(localeList);\r\n\t\tconfiguration.setLocales(localeList);\r\n\r\n\t\tsuper.attachBaseContext(newBase.createConfigurationContext(configuration));\r\n\t}\r\n\r\n\tprivate void createNotificationChannel() {\r\n\t\tNotificationManager notificationManager = getSystemService(NotificationManager.class);\r\n\r\n\t\tnotificationManager.createNotificationChannel(new NotificationChannel(UPDATES_CHANNEL_ID, getString(update_channel_name), IMPORTANCE_DEFAULT));\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean onSupportNavigateUp() {\r\n\t\tif (getSupportFragmentManager().popBackStackImmediate()) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn super.onSupportNavigateUp();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean onPreferenceStartFragment(@NonNull PreferenceFragmentCompat caller, Preference pref) {\r\n\t\t// Instantiate the new Fragment\r\n\t\tfinal Bundle args = pref.getExtras();\r\n\t\tfinal Fragment fragment = getSupportFragmentManager().getFragmentFactory().instantiate(getClassLoader(), Objects.requireNonNull(pref.getFragment()));\r\n\t\tfragment.setArguments(args);\r\n\t\tfragment.setTargetFragment(caller, 0);\r\n\t\t// Replace the existing Fragment with the new Fragment\r\n\t\treplaceFragment(fragment);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean onOptionsItemSelected(MenuItem item) {\r\n\t\tSharedPreferences prefs = getDefaultSharedPreferences(createDeviceProtectedStorageContext());\r\n\r\n\t\tint itemID = item.getItemId();\r\n\r\n\t\tif (itemID == android.R.id.home) {\r\n\t\t\tonBackPressed();\r\n\t\t} else if (itemID == R.id.menu_clearPrefs) {\r\n\t\t\tPrefManager.clearPrefs(prefs);\r\n\t\t\tAppUtils.Restart(\"systemui\");\r\n\t\t} else if (itemID == R.id.menu_exportPrefs) {\r\n\t\t\timportExportSettings(true);\r\n\t\t} else if (itemID == R.id.menu_importPrefs) {\r\n\t\t\timportExportSettings(false);\r\n\t\t} else if (itemID == R.id.menu_restart) {\r\n\t\t\tAppUtils.Restart(\"system\");\r\n\t\t} else if (itemID == R.id.menu_restartSysUI) {\r\n\t\t\tAppUtils.Restart(\"systemui\");\r\n\t\t} else if (itemID == R.id.menu_soft_restart) {\r\n\t\t\tAppUtils.Restart(\"zygote\");\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate void importExportSettings(boolean export) {\r\n\t\tIntent fileIntent = new Intent();\r\n\t\tfileIntent.setAction(export ? Intent.ACTION_CREATE_DOCUMENT : Intent.ACTION_GET_CONTENT);\r\n\t\tfileIntent.setType(\"*/*\");\r\n\t\tfileIntent.putExtra(Intent.EXTRA_TITLE, \"PixelXpert_Config\" + \".bin\");\r\n\t\tstartActivityForResult(fileIntent, export ? REQUEST_EXPORT : REQUEST_IMPORT);\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n\t\tsuper.onActivityResult(requestCode, resultCode, data);\r\n\r\n\t\tif (data == null) return; //user hit cancel. Nothing to do\r\n\r\n\t\tSharedPreferences prefs = getDefaultSharedPreferences(createDeviceProtectedStorageContext());\r\n\t\tswitch (requestCode) {\r\n\t\t\tcase REQUEST_IMPORT:\r\n\t\t\t\ttry {\r\n\t\t\t\t\tPrefManager.importPath(prefs, getContentResolver().openInputStream(data.getData()));\r\n\t\t\t\t\tAppUtils.Restart(\"systemui\");\r\n\t\t\t\t} catch (Exception ignored) {\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase REQUEST_EXPORT:\r\n\t\t\t\ttry {\r\n\t\t\t\t\tPrefManager.exportPrefs(prefs, getContentResolver().openOutputStream(data.getData()));\r\n\t\t\t\t} catch (Exception ignored) {\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class HeaderFragment extends ControlledPreferenceFragmentCompat {\r\n\t\tSearchPreference searchPreference;\r\n\r\n\t\t@Override\r\n\t\tpublic boolean isBackButtonEnabled() {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.app_name);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.header_preferences;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tprotected int getDefaultThemeResource() {\r\n\t\t\treturn R.style.PrefsThemeCollapsingToolbar;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\r\n\t\t\tsuper.onCreatePreferences(savedInstanceState, rootKey);\r\n\r\n\t\t\tsearchPreference = findPreference(\"searchPreference\");\r\n\r\n\t\t\tif (searchPreference != null && getActivity() != null) {\r\n\t\t\t\tSearchConfiguration config = searchPreference.getSearchConfiguration();\r\n\t\t\t\tconfig.setActivity((AppCompatActivity) getActivity());\r\n\t\t\t\tconfig.setFragmentContainerViewId(R.id.settings);\r\n\r\n\t\t\t\tfor (SearchPreferenceItem searchItem : searchItems) {\r\n\t\t\t\t\tconfig.index(searchItem.getXml()).addBreadcrumb(this.getResources().getString(searchItem.getTitle()));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconfig.setBreadcrumbsEnabled(true);\r\n\t\t\t\tconfig.setHistoryEnabled(true);\r\n\t\t\t\tconfig.setFuzzySearchEnabled(false);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate void onSearchResultClicked(SearchPreferenceResult result) {\r\n\t\t\tif (result.getResourceFile() == R.xml.header_preferences) {\r\n\t\t\t\tsearchPreference.setVisible(false);\r\n\t\t\t\tSearchPreferenceResult.highlight(new HeaderFragment(), result.getKey());\r\n\t\t\t} else {\r\n\t\t\t\tfor (SearchPreferenceItem searchItem : searchItems) {\r\n\t\t\t\t\tif (searchItem.getXml() == result.getResourceFile()) {\r\n\t\t\t\t\t\treplaceFragment(searchItem.getFragment());\r\n\t\t\t\t\t\tSearchPreferenceResult.highlight(searchItem.getFragment(), result.getKey());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static void replaceFragment(Fragment fragment) {\r\n\t\tString tag = fragment.getClass().getSimpleName();\r\n\t\tFragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();\r\n\t\tfragmentTransaction.setCustomAnimations(R.anim.fragment_fade_in, R.anim.fragment_fade_out, R.anim.fragment_fade_in, R.anim.fragment_fade_out);\r\n\t\tfragmentTransaction.replace(R.id.settings, fragment, tag);\r\n\t\tif (Objects.equals(tag, HeaderFragment.class.getSimpleName())) {\r\n\t\t\tfragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);\r\n\t\t} else if (Objects.equals(tag, UpdateFragment.class.getSimpleName()) ||\r\n\t\t\t\tObjects.equals(tag, HooksFragment.class.getSimpleName()) ||\r\n\t\t\t\tObjects.equals(tag, OwnPrefsFragment.class.getSimpleName())) {\r\n\t\t\tfragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);\r\n\t\t\tfragmentTransaction.addToBackStack(tag);\r\n\t\t} else {\r\n\t\t\tfragmentTransaction.addToBackStack(tag);\r\n\t\t}\r\n\r\n\t\tfragmentTransaction.commit();\r\n\t}\r\n\r\n\tpublic static class NavFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.nav_header);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.nav_prefs;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class ThemingFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.theme_customization_category);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.theming_prefs;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class LockScreenFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.lockscreen_header_title);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.lock_screen_prefs;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void updateScreen(String key) {\r\n\t\t\tsuper.updateScreen(key);\r\n\r\n\t\t\tif (key == null) {\r\n\t\t\t\tupdateModelAvailabilitySummary();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (key.equals(\"DWallpaperEnabled\")) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tboolean DepthEffectEnabled = mPreferences.getBoolean(\"DWallpaperEnabled\", false);\r\n\r\n\t\t\t\t\tif (DepthEffectEnabled && getContext() != null) {\r\n\t\t\t\t\t\tnew MaterialAlertDialogBuilder(getContext(), R.style.MaterialComponents_MaterialAlertDialog)\r\n\t\t\t\t\t\t\t\t.setTitle(R.string.depth_effect_alert_title)\r\n\t\t\t\t\t\t\t\t.setMessage(getString(R.string.depth_effect_alert_body, getString(R.string.sysui_restart_needed)))\r\n\t\t\t\t\t\t\t\t.setPositiveButton(R.string.depth_effect_ok_btn, (dialog, which) -> AppUtils.Restart(\"systemui\"))\r\n\t\t\t\t\t\t\t\t.setCancelable(false)\r\n\t\t\t\t\t\t\t\t.show();\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (Exception ignored) {\r\n\t\t\t\t}\r\n\t\t\t} else if (key.equals(\"SegmentorAI\")) {\r\n\t\t\t\tupdateModelAvailabilitySummary();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate void updateModelAvailabilitySummary() {\r\n\t\t\ttry {\r\n\t\t\t\tboolean mlKitModel = Integer.parseInt(mPreferences.getString(\"SegmentorAI\", \"0\")) == 0;\r\n\r\n\t\t\t\tif (mlKitModel) {\r\n\t\t\t\t\tnew MLKitSegmentor(getActivity()).checkModelAvailability(moduleAvailabilityResponse ->\r\n\t\t\t\t\t\t\tfindPreference(\"DWallpaperEnabled\")\r\n\t\t\t\t\t\t\t\t\t.setSummary(moduleAvailabilityResponse.areModulesAvailable()\r\n\t\t\t\t\t\t\t\t\t\t\t? R.string.depth_wallpaper_model_ready\r\n\t\t\t\t\t\t\t\t\t\t\t: R.string.depth_wallpaper_model_not_available));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfindPreference(\"DWallpaperEnabled\")\r\n\t\t\t\t\t\t\t.setSummary(PyTorchSegmentor.loadAssets(getContext())\r\n\t\t\t\t\t\t\t\t\t? R.string.depth_wallpaper_model_ready\r\n\t\t\t\t\t\t\t\t\t: R.string.depth_wallpaper_model_not_available);\r\n\t\t\t\t}\r\n\t\t\t} catch (Exception exception) {\r\n\t\t\t\tLog.e(LockScreenFragment.class.getSimpleName(), exception.getMessage());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class SBBBFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.sbbb_header);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.statusbar_batterybar_prefs;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class NetworkFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.ntsb_category_title);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.sbqs_network_prefs;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class SBBIconFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.sbbIcon_header);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.statusbar_batteryicon_prefs;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class MiscFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.misc_header);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.misc_prefs;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\r\n\t\t\tsuper.onCreatePreferences(savedInstanceState, rootKey);\r\n\r\n\t\t\tfindPreference(\"SyncNTPTimeNow\")\r\n\t\t\t\t\t.setOnPreferenceClickListener(preference -> {\r\n\t\t\t\t\t\tsyncNTP();\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void updateScreen(String key) {\r\n\t\t\tsuper.updateScreen(key);\r\n\r\n\t\t\tif (key == null) return;\r\n\r\n\t\t\tswitch (key) {\r\n\t\t\t\tcase \"SyncNTPTime\":\r\n\t\t\t\tcase \"TimeSyncInterval\":\r\n\t\t\t\t\tTimeSyncScheduler.scheduleTimeSync(getContext());\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate void syncNTP() {\r\n\t\t\tboolean successful = new NTPTimeSyncer(getContext()).syncTimeNow();\r\n\r\n\t\t\tint toastResource = successful\r\n\t\t\t\t\t? R.string.sync_ntp_successful\r\n\t\t\t\t\t: R.string.sync_ntp_failed;\r\n\r\n\t\t\tToast.makeText(getContext(), toastResource, Toast.LENGTH_SHORT).show();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class PackageManagerFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.pm_header);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.packagemanger_prefs;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class HotSpotFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.hotspot_header);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.hotspot_prefs;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class SBCFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.sbc_header);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.statusbar_clock_prefs;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class ThreeButtonNavFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.threebutton_header_title);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.three_button_prefs;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic static class PhysicalButtonRemapFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.remap_physical_buttons_title);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.physical_buttons_prefs;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class StatusbarFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.statusbar_header);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.statusbar_settings;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class QSTileQtyFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.qs_tile_qty_title);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.qs_tile_qty_prefs;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class QuickSettingsFragment extends ControlledPreferenceFragmentCompat {\r\n\t\tprivate FrameLayout pullDownIndicator;\r\n\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.qs_panel_category_title);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.quicksettings_prefs;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\r\n\t\t\tsuper.onCreatePreferences(savedInstanceState, rootKey);\r\n\r\n\t\t\tcreatePullDownIndicator();\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void onDestroy() {\r\n\t\t\t((ViewGroup) pullDownIndicator.getParent()).removeView(pullDownIndicator);\r\n\t\t\tsuper.onDestroy();\r\n\t\t}\r\n\r\n\t\t@SuppressLint(\"RtlHardcoded\")\r\n\t\t@Override\r\n\t\tpublic void updateScreen(String key) {\r\n\t\t\tsuper.updateScreen(key);\r\n\t\t\ttry {\r\n\t\t\t\tint displayWidth = getActivity().getWindowManager().getCurrentWindowMetrics().getBounds().width();\r\n\r\n\t\t\t\tpullDownIndicator.setVisibility(PreferenceHelper.isVisible(\"QSPulldownPercent\") ? View.VISIBLE : View.GONE);\r\n\t\t\t\tFrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) pullDownIndicator.getLayoutParams();\r\n\t\t\t\tlp.width = Math.round(mPreferences.getSliderInt(\"QSPulldownPercent\", 25) * displayWidth / 100f);\r\n\t\t\t\tlp.gravity = Gravity.TOP | (Integer.parseInt(mPreferences.getString(\"QSPulldownSide\", \"1\")) == 1 ? Gravity.RIGHT : Gravity.LEFT);\r\n\t\t\t\tpullDownIndicator.setLayoutParams(lp);\r\n\t\t\t} catch (Exception ignored) {\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate void createPullDownIndicator() {\r\n\t\t\tpullDownIndicator = new FrameLayout(getContext());\r\n\t\t\tFrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(0, 25);\r\n\t\t\tlp.gravity = Gravity.TOP;\r\n\r\n\t\t\tpullDownIndicator.setLayoutParams(lp);\r\n\t\t\tpullDownIndicator.setBackgroundColor(getContext().getColor(android.R.color.system_accent1_200));\r\n\t\t\tpullDownIndicator.setAlpha(.7f);\r\n\t\t\tpullDownIndicator.setVisibility(View.VISIBLE);\r\n\r\n\t\t\t((ViewGroup) getActivity().getWindow().getDecorView().getRootView()).addView(pullDownIndicator);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class GestureNavFragment extends ControlledPreferenceFragmentCompat {\r\n\r\n\t\tFrameLayout leftBackGestureIndicator, rightBackGestureIndicator;\r\n\t\tFrameLayout leftSwipeGestureIndicator, rightSwipeGestureIndicator;\r\n\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.gesturenav_header);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.gesture_nav_prefs;\r\n\t\t}\r\n\r\n\t\t@SuppressLint(\"RtlHardcoded\")\r\n\t\t@Override\r\n\t\tpublic void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\r\n\t\t\tsuper.onCreatePreferences(savedInstanceState, rootKey);\r\n\r\n\t\t\trightBackGestureIndicator = prepareBackGestureView(Gravity.RIGHT);\r\n\t\t\tleftBackGestureIndicator = prepareBackGestureView(Gravity.LEFT);\r\n\r\n\t\t\trightSwipeGestureIndicator = prepareSwipeGestureView(Gravity.RIGHT);\r\n\t\t\tleftSwipeGestureIndicator = prepareSwipeGestureView(Gravity.LEFT);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void updateScreen(String key) {\r\n\t\t\tsuper.updateScreen(key);\r\n\t\t\ttry {\r\n\t\t\t\tint displayHeight = getActivity().getWindowManager().getCurrentWindowMetrics().getBounds().height();\r\n\t\t\t\tint displayWidth = getActivity().getWindowManager().getCurrentWindowMetrics().getBounds().width();\r\n\r\n\t\t\t\tfloat leftSwipeUpPercentage = mPreferences.getSliderFloat(\"leftSwipeUpPercentage\", 25);\r\n\r\n\t\t\t\tfloat rightSwipeUpPercentage = mPreferences.getSliderFloat(\"rightSwipeUpPercentage\", 25);\r\n\r\n\t\t\t\tint edgeWidth = Math.round(displayWidth * leftSwipeUpPercentage / 100f);\r\n\t\t\t\tViewGroup.LayoutParams lp = leftSwipeGestureIndicator.getLayoutParams();\r\n\t\t\t\tlp.width = edgeWidth;\r\n\t\t\t\tleftSwipeGestureIndicator.setLayoutParams(lp);\r\n\r\n\t\t\t\tedgeWidth = Math.round(displayWidth * rightSwipeUpPercentage / 100f);\r\n\t\t\t\tlp = rightSwipeGestureIndicator.getLayoutParams();\r\n\t\t\t\tlp.width = edgeWidth;\r\n\t\t\t\trightSwipeGestureIndicator.setLayoutParams(lp);\r\n\r\n\t\t\t\tsetVisibility(rightSwipeGestureIndicator, PreferenceHelper.isVisible(\"rightSwipeUpPercentage\"), 400);\r\n\t\t\t\tsetVisibility(leftSwipeGestureIndicator, PreferenceHelper.isVisible(\"leftSwipeUpPercentage\"), 400);\r\n\r\n\t\t\t\tsetVisibility(rightBackGestureIndicator, PreferenceHelper.isVisible(\"BackRightHeight\"), 400);\r\n\t\t\t\tsetVisibility(leftBackGestureIndicator, PreferenceHelper.isVisible(\"BackLeftHeight\"), 400);\r\n\r\n\t\t\t\tint edgeHeight = Math.round(displayHeight * mPreferences.getSliderInt(\"BackRightHeight\", 100) / 100f);\r\n\t\t\t\tlp = rightBackGestureIndicator.getLayoutParams();\r\n\t\t\t\tlp.height = edgeHeight;\r\n\t\t\t\trightBackGestureIndicator.setLayoutParams(lp);\r\n\r\n\t\t\t\tedgeHeight = Math.round(displayHeight * mPreferences.getSliderInt(\"BackLeftHeight\", 100) / 100f);\r\n\t\t\t\tlp = leftBackGestureIndicator.getLayoutParams();\r\n\t\t\t\tlp.height = edgeHeight;\r\n\t\t\t\tleftBackGestureIndicator.setLayoutParams(lp);\r\n\r\n\t\t\t} catch (Exception ignored) {\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate FrameLayout prepareSwipeGestureView(int gravity) {\r\n\t\t\tint navigationBarHeight = 0;\r\n\t\t\t@SuppressLint({\"DiscouragedApi\", \"InternalInsetResource\"})\r\n\t\t\tint resourceId = getResources().getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");\r\n\t\t\tif (resourceId > 0) {\r\n\t\t\t\tnavigationBarHeight = getContext().getResources().getDimensionPixelSize(resourceId);\r\n\t\t\t}\r\n\r\n\t\t\tFrameLayout result = new FrameLayout(getContext());\r\n\t\t\tFrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(0, navigationBarHeight);\r\n\t\t\tlp.gravity = gravity | Gravity.BOTTOM;\r\n\t\t\tlp.bottomMargin = 0;\r\n\t\t\tresult.setLayoutParams(lp);\r\n\r\n\t\t\tresult.setBackgroundColor(getContext().getColor(android.R.color.system_accent1_300));\r\n\t\t\tresult.setAlpha(.7f);\r\n\t\t\t((ViewGroup) getActivity().getWindow().getDecorView().getRootView()).addView(result);\r\n\t\t\tresult.setVisibility(View.GONE);\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tprivate FrameLayout prepareBackGestureView(int gravity) {\r\n\t\t\tint navigationBarHeight = 0;\r\n\t\t\t@SuppressLint({\"InternalInsetResource\", \"DiscouragedApi\"})\r\n\t\t\tint resourceId = getResources().getIdentifier(\"navigation_bar_height\", \"dimen\", \"android\");\r\n\t\t\tif (resourceId > 0) {\r\n\t\t\t\tnavigationBarHeight = getContext().getResources().getDimensionPixelSize(resourceId);\r\n\t\t\t}\r\n\r\n\t\t\tFrameLayout result = new FrameLayout(getContext());\r\n\t\t\tFrameLayout.LayoutParams lp = new FrameLayout.LayoutParams(50, 0);\r\n\t\t\tlp.gravity = gravity | Gravity.BOTTOM;\r\n\t\t\tlp.bottomMargin = navigationBarHeight;\r\n\t\t\tresult.setLayoutParams(lp);\r\n\r\n\t\t\tresult.setBackgroundColor(getContext().getColor(android.R.color.system_accent1_300));\r\n\t\t\tresult.setAlpha(.7f);\r\n\t\t\t((ViewGroup) getActivity().getWindow().getDecorView().getRootView()).addView(result);\r\n\t\t\tresult.setVisibility(View.GONE);\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t@SuppressWarnings(\"SameParameterValue\")\r\n\t\tprivate void setVisibility(View v, boolean visible, long duration) {\r\n\t\t\tif ((v.getVisibility() == View.VISIBLE) == visible) return;\r\n\r\n\t\t\tfloat basicAlpha = v.getAlpha();\r\n\t\t\tfloat destAlpha = (visible) ? 1f : 0f;\r\n\r\n\t\t\tif (visible) v.setAlpha(0f);\r\n\t\t\tv.setVisibility(View.VISIBLE);\r\n\r\n\t\t\tv.animate().setDuration(duration).alpha(destAlpha).setListener(new Animator.AnimatorListener() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onAnimationStart(Animator animator) {\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onAnimationEnd(Animator animator) {\r\n\t\t\t\t\tif (!visible) v.setVisibility(View.GONE);\r\n\t\t\t\t\tv.setAlpha(basicAlpha);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onAnimationCancel(Animator animator) {\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onAnimationRepeat(Animator animator) {\r\n\t\t\t\t}\r\n\t\t\t}).start();\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void onDestroy() {\r\n\t\t\t((ViewGroup) rightBackGestureIndicator.getParent()).removeView(rightBackGestureIndicator);\r\n\t\t\t((ViewGroup) leftBackGestureIndicator.getParent()).removeView(leftBackGestureIndicator);\r\n\r\n\t\t\t((ViewGroup) rightSwipeGestureIndicator.getParent()).removeView(rightSwipeGestureIndicator);\r\n\t\t\t((ViewGroup) leftSwipeGestureIndicator.getParent()).removeView(leftSwipeGestureIndicator);\r\n\r\n\t\t\tsuper.onDestroy();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class NetworkStatFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.netstat_header);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.lsqs_custom_text;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class DialerFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.dialer_header);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.dialer_prefs;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static class OwnPrefsFragment extends ControlledPreferenceFragmentCompat {\r\n\t\t@Override\r\n\t\tpublic String getTitle() {\r\n\t\t\treturn getString(R.string.own_prefs_header);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int getLayoutResource() {\r\n\t\t\treturn R.xml.own_prefs_header;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\r\n\t\t\tsuper.onCreatePreferences(savedInstanceState, rootKey);\r\n\r\n\t\t\tfindPreference(\"CheckForUpdate\")\r\n\t\t\t\t\t.setOnPreferenceClickListener(preference -> {\r\n\t\t\t\t\t\treplaceFragment(new UpdateFragment());\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\r\n\t\t\tfindPreference(\"GitHubRepo\")\r\n\t\t\t\t\t.setOnPreferenceClickListener(preference -> {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tIntent intent = new Intent(Intent.ACTION_VIEW);\r\n\t\t\t\t\t\t\tintent.setData(Uri.parse(\"https://pixelxpert.siava.sh\"));\r\n\t\t\t\t\t\t\tstartActivity(intent);\r\n\t\t\t\t\t\t} catch (Exception ignored) {\r\n\t\t\t\t\t\t\tToast.makeText(getContext(), getString(R.string.browser_not_found), Toast.LENGTH_SHORT).show();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\r\n\t\t\tfindPreference(\"TelegramGroup\")\r\n\t\t\t\t\t.setOnPreferenceClickListener(preference -> {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tIntent intent = new Intent(Intent.ACTION_VIEW);\r\n\t\t\t\t\t\t\tintent.setData(Uri.parse(\"https://t.me/PixelXpert_Discussion\"));\r\n\t\t\t\t\t\t\tstartActivity(intent);\r\n\t\t\t\t\t\t} catch (Exception ignored) {\r\n\t\t\t\t\t\t\tToast.makeText(getContext(), getString(R.string.browser_not_found), Toast.LENGTH_SHORT).show();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\r\n\t\t\tfindPreference(\"CrowdinProject\").setSummary(getString(R.string.crowdin_summary, getString(R.string.app_name)));\r\n\t\t\tfindPreference(\"CrowdinProject\")\r\n\t\t\t\t\t.setOnPreferenceClickListener(preference -> {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tIntent intent = new Intent(Intent.ACTION_VIEW);\r\n\t\t\t\t\t\t\tintent.setData(Uri.parse(\"https://pixelxpert.siava.sh/translate\"));\r\n\t\t\t\t\t\t\tstartActivity(intent);\r\n\t\t\t\t\t\t} catch (Exception ignored) {\r\n\t\t\t\t\t\t\tToast.makeText(getContext(), getString(R.string.browser_not_found), Toast.LENGTH_SHORT).show();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\r\n\t\t\tfindPreference(\"UsageWiki\")\r\n\t\t\t\t\t.setOnPreferenceClickListener(preference -> {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tIntent intent = new Intent(Intent.ACTION_VIEW);\r\n\t\t\t\t\t\t\tintent.setData(Uri.parse(\"https://pixelxpert.siava.sh/wiki\"));\r\n\t\t\t\t\t\t\tstartActivity(intent);\r\n\t\t\t\t\t\t} catch (Exception ignored) {\r\n\t\t\t\t\t\t\tToast.makeText(getContext(), getString(R.string.browser_not_found), Toast.LENGTH_SHORT).show();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void updateScreen(String key) {\r\n\t\t\tsuper.updateScreen(key);\r\n\r\n\t\t\tif (key == null) return;\r\n\r\n\t\t\tswitch (key) {\r\n\t\t\t\tcase \"appLanguage\":\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tif (getActivity() != null) {\r\n\t\t\t\t\t\t\tgetActivity().recreate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (Exception ignored) {\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"AlternativeThemedAppIcon\":\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tboolean AlternativeThemedAppIconEnabled = mPreferences.getBoolean(\"AlternativeThemedAppIcon\", false);\r\n\r\n\t\t\t\t\t\tnew MaterialAlertDialogBuilder(getContext(), R.style.MaterialComponents_MaterialAlertDialog)\r\n\t\t\t\t\t\t\t\t.setTitle(R.string.app_kill_alert_title)\r\n\t\t\t\t\t\t\t\t.setMessage(R.string.app_kill_alert_body)\r\n\t\t\t\t\t\t\t\t.setPositiveButton(R.string.app_kill_ok_btn, (dialog, which) -> setAlternativeAppIcon(AlternativeThemedAppIconEnabled))\r\n\t\t\t\t\t\t\t\t.setCancelable(false)\r\n\t\t\t\t\t\t\t\t.show();\r\n\t\t\t\t\t} catch (Exception ignored) {\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"AutoUpdate\":\r\n\t\t\t\t\tUpdateScheduler.scheduleUpdates(getContext());\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate void setAlternativeAppIcon(boolean alternativeThemedAppIconEnabled) {\r\n\t\t\tPackageManager packageManager = getActivity().getPackageManager();\r\n\r\n\t\t\tpackageManager.setComponentEnabledSetting(\r\n\t\t\t\t\tnew ComponentName(BuildConfig.APPLICATION_ID, BuildConfig.APPLICATION_ID + \".FakeSplashActivityNormalIcon\"),\r\n\t\t\t\t\talternativeThemedAppIconEnabled ? PackageManager.COMPONENT_ENABLED_STATE_DISABLED : PackageManager.COMPONENT_ENABLED_STATE_ENABLED,\r\n\t\t\t\t\tPackageManager.DONT_KILL_APP\r\n\t\t\t);\r\n\r\n\t\t\t// Enable themed app icon component\r\n\t\t\tpackageManager.setComponentEnabledSetting(\r\n\t\t\t\t\tnew ComponentName(BuildConfig.APPLICATION_ID, BuildConfig.APPLICATION_ID + \".FakeSplashActivityAlternateIcon\"),\r\n\t\t\t\t\talternativeThemedAppIconEnabled ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DISABLED,\r\n\t\t\t\t\tPackageManager.DONT_KILL_APP\r\n\t\t\t);\r\n\r\n\t\t\tgetActivity().finish();\r\n\t\t}\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void onNewIntent(@NonNull Intent intent) {\r\n\t\tsuper.onNewIntent(intent);\r\n\t\tsetIntent(intent);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sh/siava/pixelxpert/ui/activities/SettingsActivity.java b/app/src/main/java/sh/siava/pixelxpert/ui/activities/SettingsActivity.java
--- a/app/src/main/java/sh/siava/pixelxpert/ui/activities/SettingsActivity.java	(revision 5b016588fc55e4cebf033bce041da275911c2f47)
+++ b/app/src/main/java/sh/siava/pixelxpert/ui/activities/SettingsActivity.java	(date 1730547702674)
@@ -8,6 +8,7 @@
 
 import android.animation.Animator;
 import android.annotation.SuppressLint;
+import android.app.AlertDialog;
 import android.app.NotificationChannel;
 import android.app.NotificationManager;
 import android.content.ComponentName;
@@ -45,6 +46,8 @@
 import java.util.Locale;
 import java.util.Objects;
 
+import io.github.libxposed.service.XposedService;
+import io.github.libxposed.service.XposedServiceHelper;
 import sh.siava.pixelxpert.BuildConfig;
 import sh.siava.pixelxpert.R;
 import sh.siava.pixelxpert.databinding.SettingsActivityBinding;
@@ -68,6 +71,7 @@
 
 public class SettingsActivity extends BaseActivity implements PreferenceFragmentCompat.OnPreferenceStartFragmentCallback, SearchPreferenceResultListener {
 	private static final int REQUEST_IMPORT = 7;
+	private static final String TAG = "SettingsActivity";
 	private static final int REQUEST_EXPORT = 9;
 	private static final String TITLE_TAG = "settingsActivityTitle";
 	private SettingsActivityBinding binding;
@@ -132,6 +136,9 @@
 					.setPositiveButton(R.string.incompatible_alert_ok_btn, (dialog, which) -> dialog.dismiss())
 					.show();
 		}
+
+
+
 	}
 
 	private void initSearchableItems() {
Index: app/src/main/java/sh/siava/pixelxpert/ui/activities/SplashScreenActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sh.siava.pixelxpert.ui.activities;\r\n\r\nimport static sh.siava.pixelxpert.utils.MiscUtils.getColorFromAttribute;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\r\n\r\nimport java.util.concurrent.CountDownLatch;\r\n\r\nimport sh.siava.pixelxpert.PixelXpert;\r\nimport sh.siava.pixelxpert.R;\r\nimport sh.siava.pixelxpert.databinding.ActivitySplashScreenBinding;\r\nimport sh.siava.pixelxpert.utils.AppUtils;\r\n\r\n@SuppressLint(\"CustomSplashScreen\")\r\npublic class SplashScreenActivity extends AppCompatActivity {\r\n\t/**\r\n\t * @noinspection unused\r\n\t */\r\n\tString TAG = getClass().getSimpleName();\r\n\tprivate ActivitySplashScreenBinding mBinding;\r\n\tprivate final CountDownLatch mRootCheckPassed = new CountDownLatch(1);\r\n\r\n\t@Override\r\n\tprotected void onCreate(Bundle savedInstanceState) {\r\n\t\tsuper.onCreate(savedInstanceState);\r\n\t\tmBinding = ActivitySplashScreenBinding.inflate(getLayoutInflater());\r\n\t\tsetContentView(mBinding.getRoot());\r\n\r\n\t\tgetWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\r\n\t\tgetWindow().setStatusBarColor(getColorFromAttribute(this, R.attr.colorSurfaceContainer));\r\n\r\n\t\t// Root permission check\r\n\t\tnew Thread(() -> {\r\n\t\t\tif (PixelXpert.get().hasRootAccess()) {\r\n\t\t\t\tmRootCheckPassed.countDown();\r\n\t\t\t} else {\r\n\t\t\t\tif (!getIntent().hasExtra(\"FromKSU\")) {\r\n\t\t\t\t\tAppUtils.runKSURootActivity(this, true);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trunOnUiThread(() ->\r\n\t\t\t\t\t\tnew MaterialAlertDialogBuilder(SplashScreenActivity.this, R.style.MaterialComponents_MaterialAlertDialog)\r\n\t\t\t\t\t\t\t\t.setCancelable(false)\r\n\t\t\t\t\t\t\t\t.setMessage(getText(R.string.root_access_denied))\r\n\t\t\t\t\t\t\t\t.setPositiveButton(getText(R.string.exit), (dialog, i) -> System.exit(0))\r\n\t\t\t\t\t\t\t\t.show());\r\n\t\t\t}\r\n\r\n\t\t\t// Update the UI\r\n\t\t\tsetCheckUIDone(mBinding.circularRoot.getId(), mBinding.doneRoot.getId(), mRootCheckPassed.getCount() == 0);\r\n\t\t}).start();\r\n\r\n\t\t// End splash screen and go to the main activity\r\n\t\tnew Thread(() -> {\r\n\t\t\ttry {\r\n\t\t\t\t// Wait for all checks to pass and for all operations to finish\r\n\t\t\t\tmRootCheckPassed.await();\r\n\r\n\t\t\t\tPixelXpert app = PixelXpert.get();\r\n\t\t\t\tif (!PixelXpert.get().isCoreRootServiceBound()) {\r\n\t\t\t\t\tapp.tryConnectRootService();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tapp.mRootServiceConnected.await();\r\n\r\n\t\t\t\t// Update the UI\r\n\t\t\t\tsetCheckUIDone(mBinding.circularRootService.getId(), mBinding.doneRootService.getId(), app.mRootServiceConnected.getCount() == 0);\r\n\r\n\t\t\t\t// This is just for aesthetics: I don't want the splashscreen to be too fast\r\n\t\t\t\tThread.sleep(1000);\r\n\r\n\t\t\t\tif (app.mRootServiceConnected.getCount() == 0) {\r\n\t\t\t\t\t// Start the main activity\r\n\t\t\t\t\tIntent intent = new Intent(SplashScreenActivity.this, SettingsActivity.class);\r\n\t\t\t\t\tstartActivity(intent);\r\n\t\t\t\t\tfinish();\r\n\t\t\t\t} else {\r\n\t\t\t\t\trunOnUiThread(() ->\r\n\t\t\t\t\t\t\tnew MaterialAlertDialogBuilder(SplashScreenActivity.this, R.style.MaterialComponents_MaterialAlertDialog)\r\n\t\t\t\t\t\t\t\t\t.setCancelable(false)\r\n\t\t\t\t\t\t\t\t\t.setMessage(getText(R.string.root_service_failed))\r\n\t\t\t\t\t\t\t\t\t.setPositiveButton(getText(R.string.exit), (dialog, i) -> System.exit(0))\r\n\t\t\t\t\t\t\t\t\t.show());\r\n\t\t\t\t}\r\n\t\t\t} catch (InterruptedException ignored) {\r\n\t\t\t}\r\n\t\t}).start();\r\n\t}\r\n\r\n\tprivate void setCheckUIDone(int circularID, int doneImageID, boolean success) {\r\n\t\tView circular = findViewById(circularID);\r\n\t\tImageView doneImage = findViewById(doneImageID);\r\n\t\trunOnUiThread(() -> {\r\n\t\t\tcircular.setVisibility(View.GONE);\r\n\t\t\tdoneImage.setImageResource(success ? R.drawable.ic_success : R.drawable.ic_fail);\r\n\t\t\tdoneImage.setVisibility(View.VISIBLE);\r\n\t\t});\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/sh/siava/pixelxpert/ui/activities/SplashScreenActivity.java b/app/src/main/java/sh/siava/pixelxpert/ui/activities/SplashScreenActivity.java
--- a/app/src/main/java/sh/siava/pixelxpert/ui/activities/SplashScreenActivity.java	(revision 5b016588fc55e4cebf033bce041da275911c2f47)
+++ b/app/src/main/java/sh/siava/pixelxpert/ui/activities/SplashScreenActivity.java	(date 1730542498935)
@@ -5,16 +5,20 @@
 import android.annotation.SuppressLint;
 import android.content.Intent;
 import android.os.Bundle;
+import android.util.Log;
 import android.view.View;
 import android.view.WindowManager;
 import android.widget.ImageView;
 
+import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
 
 import com.google.android.material.dialog.MaterialAlertDialogBuilder;
 
 import java.util.concurrent.CountDownLatch;
 
+import io.github.libxposed.service.XposedService;
+import io.github.libxposed.service.XposedServiceHelper;
 import sh.siava.pixelxpert.PixelXpert;
 import sh.siava.pixelxpert.R;
 import sh.siava.pixelxpert.databinding.ActivitySplashScreenBinding;
@@ -35,6 +39,7 @@
 		mBinding = ActivitySplashScreenBinding.inflate(getLayoutInflater());
 		setContentView(mBinding.getRoot());
 
+
 		getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
 		getWindow().setStatusBarColor(getColorFromAttribute(this, R.attr.colorSurfaceContainer));
 
